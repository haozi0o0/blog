<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>14.Jdbc</title>
    <link href="/2023/03/20/java/14.JDBC/"/>
    <url>/2023/03/20/java/14.JDBC/</url>
    
    <content type="html"><![CDATA[<h1 id="Jdbc"><a href="#Jdbc" class="headerlink" title="Jdbc"></a>Jdbc</h1><span id="more"></span><h2 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h2><p>1.JDBC为访问不同的数据库提供了统一的接口,为使用者屏蔽了细节问题<br>2.Java程序员使用JDBC,可以连接任何提供了JDBC驱动程序的数据库系统,从而完成对数据库的各种操作<br>3.java利用Jdbc规定一套接口规范,让不同的数据库厂商实现,在java程序中直接调用接口的方法即可,java程序员直接面对接口编程即可<br>4.JDBC相关类和接口在java.sql和javax.sql包中</p><h3 id="1-1总体步骤"><a href="#1-1总体步骤" class="headerlink" title="1.1总体步骤"></a>1.1总体步骤</h3><pre><code class="hljs">（1） 加载驱动 -- 加载Driver 类（2） 获取连接 -- connection（3） 写sql语句 -- CRUD（4） 释放资源-- close</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java">mport java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.logging.Logger;<br><span class="hljs-keyword">import</span> com.mysql.jdbc.Driver;<br><br><span class="hljs-comment">//完成简单的操作</span><br><span class="hljs-comment">//方式1:会直接使用com.mysql.jdbc.Driver()属于静态加载,灵活性差,依赖强</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">jdbc01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-comment">//前置工作:导入mysql的jar文件拷贝到路径下</span><br>        <span class="hljs-comment">//1.注册驱动</span><br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>();<br><br>        <span class="hljs-comment">//2.得到连接</span><br>        <span class="hljs-comment">//jdbc:mysql://规定好表示协议,通过jdbc的方式连接mysql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/haozi&quot;</span>;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//将用户名和密码放入到properties对象</span><br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;5399joker&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> driver.connect(url, properties);<br><br>        <span class="hljs-comment">//3.执行sql语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into test1 values(1,&#x27;耗子&#x27;,18)&quot;</span>;<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connect.createStatement();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> statement.executeUpdate(sql);    <span class="hljs-comment">//如果是 dml语句,返回的就是影响行数</span><br>        System.out.println(rows&gt;<span class="hljs-number">0</span>? <span class="hljs-string">&quot;成功&quot;</span>:<span class="hljs-string">&quot;失败&quot;</span>);<br><br>        <span class="hljs-comment">//4.关闭连接</span><br>        statement.close();<br>        connect.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-连接数据库的五种方式"><a href="#2-连接数据库的五种方式" class="headerlink" title="2.连接数据库的五种方式"></a>2.连接数据库的五种方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.mysql.jdbc.Driver;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.Connection;<br><span class="hljs-keyword">import</span> java.sql.DriverManager;<br><span class="hljs-keyword">import</span> java.sql.SQLException;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JdbcConn</span> &#123;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//第一种</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Driver</span>();<br>        <span class="hljs-comment">//2.得到连接</span><br>        <span class="hljs-comment">//jdbc:mysql://规定好表示协议,通过jdbc的方式连接mysql</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/haozi&quot;</span>;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//将用户名和密码放入到properties对象</span><br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;5399joker&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> driver.connect(url, properties);<br>        System.out.println(connect);<br>    &#125;<br>    <span class="hljs-comment">//第二种</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect02</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;<br>        <span class="hljs-comment">//使用反射加载Driver类,动态加载,更加的灵活,减少依赖性</span><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) aClass.newInstance();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/haozi&quot;</span>;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        <span class="hljs-comment">//将用户名和密码放入到properties对象</span><br>        properties.setProperty(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;root&quot;</span>);<br>        properties.setProperty(<span class="hljs-string">&quot;password&quot;</span>,<span class="hljs-string">&quot;5399joker&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connect</span> <span class="hljs-operator">=</span> driver.connect(url, properties);<br>        System.out.println(connect);<br>    &#125;<br>    <span class="hljs-comment">//第三种</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect03</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException &#123;<br>        <span class="hljs-comment">//使用DriverManager代替Driver进行统一管理</span><br>        <span class="hljs-comment">//使用反射加载Driver类</span><br>        Class&lt;?&gt; aClass = Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-type">Driver</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> (Driver) aClass.newInstance();<br>        <span class="hljs-comment">//创建url和user和passwd</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/haozi&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5399joker&quot;</span>;<br>        <span class="hljs-comment">//注册Driver驱动</span><br>        DriverManager.registerDriver(driver);<br>        <span class="hljs-comment">//利用DriverManager进行读取</span><br>        <span class="hljs-comment">//拿到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url, user, password);<br>        System.out.println(connection);<br>    &#125;<br>    <span class="hljs-comment">//第四种,推荐使用~~~~</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect04</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> ClassNotFoundException,SQLException&#123;<br>        <span class="hljs-comment">//使用Class.forName自动完成注册驱动,简化代码</span><br>        <span class="hljs-comment">//使用反射加载了Driver类</span><br>        Class.forName(<span class="hljs-string">&quot;com.mysql.jdbc.Driver&quot;</span>);<br>        <span class="hljs-comment">//创建url和user和passwd</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jdbc:mysql://127.0.0.1:3306/haozi&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;root&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;5399joker&quot;</span>;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span>DriverManager.getConnection(url,user,password);<br>        System.out.println(connection);<br>    &#125;<br>    <span class="hljs-comment">//第五种,在第四种的方式上改进,增加配置文件,让连接mysql更灵活</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">connect05</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;<br>        <span class="hljs-comment">//使用配置文件,连接数据库更灵活</span><br>        <span class="hljs-comment">//通过Properties对象获取配置文件的信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,user,password);<br>        System.out.println(connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-ResultSet-结果集"><a href="#3-ResultSet-结果集" class="headerlink" title="3.ResultSet(结果集)"></a>3.ResultSet(结果集)</h2><p>1.表示数据库结果集的数据表,通常通过执行查询数据库的语句生成<br>2.ResultSet对象保持一个光标指向其当前的数据行,最初,光标位于第一行之前<br>3.next方法将光标移动到下一行,并且由于在ResultSet对象中没有更多行时返回false,因此可以在while循环中使用循环来遍历结果集</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><br><span class="hljs-comment">//演示select语句返回ResultSet,并取出结果</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ResultSet_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, SQLException &#123;<br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-comment">//得到链接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,user,password);<br>        <span class="hljs-comment">//得到Statement</span><br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        <span class="hljs-comment">//组织sql语句</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select id,name,age from test1&quot;</span>;<br>        <span class="hljs-comment">//执行给定的sql语句,该语句返回单个ResultSet对象</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>        <span class="hljs-comment">//使用while取出数据</span><br>        <span class="hljs-keyword">while</span> (resultSet.next())&#123; <span class="hljs-comment">//resultSet.next()让光标向后移动,如果没有更多行,则返回false</span><br>            <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-number">1</span>);<br>            <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> resultSet.getNString(<span class="hljs-number">2</span>);<br>            <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> resultSet.getInt(<span class="hljs-number">3</span>);<br>            System.out.println(id+<span class="hljs-string">&quot;\t&quot;</span>+name+<span class="hljs-string">&quot;\t&quot;</span>+age);<br>        &#125;<br>        <span class="hljs-comment">//关闭连接</span><br>        resultSet.close();<br>        statement.close();<br>        connection.close();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-SQL注入"><a href="#4-SQL注入" class="headerlink" title="4.SQL注入"></a>4.SQL注入</h2><p>1.Statement对象用于执行静态SQL语句并返回其生成的结果的对象<br>2.在连接建立后,需要对数据库进行访问,执行命令或是SQL语句,可以通过<br>    Statement   [存在SQL注入]<br>    PreparedStatement   [预处理]<br>    CallableStatement   [存储过程]<br>3.Statement对象执行SQL语句,存在SQL注入风险<br>4.要防范SQL注入,只要用PreparedStatement(从Statement扩展而来)取代Statement就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//Statement演示sql注入</span><br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">//演示statement的注入问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Statement_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, SQLException &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">//让用户输入管理员用户名和密码</span><br>        System.out.print(<span class="hljs-string">&quot;请输入管理员的名字:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_name</span> <span class="hljs-operator">=</span> sc.nextLine();<br>        <span class="hljs-comment">//如果希望看到SQL注入,这里需要用nextLine,next()方法时当接收到空格或单引号则判定为输入结束</span><br>        System.out.print(<span class="hljs-string">&quot;请输入管理员的密码:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_passwd</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>        <span class="hljs-comment">//通过Properties对象获取配置文件信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,user,password);<br>        <span class="hljs-type">Statement</span> <span class="hljs-variable">statement</span> <span class="hljs-operator">=</span> connection.createStatement();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select name,pwd from admin where name =&#x27;&quot;</span><br>                +admin_name+<span class="hljs-string">&quot;&#x27;and pwd = &#x27;&quot;</span>+admin_passwd+<span class="hljs-string">&quot;&#x27;&quot;</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> statement.executeQuery(sql);<br>        <span class="hljs-keyword">if</span>(resultSet.next())&#123;<br>            System.out.println(<span class="hljs-string">&quot;登陆成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;登陆失败&quot;</span>);<br>        &#125;<br>        resultSet.close();;<br>        statement.close();;<br>        connection.close();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输入用户名:1&#x27; or</span><br><span class="hljs-comment">//输入密码:or &#x27;1&#x27;= &#x27;1</span><br><span class="hljs-comment">//然后会发现登陆成功</span><br></code></pre></td></tr></table></figure><h2 id="5-PreparedStatement预处理"><a href="#5-PreparedStatement预处理" class="headerlink" title="5.PreparedStatement预处理"></a>5.PreparedStatement预处理</h2><p>1.PreparedStatement执行的SQL语句中的参数用问号来表示,调用PreparedStatement对象的setXxx()方法来设置这些参数,setXxx()方法有两个参数,第一个参数是要设置的SQL语句中的参数的索引(从1开始),第二个是设置的SQL语句中的参数的值<br>2.调用excuteQuery()返回ResultSet对象<br>3.调用excuteUpdate()执行更新,包括增、删、修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.sql.*;<br><span class="hljs-keyword">import</span> java.util.Properties;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-comment">//演示preparedstatement使用</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreparedStatement_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, SQLException &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">//让用户输入管理员用户名和密码</span><br>        System.out.print(<span class="hljs-string">&quot;请输入管理员的名字:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_name</span> <span class="hljs-operator">=</span> sc.nextLine();<br>        <span class="hljs-comment">//如果希望看到SQL注入,这里需要用nextLine,next()方法时当接收到空格或单引号则判定为输入结束</span><br>        System.out.print(<span class="hljs-string">&quot;请输入管理员的密码:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_passwd</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>        <span class="hljs-comment">//3.通过Properties对象获取配置文件信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,user,password);<br>        <span class="hljs-comment">//3.1sql语句的问号相当于占位符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select name,pwd from admin where name = ? and pwd = ? &quot;</span>;<br>        <span class="hljs-comment">//3.2得到PrepareStatement</span><br>        <span class="hljs-comment">//3.2preparedStatement 对象实现了 PreparedStatement接口的实现类的对象</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>        <span class="hljs-comment">//3.3给?赋值</span><br>        preparedStatement.setString(<span class="hljs-number">1</span>,admin_name);<br>        preparedStatement.setString(<span class="hljs-number">2</span>,admin_passwd);<br><br>        <span class="hljs-comment">//执行select语句使用excuteQuery,执行dml(update,insert,delete) executeUpdate()查找操作用</span><br>        <span class="hljs-comment">//这里执行查询的时候不用再写sql了</span><br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">resultSet</span> <span class="hljs-operator">=</span> preparedStatement.executeQuery();<br>        <span class="hljs-keyword">if</span>(resultSet.next())&#123;<br>            System.out.println(<span class="hljs-string">&quot;登陆成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;登陆失败&quot;</span>);<br>        &#125;<br>        resultSet.close();<br>        preparedStatement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//可以抑制SQL注入</span><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//通过预处理实现增删改查</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PreparedStatementDML_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException, SQLException &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-comment">//让用户输入管理员用户名和密码</span><br>        System.out.print(<span class="hljs-string">&quot;请输入ID:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_ID</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>        System.out.print(<span class="hljs-string">&quot;请输入管理员的名字:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_name</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>        <span class="hljs-comment">//如果希望看到SQL注入,这里需要用nextLine,next()方法时当接收到空格或单引号则判定为输入结束</span><br>        System.out.print(<span class="hljs-string">&quot;请输入管理员的密码:&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">admin_passwd</span> <span class="hljs-operator">=</span> sc.nextLine();<br><br>        <span class="hljs-comment">//3.通过Properties对象获取配置文件信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> DriverManager.getConnection(url,user,password);<br>        <span class="hljs-comment">//3.1sql语句的问号相当于占位符</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into admin values (?,?,?)&quot;</span>;<br>        <span class="hljs-comment">//3.2得到PrepareStatement</span><br>        <span class="hljs-comment">//3.2preparedStatement 对象实现了 PreparedStatement接口的实现类的对象</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>        <span class="hljs-comment">//3.3给?赋值</span><br>        preparedStatement.setString(<span class="hljs-number">2</span>,admin_name);<br>        preparedStatement.setString(<span class="hljs-number">1</span>,admin_ID);<br>        preparedStatement.setString(<span class="hljs-number">3</span>,admin_passwd);<br><br>        <span class="hljs-comment">//执行select语句使用excuteQuery,执行dml(update,insert,delete) executeUpdate()查找操作用</span><br>        <span class="hljs-comment">//这里执行查询的时候不用再写sql了</span><br>        <span class="hljs-comment">//4.执行dml语句,返回值为受影响的行数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">rows</span> <span class="hljs-operator">=</span> preparedStatement.executeUpdate();<br>        System.out.println(rows&gt;<span class="hljs-number">0</span>?<span class="hljs-string">&quot;执行成功&quot;</span>:<span class="hljs-string">&quot;执行失败&quot;</span>);<br>        <span class="hljs-comment">//关闭连接</span><br>        preparedStatement.close();<br>        connection.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-通过自定义的JDBCUtils工具包来操作数据库"><a href="#6-通过自定义的JDBCUtils工具包来操作数据库" class="headerlink" title="6.通过自定义的JDBCUtils工具包来操作数据库"></a>6.通过自定义的JDBCUtils工具包来操作数据库</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//JDBCUtils工具包</span><br><span class="hljs-comment">//工具类,完成mysql的连接和关闭</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCUtils</span> &#123;<br>    <span class="hljs-comment">//定义相关属性(4个),因为只需要一份,所以做出static</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String user;   <span class="hljs-comment">//用户名</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String password;  <span class="hljs-comment">//密码</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String url;  <span class="hljs-comment">//url</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> String driver;  <span class="hljs-comment">//驱动名</span><br><br>    <span class="hljs-comment">//在static代码块去初始化</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>            properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>            <span class="hljs-comment">//读取数据属性值</span><br>            user =properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>            password = properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>            url = properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>            driver = properties.getProperty(<span class="hljs-string">&quot;driver&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e) &#123;<br>            <span class="hljs-comment">//再实际开发者中,我们可以这样处理,把编译异常改成了运行异常,调用者可以选择捕获异常,也可以选择默认处理该异常,比较方便</span><br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//连接数据库,返回Connection</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Connection <span class="hljs-title function_">getConnection</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">return</span> DriverManager.getConnection(url,user,password);<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//关闭连接,如果需要关闭资源就传入对象,否则为空null</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">close</span><span class="hljs-params">(ResultSet set, Statement statement,Connection connection)</span>&#123;<br>                  <span class="hljs-comment">//判断是否为空</span><br>                <span class="hljs-keyword">try</span> &#123;<br>                    <span class="hljs-keyword">if</span> (set != <span class="hljs-literal">null</span>) &#123;<br>                        set.close();<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (statement != <span class="hljs-literal">null</span>) &#123;<br>                        statement.close();<br>                    &#125;<br>                    <span class="hljs-keyword">if</span> (connection != <span class="hljs-literal">null</span>) &#123;<br>                        connection.close();<br>                    &#125;<br>                &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>                    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(e);<br>                &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//实现案例</span><br><span class="hljs-comment">//演示如何使用JDBCUtils工具类,实现dml和select语句</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">JDBCUtils_Use</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//测试</span><br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelect</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        PreparedStatement preparedStatement=<span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from test1&quot;</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtils.getConnection();<br>            preparedStatement = connection.prepareStatement(sql);<br>            set = preparedStatement.executeQuery();<br>            <span class="hljs-comment">//遍历结果</span><br>            <span class="hljs-keyword">while</span> (set.next())&#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> set.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> set.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> set.getInt(<span class="hljs-string">&quot;age&quot;</span>);<br>                System.out.println(id+<span class="hljs-string">&quot;\t&quot;</span>+name+<span class="hljs-string">&quot;\t&quot;</span>+age);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtils.close(set,preparedStatement,connection);<br>        &#125;<br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDML</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//1.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>        <span class="hljs-comment">//2.组织一个sql语句</span><br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update test1 set name = ? where id = ?&quot;</span>;<br>        <span class="hljs-comment">//3.创建一个prepareStatement对象</span><br>        <span class="hljs-keyword">try</span> &#123;<br>            preparedStatement = connection.prepareStatement(sql);<br>            <span class="hljs-comment">//给占位符</span><br>            preparedStatement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;强子&quot;</span>);<br>            preparedStatement.setInt(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>);<br>            <span class="hljs-comment">//执行</span><br>            preparedStatement.executeUpdate();<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭资源</span><br>            JDBCUtils.close(<span class="hljs-literal">null</span>,preparedStatement,connection);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-事务"><a href="#7-事务" class="headerlink" title="7.事务"></a>7.事务</h2><p>1.JDBC程序中当一个Connection对象创建时,默认下是自动提交事务:每次执行一个SQL语句时,如果执行成功,就会向数据库自动提交,而不能回滚<br>2.JDBC程序中为了让多个SQL语句作为一个整体执行,需要使用事务<br>3.调用Connection的setAutoCommit(false)可以取消自动提交事务<br>4.再所有的SQL语句都成功执行后,调用Connection的commit();方法提交事务<br>5.通过调用Connection的rollback();方法回滚事务</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//经典案例之转账</span><br><span class="hljs-comment">//JDBC中如何使用事务</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Transaction_</span> &#123;<br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-comment">//没有使用事务</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">noTransaction</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-comment">//1.得到链接</span><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;   <span class="hljs-comment">//在默认情况下,connection对象是默认自动提交</span><br>            <span class="hljs-comment">//2.组织一个sql</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set balance = balance -100 where id = 1&quot;</span>;<br>            String sql2= <span class="hljs-string">&quot;update account set balance = balance +100 where id = 2&quot;</span>;<br>            <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-comment">//得到连接</span><br>                connection = JDBCUtils.getConnection();<br>                preparedStatement = connection.prepareStatement(sql1);<br>                <span class="hljs-comment">//执行</span><br>                preparedStatement.executeUpdate();<br>                <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>/<span class="hljs-number">0</span>;<span class="hljs-comment">//抛出异常</span><br>                preparedStatement = connection.prepareStatement(sql2);<br>                <span class="hljs-comment">//执行</span><br>                preparedStatement.executeUpdate();<br>            &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>                e.printStackTrace();<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                JDBCUtils.close(<span class="hljs-literal">null</span>,preparedStatement,connection);<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">//使用事务来解决问题</span><br>        <span class="hljs-meta">@Test</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">useTransaction</span><span class="hljs-params">()</span>&#123;<br>            <span class="hljs-comment">//1.得到链接</span><br>            <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-comment">//2.组织SQL文件</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">sql1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update account set balance = balance -100 where id = 1&quot;</span>;<br>            String sql2= <span class="hljs-string">&quot;update account set balance = balance +100 where id = 2&quot;</span>;<br>            <span class="hljs-comment">//3.创建preparedStatement对象</span><br>            <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>            <span class="hljs-keyword">try</span>&#123;<br>                connection = JDBCUtils.getConnection();<span class="hljs-comment">//在默认情况下,connection是默认自动提交</span><br>                <span class="hljs-comment">//将 connection 设置为不自动提交</span><br>                connection.setAutoCommit(<span class="hljs-literal">false</span>);  <span class="hljs-comment">//开启事务</span><br>                preparedStatement = connection.prepareStatement(sql1);<br>                preparedStatement.executeUpdate();  <span class="hljs-comment">//执行sql1</span><br><br>                <span class="hljs-comment">//int i = 1/0;//抛出异常</span><br>                preparedStatement = connection.prepareStatement(sql2);<br>                preparedStatement.executeUpdate();  <span class="hljs-comment">//执行sql2</span><br><br><br>                <span class="hljs-comment">//这里提交事务</span><br>                connection.commit();<br>            &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>                <span class="hljs-comment">//这里我们可以进行回滚,即撤销执行的SQL</span><br>                <span class="hljs-comment">//connection.rollback();默认回滚到事务开始状态</span><br>                System.out.println(<span class="hljs-string">&quot;执行发生了异常,撤销执行的sql&quot;</span>);<br>                <span class="hljs-keyword">try</span> &#123;<br>                    connection.rollback();<br>                &#125;<span class="hljs-keyword">catch</span> (SQLException throwables)&#123;<br>                    throwables.printStackTrace();<br>                &#125;<br>                e.printStackTrace();<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">//关闭资源</span><br>                JDBCUtils.close(<span class="hljs-literal">null</span>,preparedStatement,connection);<br>            &#125;<br>        &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-批处理"><a href="#8-批处理" class="headerlink" title="8.批处理"></a>8.批处理</h2><p>1.当需要成批插入或者更新记录时,可以采用java的批量更新机制,这一机制允许多条语句一次性提交给数据库批量处理,通常情况下比单独提交处理更有效率<br>2.JDBC的批量处理语句包括下面方法:<br>2.1addBatch():添加需要批量处理的SQL语句或参数<br>2.2executeBatch():执行批量处理语句<br>2.3clearBatch();清空批处理包的语句<br>3.JDBC连接MySQL时,如果要使用批处理功能,请再url中添加参数?rewriteBatchedStatements&#x3D;true;<br>4.批处理往往和PreparedStatement一起搭配使用,既可以减少编译次数,又减少运行次数,效率大大提高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//演示java的批处理</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Batch_</span> &#123;<br><br><br>    <span class="hljs-comment">//传统方法添加500条数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">noBatch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into admin2 values(null,?,?)&quot;</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">500</span>;i++)&#123;<br>            preparedStatement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;jack&quot;</span>+i);<br>            preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;666&quot;</span>);<br>            preparedStatement.executeUpdate();<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;耗时&quot;</span>+(end-start));<br>        <span class="hljs-comment">//关闭连接</span><br>        JDBCUtils.close(<span class="hljs-literal">null</span>,preparedStatement,connection);<br><br>    &#125;<br>    <span class="hljs-comment">//使用批量方式添加数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">batch</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span>  Exception&#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtils.getConnection();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into admin2 values(null,?,?)&quot;</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> connection.prepareStatement(sql);<br>        <span class="hljs-type">long</span> <span class="hljs-variable">start</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">500</span>;i++)&#123;<br>            preparedStatement.setString(<span class="hljs-number">1</span>,<span class="hljs-string">&quot;jack&quot;</span>+i);<br>            preparedStatement.setString(<span class="hljs-number">2</span>,<span class="hljs-string">&quot;666&quot;</span>);<br>            <span class="hljs-comment">//将sql语句加入到批处理包中 -&gt;</span><br>            preparedStatement.addBatch();<br>            <span class="hljs-comment">//当有400条记录时,再批量执行</span><br>            <span class="hljs-keyword">if</span>((i+<span class="hljs-number">1</span>)%<span class="hljs-number">100</span> ==<span class="hljs-number">0</span>)&#123;<br>                preparedStatement.executeBatch();<br>                <span class="hljs-comment">//清空一把</span><br>                preparedStatement.clearBatch();<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">end</span> <span class="hljs-operator">=</span> System.currentTimeMillis();<br>        System.out.println(<span class="hljs-string">&quot;批量方式耗时&quot;</span>+(end-start));<br>        <span class="hljs-comment">//关闭连接</span><br>        JDBCUtils.close(<span class="hljs-literal">null</span>,preparedStatement,connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-数据库连接池"><a href="#9-数据库连接池" class="headerlink" title="9.数据库连接池"></a>9.数据库连接池</h2><p>1.传统的JDBC数据库连接使用DriverManager来获取,每次获取连接的时候都要将Connection加载到内存,在验证,频繁的连接数据库会占用很多系统资源,容易造成崩溃<br>2.每一次数据库连接,使用完后都得断开,如果程序出现异常而未能关闭,将导致数据库内存泄漏<br>3.传统的连接方式不能控制创建连接的数量<br>4.解决可以使用数据库连接池技术(connection pool)<br>5.预先在缓冲池中放入一定数量的连接,当需要建立数据库连接时,只需从”缓冲池”中取出一个,使用完毕后再放回去<br>6.数据库连接池负责分配、管理和释放数据库连接,它允许应用程序重复使用一个现有的数据库连接,而不是重新建立一个<br>7.当出现很多请求连接数据库时,这些请求将被加入到等待队列</p><h3 id="9-1连接池种类"><a href="#9-1连接池种类" class="headerlink" title="9.1连接池种类"></a>9.1连接池种类</h3><p>1.JDBC的数据库连接池使用javax.sql.DataSource来表示,DataSource只是一个接口,该接口通常由第三方提供实现<br>2.C3P0数据库连接池,速度相对较慢,稳定性不错(hibernate,spring)<br>3.DBCP数据库连接池,速度相对C3p0较快,但不稳定<br>4.Proxool数据库连接池,有监控连接池状态的功能,稳定性较c3p0差一点<br>5.BoneCP数据库连接池,速度快<br>6.Druid(德鲁伊)是阿里提供的数据库连接池,很多优点,推荐用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//C3P0连接实例</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">C3P0_</span> &#123;<br>        <span class="hljs-comment">//方式1:相关参数,在程序中指定user、url、password等</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testC3P0_01</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-comment">//1.创建一个数据源对象</span><br>        <span class="hljs-type">ComboPooledDataSource</span> <span class="hljs-variable">comboPooledDataSource</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ComboPooledDataSource</span>();<br>        <span class="hljs-comment">//2.通过配置文件mysql.properties获取相关的信息</span><br>        <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>        properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\mysql.properties&quot;</span>));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;user&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">password</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;password&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">url</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;url&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">driver</span> <span class="hljs-operator">=</span> properties.getProperty(<span class="hljs-string">&quot;drover&quot;</span>);<br>        <span class="hljs-comment">//给数据源 combo……设置相关参数</span><br>        <span class="hljs-comment">//连接的管理是由combo……来管理的</span><br>        comboPooledDataSource.setDriverClass(driver);<br>        comboPooledDataSource.setJdbcUrl(url);<br>        comboPooledDataSource.setUser(user);<br>        comboPooledDataSource.setPassword(password);<br><br>        <span class="hljs-comment">//设置初始化连接数</span><br>        comboPooledDataSource.setInitialPoolSize(<span class="hljs-number">10</span>);<br>        <span class="hljs-comment">//设置最大连接数</span><br>        comboPooledDataSource.setMaxPoolSize(<span class="hljs-number">50</span>);<br>        <span class="hljs-comment">//这个方法就是从datasource接口实现的</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> comboPooledDataSource.getConnection();<br>        System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="10-德鲁伊连接池"><a href="#10-德鲁伊连接池" class="headerlink" title="10.德鲁伊连接池"></a>10.德鲁伊连接池</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs routeros">配置文件<br><span class="hljs-attribute">key</span>=vlaue<br><span class="hljs-attribute">driverClassName</span>=com.mysql.jdbc.Driver<br><span class="hljs-attribute">url</span>=jdbc:mysql://127.0.0.1:3306/haozi?rewriteBatchedStatements=true<br><span class="hljs-attribute">username</span>=root<br><span class="hljs-attribute">password</span>=5399joker<br><span class="hljs-attribute">initialSize</span>=10<br><span class="hljs-attribute">minIdle</span>=5<br><span class="hljs-attribute">maxActive</span>=50<br><span class="hljs-attribute">maxWait</span>=5000<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDruid</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>    <span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>    properties.load(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;src\\Druid-config.perproties&quot;</span>));<br>    <span class="hljs-type">DataSource</span> <span class="hljs-variable">dataSource</span> <span class="hljs-operator">=</span> DruidDataSourceFactory.createDataSource(properties);<br>    <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> dataSource.getConnection();<br>    System.out.println(<span class="hljs-string">&quot;连接成功&quot;</span>);<br>    connection.close();<br><br><br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight aspectj"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs aspectj">配置文件<br><span class="hljs-comment">//基于druid数据库连接池的工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">JDBCUtilsByDruid</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> DataSource ds;<br>    <span class="hljs-comment">//在静态代码块完成ds初始化</span><br>    <span class="hljs-keyword">static</span> &#123;<br>        Properties properties = <span class="hljs-keyword">new</span> Properties();<br>        <span class="hljs-keyword">try</span>&#123;<br>            properties.load(<span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">&quot;src\\Druid-config.perproties&quot;</span>));<br>            ds = DruidDataSourceFactory.createDataSource(properties);<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            e.printStackTrace();<br>        &#125;<br><br>    &#125;<br>    <span class="hljs-comment">//编写getConnection方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function">Connection <span class="hljs-title">getConnection</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException </span>&#123;<br>        <span class="hljs-function"><span class="hljs-keyword">return</span> ds.<span class="hljs-title">getConnection</span><span class="hljs-params">()</span></span>;<br>    &#125;<br>    <span class="hljs-comment">//关闭连接</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">close</span><span class="hljs-params">(ResultSet resultSet, Statement statement,Connection connection)</span></span>&#123;<br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-keyword">if</span> (resultSet!=<span class="hljs-keyword">null</span>)&#123;<br>                resultSet.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (statement!=<span class="hljs-keyword">null</span>)&#123;<br>                statement.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (connection!=<span class="hljs-keyword">null</span>)&#123;<br>                connection.close();<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (SQLException e)&#123;<br>            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> RuntimeException(e);<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//德鲁伊工具类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelect</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from test1 where id = ?&quot;</span>;<br>        <span class="hljs-type">PreparedStatement</span> <span class="hljs-variable">preparedStatement</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">ResultSet</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            connection = JDBCUtilsByDruid.getConnection();<br>            preparedStatement = connection.prepareStatement(sql);<br>            preparedStatement.setInt(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>);<br>            set = preparedStatement.executeQuery();<br>            <span class="hljs-keyword">while</span> (set.next()) &#123;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">id</span> <span class="hljs-operator">=</span> set.getInt(<span class="hljs-string">&quot;id&quot;</span>);<br>                <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> set.getString(<span class="hljs-string">&quot;name&quot;</span>);<br>                <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> set.getInt(<span class="hljs-string">&quot;age&quot;</span>);<br>                System.out.println(id + <span class="hljs-string">&quot;\t&quot;</span> + name + <span class="hljs-string">&quot;\t&quot;</span> + age);<br>            &#125;<br>            &#125;<span class="hljs-keyword">catch</span>(SQLException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            JDBCUtilsByDruid.close(set,preparedStatement,connection);<br>        &#125;<br>    &#125;<br></code></pre></td></tr></table></figure><h2 id="11-DBUtils"><a href="#11-DBUtils" class="headerlink" title="11.DBUtils"></a>11.DBUtils</h2><p>1.是Apache组织提供的一个开源JDBC工具类<br>2.DbUtils类<br>2.1 QueryRunner类:该类封装了SQL的执行,是线程安全的,可以实现增、删、改、查、批处理<br>2.2使用QueryRunner类实现查询<br>2.3ResultSetHandler接口:该接口用于处理java.sql.ResultSet,将数据按要求转换成另一种形式<br><img src="/../../JAVA_TP/4.png" alt="图片"></p><figure class="highlight typescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><code class="hljs typescript"><span class="hljs-title class_">Actor</span>文件<br>package <span class="hljs-variable constant_">JDBC</span>.<span class="hljs-property">datasource</span>;<br><br><br><br><span class="hljs-comment">//Actor对象和test1表的记录对应</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Actor</span> &#123;<br><br>    <span class="hljs-keyword">private</span>  <span class="hljs-title class_">Integer</span> id;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-title class_">String</span> name;<br>    <span class="hljs-keyword">private</span>  <span class="hljs-title class_">Integer</span> age;<br><br>    <span class="hljs-keyword">public</span>  <span class="hljs-title class_">Actor</span>()&#123;<br>        <br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Actor</span>(<span class="hljs-title class_">Integer</span> id,<span class="hljs-title class_">String</span> name,<span class="hljs-title class_">Integer</span> age)&#123;     <span class="hljs-comment">//一定要给一个无参构造器[反射需要]</span><br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Integer</span> <span class="hljs-title function_">getId</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setId</span>(<span class="hljs-params">Integer id</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">id</span> = id;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">getName</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setName</span>(<span class="hljs-params"><span class="hljs-built_in">String</span> name</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">name</span> = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">Integer</span> <span class="hljs-title function_">getAge</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> age;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-built_in">void</span> <span class="hljs-title function_">setAge</span>(<span class="hljs-params">Integer age</span>) &#123;<br>        <span class="hljs-variable language_">this</span>.<span class="hljs-property">age</span> = age;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-title class_">String</span> <span class="hljs-title function_">toString</span>(<span class="hljs-params"></span>) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\nActor&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;id=&quot;</span> + id +<br>                <span class="hljs-string">&quot;, name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//用DBUtils+数据库连接池(德鲁伊)方式,完成对表test1的增删改查</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">DBUtils_USE</span> &#123;<br><br><br>    <span class="hljs-comment">//使用apache-DBUtils工具类+druid(德鲁伊)完成对表的增删改查工作</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQueryMany</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;        <span class="hljs-comment">//返回结果是多行的情况</span><br>            <span class="hljs-comment">//1.得到连接(druid)</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtilsByDruid.getConnection();<br>            <span class="hljs-comment">//2.使用DBUtils类和接口,先引进DBUtils相关的jar,加入到本项目</span><br>            <span class="hljs-comment">//3.创建QueryRunner</span><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br>        <span class="hljs-comment">//4.就可以执行相关的方法,返回ArrayList结果集</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from test1 where id &gt;= ?&quot;</span>;<br>        <span class="hljs-comment">/*</span><br><span class="hljs-comment">        * queryRunner,执行查询,得到resultset ------&gt;封装到------&gt;ArrayList 集合中</span><br><span class="hljs-comment">        * 返回集合</span><br><span class="hljs-comment">        * connection:连接</span><br><span class="hljs-comment">        * sql:执行的sql语句</span><br><span class="hljs-comment">        * new BeanListHandler&lt;&gt;(Actor.class):在将resultset --&gt; 取出到actor对象,然后封装到ArrayList中</span><br><span class="hljs-comment">        * 1:就是给sql语句中的?赋值,可以有多个,因为是可变参数</span><br><span class="hljs-comment">        * */</span><br>        List&lt;Actor&gt; list =<br>               queryRunner.query(connection,sql,<span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanListHandler</span>&lt;&gt;(Actor.class),<span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (Actor actor:list)&#123;<br>            System.out.println(actor);<br>        &#125;<br><br>        <span class="hljs-comment">//释放资源</span><br>        JDBCUtilsByDruid.close(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,connection);<br><br>    &#125;<br>    <span class="hljs-comment">//返回单行数据</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testQuerySingle</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        System.out.println(<span class="hljs-string">&quot;使用druid方式完成&quot;</span>);<br>        <span class="hljs-comment">//1.得到连接</span><br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtilsByDruid.getConnection();<br>        <span class="hljs-comment">//2.使用DBUtils类和接口,先引入DBUtils相关的jar,加入到本地项目</span><br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select * from test1 where id = ?&quot;</span>;<br><br>        <span class="hljs-type">Actor</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> queryRunner.query(connection, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">BeanHandler</span>&lt;&gt;(Actor.class), <span class="hljs-number">1</span>);<br>        System.out.println(query);<br><br><br>        JDBCUtilsByDruid.close(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,connection);<br>    &#125;<br><br><br>    <span class="hljs-comment">//演示apache-dbutils + druid完成查询结果是单行单列-返回的就是object</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">Scalar</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtilsByDruid.getConnection();<br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;select name from test1 where id = ?&quot;</span>;<br><br>        <span class="hljs-type">Object</span> <span class="hljs-variable">query</span> <span class="hljs-operator">=</span> queryRunner.query(connection, sql, <span class="hljs-keyword">new</span> <span class="hljs-title class_">ScalarHandler</span>(), <span class="hljs-number">1</span>);<br>        System.out.println(query);<br><br>        JDBCUtilsByDruid.close(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,connection);<br>    &#125;<br><br>    <span class="hljs-comment">//实现增删改查</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testDML</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> SQLException &#123;<br>        <span class="hljs-type">Connection</span> <span class="hljs-variable">connection</span> <span class="hljs-operator">=</span> JDBCUtilsByDruid.getConnection();<br>        <span class="hljs-type">QueryRunner</span> <span class="hljs-variable">queryRunner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryRunner</span>();<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;update test1 set name = ? where id = ?&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;insert into test1 values(null,?,?)&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">sql3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;delete from test1 where id = ?&quot;</span>;<br><br>        <span class="hljs-comment">//queryRunner.update:更新数据,返回值为改动的行数</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">affectedRow</span> <span class="hljs-operator">=</span> queryRunner.update(connection,sql3, <span class="hljs-number">3</span>);<br>        System.out.println(affectedRow);<br><br>        JDBCUtilsByDruid.close(<span class="hljs-literal">null</span>,<span class="hljs-literal">null</span>,connection);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-BasicDao"><a href="#12-BasicDao" class="headerlink" title="12.BasicDao"></a>12.BasicDao</h2><p>1.apache-dbutils+Druid简化了JDBC开发,但还有不足<br>1.1SQL语句是固定的,不能通过参数传入,通用性不好<br>1.2对于select操作,如果有返回值,返回类型不能固定,需要使用泛型<br>1.3将来的表很多,业务需求复杂,不可能只靠一个java类完成<br><img src="/../../JAVA_TP/5.png" alt="图片"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//代码在本地src//Dao_包下</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>13.文件流</title>
    <link href="/2023/03/18/java/13.%E6%96%87%E4%BB%B6%E6%B5%81/"/>
    <url>/2023/03/18/java/13.%E6%96%87%E4%BB%B6%E6%B5%81/</url>
    
    <content type="html"><![CDATA[<h1 id="I-x2F-O流"><a href="#I-x2F-O流" class="headerlink" title="I&#x2F;O流"></a>I&#x2F;O流</h1><span id="more"></span><h2 id="1-常用的文件操作"><a href="#1-常用的文件操作" class="headerlink" title="1.常用的文件操作"></a>1.常用的文件操作</h2><p>new File(String pathname)  &#x2F;&#x2F;根据路径构建一个File对象<br>new File(File parent,String child)  &#x2F;&#x2F;根据父目录文件+子路径构建<br>new File(String parent,String child)  &#x2F;&#x2F;根据父目录+子路径构建</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> 文件流;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">//演示创建文件</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCreate</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">//方式1:new File(String pathname)  //根据路径构建一个File对象</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create01</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\text.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filePath);<br><br>        <span class="hljs-keyword">try</span> &#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;文件创建成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//方式2:new File(File parent,String child)  根据父目录文件+子路径构建</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">parentFile</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filename</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;text2.txt&quot;</span>;<br>        <span class="hljs-comment">//file只是一个对象,只有执行了createNewFile方法,才真正的创建了文件</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentFile,filename);<br>        <span class="hljs-keyword">try</span>&#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//方式3:new File(String parent,String child)//根据父目录+子路径构建</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">create03</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">parentPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;text3.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(parentPath, filepath);<br>        <span class="hljs-keyword">try</span>&#123;<br>            file.createNewFile();<br>            System.out.println(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-常用的获取文件的相关信息"><a href="#2-常用的获取文件的相关信息" class="headerlink" title="2.常用的获取文件的相关信息"></a>2.常用的获取文件的相关信息</h2><p>1.getName    &#x2F;&#x2F;获取文件名字<br>2.getAbsolutePath       &#x2F;&#x2F;获取文件的绝对路径<br>3.getParent &#x2F;&#x2F;获取文件的父级目录<br>4.length    &#x2F;&#x2F;文件大小<br>5.exists    &#x2F;&#x2F;是否存在这个文件<br>6.isFile    &#x2F;&#x2F;是不是一个文件<br>7.isDirectory   &#x2F;&#x2F;是不是一个目录</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Fileinformation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><br>    &#125;<br>    <span class="hljs-comment">//获取文件的信息</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">info</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//先创建文件对象</span><br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(<span class="hljs-string">&quot;D:\\text1.txt&quot;</span>);<br><br>        <span class="hljs-comment">//调用相应的方法的到对应信息即可</span><br>        System.out.println(<span class="hljs-string">&quot;文件名字:&quot;</span>+file.getName());<br>        System.out.println(<span class="hljs-string">&quot;文件绝对路径:&quot;</span>+file.getAbsolutePath());<br>        System.out.println(<span class="hljs-string">&quot;文件的父级目录:&quot;</span>+file.getParent());<br>        System.out.println(<span class="hljs-string">&quot;文件大小:&quot;</span>+file.length());<br>        System.out.println(<span class="hljs-string">&quot;是否存在这个文件:&quot;</span>+file.exists());<br>        System.out.println(<span class="hljs-string">&quot;是不是一个文件:&quot;</span>+file.isFile());<br>        System.out.println(<span class="hljs-string">&quot;是不是一个目录&quot;</span>+file.isDirectory());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-常用的目录操作和文件删除"><a href="#3-常用的目录操作和文件删除" class="headerlink" title="3.常用的目录操作和文件删除"></a>3.常用的目录操作和文件删除</h2><p>1.mkdir &#x2F;&#x2F;创建一级目录<br>2.mkdirs  &#x2F;&#x2F;创建多级目录<br>3.delete    &#x2F;&#x2F;删除空目录或文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.io.File;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Directory_</span> &#123;<br>    <span class="hljs-keyword">public</span>  <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[]args)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-comment">//判断d盘有没有text1,如果存在就删除</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\text1.txt&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filepath);<br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<br>            <span class="hljs-keyword">if</span> (file.delete())&#123;<br>                System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;该文件不存在&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//在java中目录也被当作文件处理</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\text2&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(filepath);<br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<br>            <span class="hljs-keyword">if</span> (file.delete())&#123;<br>                System.out.println(<span class="hljs-string">&quot;删除成功&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;删除失败&quot;</span>);<br>            &#125;<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            System.out.println(<span class="hljs-string">&quot;该目录不存在&quot;</span>);<br>        &#125;<br>    &#125;<br>    <span class="hljs-comment">//判断D:\\demo\\a\\b\\c目录是否存在,存在就显示存在,否则就被创建</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m3</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">directoryPath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\demo\\a\\b\\c&quot;</span>;<br>        <span class="hljs-type">File</span> <span class="hljs-variable">file</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">File</span>(directoryPath);<br>        <span class="hljs-keyword">if</span>(file.exists())&#123;<br>           System.out.println(<span class="hljs-string">&quot;该目录已经存在&quot;</span>);<br>        &#125;<span class="hljs-keyword">else</span>&#123;<br>            <span class="hljs-keyword">if</span> (file.mkdirs())&#123;<br>                System.out.println(<span class="hljs-string">&quot;创建成功&quot;</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;创建失败&quot;</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-流的分类"><a href="#4-流的分类" class="headerlink" title="4.流的分类"></a>4.流的分类</h2><p>1.按操作数据单位不同分为:字节流(二进制文件)、字符流(文本文件)<br>2.按数据流的流向不同分为:输入流、输出流<br>3.按流的角色的不同分为:节点流、处理流&#x2F;包装流</p><table><thead><tr><th align="center">(抽象基类)</th><th align="center">字节流</th><th align="center">字符流</th></tr></thead><tbody><tr><td align="center">输入流</td><td align="center">inputStream</td><td align="center">Reader</td></tr><tr><td align="center">输出流</td><td align="center">OutputStream</td><td align="center">Writer</td></tr></tbody></table><h2 id="5-InputStream字节流常用子类"><a href="#5-InputStream字节流常用子类" class="headerlink" title="5.InputStream字节流常用子类"></a>5.InputStream字节流常用子类</h2><p>1.FileInputStream   &#x2F;&#x2F;文件输入流<br>2.BufferedInputStream   &#x2F;&#x2F;缓冲字节输入流<br>3.ObjectInputStream &#x2F;&#x2F;对象字节输入流</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//FileInputStream读取文件的两种方法</span><br><span class="hljs-keyword">import</span> org.junit.Test;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-comment">//演示FileInputStream用法(字节输入流  文件---&gt;程序)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileInputStream_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//单个字节的读取,效率低</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile01</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\hello.txt&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readdata</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建了FileInputStream对象,用于读取文件</span><br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br>            <span class="hljs-comment">//从该输入流读取一个字节的数据,如果没有输入可用,此方法将阻止,返回-1表示数据读取完毕</span><br>            <span class="hljs-keyword">while</span>((readdata = fileInputStream.read()) != -<span class="hljs-number">1</span>)&#123;<br>                    System.out.print((<span class="hljs-type">char</span>)readdata);<br>            &#125;<br><br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">//关闭文件流,释放资源</span><br>            <span class="hljs-keyword">try</span>&#123;<br>                fileInputStream.close();<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>               e.printStackTrace();<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//使用read(byte[] b) 读取文件</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">readFile02</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\hello.txt&quot;</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readdata</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//字节数组</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">8</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readlen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//创建了FileInputStream对象,用于读取文件</span><br>            fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath);<br>            <span class="hljs-comment">//从该输入流读取最多b.length字节的数据到数组,此方法将阻塞,直到某些输入可用</span><br>            <span class="hljs-comment">//如果返回-1,就读取正常,并返回实际读取的字节数</span><br>            <span class="hljs-keyword">while</span>((readlen=fileInputStream.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>                System.out.print(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(buf,<span class="hljs-number">0</span>,readlen));<br>            &#125;<br><br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-comment">//关闭文件流,释放资源</span><br>            <span class="hljs-keyword">try</span>&#123;<br>                fileInputStream.close();<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-OutputStream字节输出流"><a href="#6-OutputStream字节输出流" class="headerlink" title="6.OutputStream字节输出流"></a>6.OutputStream字节输出流</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//演示用法FileOutputStream在a.txt文件中写入&quot;hello world&quot;,如果文件不存在,就创建文件</span><br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileOutputStream01</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-comment">//演示FileOutStream用法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">writeFile</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\a.txt&quot;</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//得到了FileOutStream对象</span><br>            <span class="hljs-comment">//1.new FileOutputStream(filepath); 创建方式会覆盖原有内容</span><br>            <span class="hljs-comment">//2.new FileOutputStream(filepath,true); 创建方式不会会覆盖原有内容,追加到后面</span><br>            fileOutputStream=<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filepath);<br>            <span class="hljs-comment">//写入一个字节</span><br>            <span class="hljs-comment">//fileOutputStream.write(&#x27;a&#x27;);</span><br>            <span class="hljs-comment">//写入字符串</span><br>            <span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello world&quot;</span>;<br><span class="hljs-comment">//            fileOutputStream.write(str.getBytes());</span><br>            <span class="hljs-comment">//write(byte[] b,int off,int len)将len字节从位于偏移量off的指定字节数组写入此文件流</span><br>            fileOutputStream.write(str.getBytes(),<span class="hljs-number">0</span>,str.length());<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                fileOutputStream.close();<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>综合案例:拷贝文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileCopy</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-comment">//完成拷贝将F:\\桌面壁纸\\壁纸11.png拷贝到c:\\</span><br>        <span class="hljs-comment">//1.创建文件的输入流,将文件读入到程序</span><br>        <span class="hljs-comment">//2.创建文件的输出流,将文件拷贝到指定路径</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;F:\\桌面壁纸\\壁纸11.png&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">C</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;E:\\壁纸11.png&quot;</span>;<br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fileInputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">FileOutputStream</span> <span class="hljs-variable">fileOutputStream</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>    <span class="hljs-keyword">try</span> &#123;<br>        fileInputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filepath);<br>        fileOutputStream = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(C);<br>        <span class="hljs-comment">//定义一个字节数组,提高读取效率</span><br>        <span class="hljs-type">byte</span>[] buf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>        <span class="hljs-type">int</span> <span class="hljs-variable">readlen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> ((readlen=fileInputStream.read(buf)) != -<span class="hljs-number">1</span>)&#123;<br>            <span class="hljs-comment">//读取到后,就写入到文件,通过fileOutputStream</span><br>            <span class="hljs-comment">//即一边读,一边写</span><br>            fileOutputStream.write(buf,<span class="hljs-number">0</span>, readlen);<br>        &#125;<br>        System.out.println(<span class="hljs-string">&quot;拷贝ok&quot;</span>);<br>    &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>        e.printStackTrace();<br>    &#125;<span class="hljs-keyword">finally</span> &#123;<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-comment">//关闭输入输出流,释放资源</span><br>            <span class="hljs-keyword">if</span> (fileInputStream!=<span class="hljs-literal">null</span>)&#123;<br>                fileInputStream.close();<br>            &#125;<br>            <span class="hljs-keyword">if</span> (fileOutputStream!=<span class="hljs-literal">null</span>)&#123;<br>                fileOutputStream.close();<br>            &#125;<br>    &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-FileReader和FileWriter介绍"><a href="#7-FileReader和FileWriter介绍" class="headerlink" title="7.FileReader和FileWriter介绍"></a>7.FileReader和FileWriter介绍</h2><p>1.FileReader和FileWriter是字符流,即按照字符来操作io</p><h3 id="7-1FileReader相关方法"><a href="#7-1FileReader相关方法" class="headerlink" title="7.1FileReader相关方法"></a>7.1FileReader相关方法</h3><p>1.new FileReader(File&#x2F;String)<br>2.read:每次读取单个字符,返回该字符,如果到文件末尾就返回-1;<br>3.read(char[]):批量读取多个字符到数组,返回读取到的字符数,如果到文件末尾就返回-1;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用FileReader从hello.txt读取内容</span><br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileReader_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>            <span class="hljs-comment">//先创建一个FileReader对象</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\hello.txt&quot;</span>;<br>        <span class="hljs-type">FileReader</span> <span class="hljs-variable">fileReader</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">int</span>  <span class="hljs-variable">data</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span> ;<br>        <span class="hljs-keyword">try</span>&#123;<br>            fileReader = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath);<br>            <span class="hljs-comment">//循环读取</span><br>            <span class="hljs-keyword">while</span>((data = fileReader.read())!=-<span class="hljs-number">1</span>)&#123;<br>                System.out.print((<span class="hljs-type">char</span>)data);<br>            &#125;<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">if</span>(filePath!=<span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-keyword">try</span>&#123;<br>                    fileReader.close();<br>                &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                    e.printStackTrace();<br>                &#125;<br>            &#125;<br>        &#125;<br><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="7-2FileWriter相关方法"><a href="#7-2FileWriter相关方法" class="headerlink" title="7.2FileWriter相关方法"></a>7.2FileWriter相关方法</h3><p>1.new FileWriter(File&#x2F;String):覆盖模式<br>2.new FileWriter(File&#x2F;String,true):追加模式<br>3.write(int):写入单个字符<br>4.write(char[]):写入指定数组<br>5.write(char[],off,len):写入数组的指定部分<br>6.write(String):写入整个字符串<br>7.write(String,off,len):写入字符串的指定部分<br>8.String类:toCharArray:将String转换成char[]<br>9.FileWriter使用后,必须要关闭(close)或刷新(flush)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将haozi0o0写入hello.txt文件中</span><br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">FileWriter_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\hello.txt&quot;</span>;<br>        <span class="hljs-type">FileWriter</span> <span class="hljs-variable">fileWriter</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fileWriter = <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filepath);<br>            fileWriter.write(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;haozi0o0&quot;</span>));<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                fileWriter.close();<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="8-节点流和处理流"><a href="#8-节点流和处理流" class="headerlink" title="8.节点流和处理流"></a>8.节点流和处理流</h2><p>1.结点流是(从一个特定的数据源读取数据)文件和程序之间交互的,如FileReader、FileWriter<br>2.处理流也叫包装流,是连接在已存在的流(节点流或处理流)之上,为程序提供更强大的读写功能,如BufferredReader、BufferedWriter</p><h2 id="9-节点流和处理流的区别"><a href="#9-节点流和处理流的区别" class="headerlink" title="9.节点流和处理流的区别"></a>9.节点流和处理流的区别</h2><p>1.节点流是底层流,直接跟数据源相接<br>2.处理流包装节点流,既可以消除不同节点流的实现差异,也可以提供更方便的方法来完成输入输出<br>3.处理流(也叫包装流)对节点流进行包装,使用了修饰器设计模式,不会直接与数据源相连<br>4.处理流的功能主要体现在以下两个方面<br>4.1性能的提高:主要以增加缓冲的方式来提高输入输出效率<br>4.2操作的便捷:处理流可能提供了一系列边界的方法来一次输入输出大批量的数据,使用更加灵活方便</p><h2 id="10-处理流-BufferedReader和BufferedWriter"><a href="#10-处理流-BufferedReader和BufferedWriter" class="headerlink" title="10.处理流-BufferedReader和BufferedWriter"></a>10.处理流-BufferedReader和BufferedWriter</h2><p>1.BufferedReader和BufferedWriter属于字符流,是按照字符来读取数据的,关闭时,只需要关闭外层流即可</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用BufferedReader读取文本文件,并显示在控制台</span><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileNotFoundException;<br><span class="hljs-keyword">import</span> java.io.FileReader;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedReader_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\hello.txt&quot;</span>;<br>        <span class="hljs-comment">//创建bufferedReader</span><br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">bufferedReader</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(filePath));<br>        <span class="hljs-comment">//读取</span><br>        String line;  <span class="hljs-comment">//按行读取,效率高</span><br>        <span class="hljs-comment">//1.bufferedReader.readLine()是按行读取文件</span><br>        <span class="hljs-comment">//2.当返回null时,表示文件读取完毕</span><br>        <span class="hljs-keyword">while</span> ((line = bufferedReader.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>            System.out.print(line);<br>        &#125;<br>            <span class="hljs-comment">//关闭流,只需要关闭bufferedReader,因为低等会自动关闭节点流</span><br>            bufferedReader.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.BufferedWrite</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将hello world写入文件hello.txt里</span><br><span class="hljs-keyword">import</span> java.io.BufferedWriter;<br><span class="hljs-keyword">import</span> java.io.FileWriter;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedWrite_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\hello.txt&quot;</span>;<br>    <span class="hljs-comment">//new FileWriter(filePath,true)  表示追加输入</span><br>    <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bufferedWriter</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(filePath,<span class="hljs-literal">true</span>));<br>    bufferedWriter.write(<span class="hljs-string">&quot;hello1 world&quot;</span>);<br>    bufferedWriter.newLine();   <span class="hljs-comment">//插入换行</span><br>    bufferedWriter.write(<span class="hljs-string">&quot;hello2 world&quot;</span>);<br>        bufferedWriter.newLine();   <span class="hljs-comment">//插入换行</span><br>    bufferedWriter.write(<span class="hljs-string">&quot;hello3 world&quot;</span>);<br>    bufferedWriter.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.实现文件拷贝,Reader和Writer结合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-comment">//不要去操作二进制文件,常见的二进制文件有[声音、视频、doc、pdf等]</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedCopy_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\hello.txt&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\hello2.txt&quot;</span>;<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedWriter</span> <span class="hljs-variable">bw</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        String line;<br>        <span class="hljs-keyword">try</span> &#123;<br>            br = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileReader</span>(s1));<br>            bw = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileWriter</span>(s2));<br>            <span class="hljs-comment">//readLine 是读取一行内容,没有换行</span><br>            <span class="hljs-keyword">while</span> ((line = br.readLine()) != <span class="hljs-literal">null</span>)&#123;<br>                <span class="hljs-comment">//每读取一行就写入</span><br>                bw.write(line);<br>                <span class="hljs-comment">//插入一个换行</span><br>                bw.newLine();<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;拷贝完成&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span>&#123;<br>                <span class="hljs-keyword">if</span> (br!=<span class="hljs-literal">null</span>)&#123;<br>                    br.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span>(bw!=<span class="hljs-literal">null</span>)&#123;<br>                    bw.close();<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br><br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11-处理流BufferedInputStream和BufferedOutputStream"><a href="#11-处理流BufferedInputStream和BufferedOutputStream" class="headerlink" title="11.处理流BufferedInputStream和BufferedOutputStream"></a>11.处理流BufferedInputStream和BufferedOutputStream</h2><p>1.BufferedInputStream、BufferedOutputStream,可以处理二进制文件,它们是字节流,字节流也可以操作二进制文件,例如文本文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//拷贝文件C:\Users\haozi\开箱子.mp4</span><br><span class="hljs-keyword">import</span> java.io.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">BufferedCopy_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">yuan</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;C:\\Users\\haozi\\开箱子.mp4&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">mudi</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\开箱子.mp4&quot;</span>;<br>        <span class="hljs-type">BufferedInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-type">BufferedOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br>        <span class="hljs-keyword">try</span> &#123;<br>            bis = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(yuan));<br>            bos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(mudi));<br>            <span class="hljs-comment">//循环的读取文件,并写入到目的目录</span><br>            <span class="hljs-type">byte</span>[] buff = <span class="hljs-keyword">new</span> <span class="hljs-title class_">byte</span>[<span class="hljs-number">1024</span>];<br>            <span class="hljs-type">int</span> <span class="hljs-variable">readLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> ((readLen = bis.read(buff))!=-<span class="hljs-number">1</span>)&#123;<br>                bos.write(buff,<span class="hljs-number">0</span>,readLen);<br>            &#125;<br>            System.out.println(<span class="hljs-string">&quot;文件拷贝完成&quot;</span>);<br>        &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>            e.printStackTrace();<br>        &#125;<span class="hljs-keyword">finally</span> &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                <span class="hljs-keyword">if</span> (bis!=<span class="hljs-literal">null</span>)&#123;<br>                    bis.close();<br>                &#125;<br>                <span class="hljs-keyword">if</span> (bos!=<span class="hljs-literal">null</span>)&#123;<br>                    bos.close();<br>                &#125;<br>            &#125;<span class="hljs-keyword">catch</span> (IOException e)&#123;<br>                e.printStackTrace();<br>            &#125;<br>        &#125;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="12-对象处理流"><a href="#12-对象处理流" class="headerlink" title="12.对象处理流"></a>12.对象处理流</h2><p>需求:将int num &#x3D; 100这个int数据保存到文件中,注意不是100数组,而是int 100,并且,能够从文件中直接恢复int 100<br>以上的要求,就是能够将基本数据类型或者对象进行序列化和反序列化操作<br>1.序列化就是在保存数据时,保存数据的值和数据类型<br>2.反序列化就是在恢复数据时,恢复数据的值和数据类型<br>3.需要让某个对象支持序列化机制,则必须让其类是可序列化的,为了让某个类是可序列化,该类必须实现如下两个接口之一:<br>Serializable    &#x2F;&#x2F;这是一个标记接口,如果不实现接口则无法进行序列化<br>Externalizable<br>4.ObjectOutputStream  &#x2F;&#x2F;提供序列化功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用ObjectOutputStream序列化基本数据类型和一个Dog(name,age)对象,并保存到data.dat文件中</span><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.ObjectOutputStream;<br><span class="hljs-keyword">import</span> java.io.Serializable;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectOutStream_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> Exception&#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\data.dat&quot;</span>;<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filePath));<br>        <span class="hljs-comment">//序列化数据到e:\data.dat</span><br>        oos.writeInt(<span class="hljs-number">100</span>); <span class="hljs-comment">//int -&gt; Integer(实现了 Serializable)</span><br>        oos.writeBoolean(<span class="hljs-literal">true</span>); <span class="hljs-comment">//boolean-&gt;Boolean(实现了 Serializable)</span><br>        oos.writeChar(<span class="hljs-string">&#x27;a&#x27;</span>);     <span class="hljs-comment">//char-&gt;Character</span><br>        oos.writeDouble(<span class="hljs-number">9.5</span>);   <span class="hljs-comment">//double-&gt;Double</span><br>        oos.writeUTF(<span class="hljs-string">&quot;haozi&quot;</span>);  <span class="hljs-comment">//String</span><br>        <span class="hljs-comment">//保存一个dog对象</span><br>        oos.writeObject(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;haozi&quot;</span>,<span class="hljs-number">18</span>));<br>        oos.close();<br>        System.out.println(<span class="hljs-string">&quot;数据保存完毕(序列化)&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-comment">//如果需要序列化某个类的对象,实现Serializable</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.age=age;<br>    &#125;<br>     <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;Dog&#123;&quot;</span> +<br>                <span class="hljs-string">&quot;name=&#x27;&quot;</span> + name + <span class="hljs-string">&#x27;\&#x27;&#x27;</span> +<br>                <span class="hljs-string">&quot;, age=&quot;</span> + age +<br>                <span class="hljs-string">&#x27;&#125;&#x27;</span>;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.ObjectInputStream &#x2F;&#x2F;提供反序列化功能</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.ObjectInputStream;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ObjectInputStream_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException,ClassNotFoundException &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><br>        <span class="hljs-type">String</span>  <span class="hljs-variable">filePath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\data.dat&quot;</span>;<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filePath));<br>        <span class="hljs-comment">//读取(反序列化)的顺序一定要和序列化的顺序一样,否则会发生异常</span><br>        System.out.println(ois.readInt());<br>        System.out.println(ois.readBoolean());<br>        System.out.println(ois.readChar());<br>        System.out.println(ois.readDouble());<br>        System.out.println(ois.readUTF());<br>        <span class="hljs-type">Object</span> <span class="hljs-variable">dog</span> <span class="hljs-operator">=</span> ois.readObject();<br>        System.out.println(dog.getClass());<br>        System.out.println(dog);<br>        <span class="hljs-comment">//关闭流</span><br>        ois.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项:<br>1.读写顺序要一致<br>2.要求实现序列化或反序列化对象,需要实现Serializable<br>3.序列化的类中建议添加SerialVersionUID,为了提高版本兼容性<br>private static final long serialVersionUID &#x3D; 1L;<br>4.序列化对象时,默认将里面所有属性都进行序列化,但除了static或transient修饰的成员<br>5.序列化对象时,要求里面属性的类型也需要实现序列化接口<br>6.序列化具备可继承性,也就是如果某类已经实现了序列化,则它的所有子类也已经默认实现了序列化</p><h2 id="13-转换流-InputStreamReader和OutputStreamWriter"><a href="#13-转换流-InputStreamReader和OutputStreamWriter" class="headerlink" title="13.转换流:InputStreamReader和OutputStreamWriter"></a>13.转换流:InputStreamReader和OutputStreamWriter</h2><p>1.InputStreamReader:Reader的子类,可以将InputStream(字节流)包装成Reader(字符流)<br>2.OutputStreamWriter:Writer的子类,实现将OutputStream(字节流)包装成Writer(字符流)<br>3.当处理纯文本数据时,如果使用字符流效率更高,并且可以有效解决中文问题,所以建议将字节流转换成字符流<br>4.可以在使用时指定编码格式(比如utf-8,gbk,gb2312,ISO8859-1等)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将字节流FileInputStream包装成(转换成)字符流InputStreamReader,对文件进行读取(按照utf-8/gbk格式),进而在包装成BufferedReader</span><br><span class="hljs-keyword">import</span> java.io.BufferedReader;<br><span class="hljs-keyword">import</span> java.io.FileInputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.InputStreamReader;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InputStreamReader_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-comment">//这里的a.txt的编码格式为ANSI</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\a.txt&quot;</span>;<br>        <span class="hljs-type">InputStreamReader</span> <span class="hljs-variable">isr</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">InputStreamReader</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(filepath),<span class="hljs-string">&quot;gbk&quot;</span>);<br>        <span class="hljs-type">BufferedReader</span> <span class="hljs-variable">br</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BufferedReader</span>(isr);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> br.readLine();<br>        System.out.println(<span class="hljs-string">&quot;读取内容=&quot;</span>+s);<br>        br.close();<br><br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将字节流FileOutputStream包装成(转换成)字符流OutputStreamWriter,对文件进行写入(按照gbk格式,可以指定其他,比如UTF-8)</span><br><span class="hljs-keyword">import</span> java.io.FileOutputStream;<br><span class="hljs-keyword">import</span> java.io.IOException;<br><span class="hljs-keyword">import</span> java.io.OutputStreamWriter;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OutputStreamWriter_</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">filepath</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;D:\\a.txt&quot;</span>;<br>        <span class="hljs-type">OutputStreamWriter</span> <span class="hljs-variable">isd</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OutputStreamWriter</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">FileOutputStream</span>(filepath),<span class="hljs-string">&quot;UTF-8&quot;</span>);<br>        isd.write(<span class="hljs-string">&quot;hi,my name is 耗子&quot;</span>);<br>        isd.close();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>12.线程基础</title>
    <link href="/2023/03/14/java/12.%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <url>/2023/03/14/java/12.%E7%BA%BF%E7%A8%8B%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="线程基础"><a href="#线程基础" class="headerlink" title="线程基础"></a>线程基础</h1><span id="more"></span><p>1.线程相关概念:<br>程序(program):代码<br>进程:是指运行中的程序,进程是程序的一次执行过程,或是正在运行的一个程序,是动态过程,有自身的产生、存在和消亡的过程,进程在运行时会占用内存空间<br>线程:线程由进程创建的,是进程的一个实体,一个进程可以有多个线程</p><h2 id="1-创建线程的两种方式"><a href="#1-创建线程的两种方式" class="headerlink" title="1.创建线程的两种方式"></a>1.创建线程的两种方式</h2><p>1.继承Thread类,重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.开启线程,每隔1秒在控制台输出&quot;喵喵,我是小猫咪&quot;</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> <span class="hljs-keyword">throws</span> InterruptedException&#123;<br><span class="hljs-comment">//创建cat对象当线程使用</span><br><span class="hljs-type">cat</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">cat</span>();<br>c1.start();<br>        <span class="hljs-comment">//当main线程启动了一个子线程 Thread-0,主线程不会阻塞,会继续执行,这时,主线程和子线程是交替执行……</span><br>        System.out.println(<span class="hljs-string">&quot;主线程继续执行&quot;</span>+Thread.currentThread().getName());<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;<span class="hljs-number">60</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;主线程 i=&quot;</span> + i);<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">//重写run方法,写上自己的业务逻辑</span><br><span class="hljs-type">int</span> <span class="hljs-variable">times</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-comment">//当时出3次时结束</span><br><span class="hljs-keyword">if</span>(times == <span class="hljs-number">3</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;喵喵,我是小猫咪&quot;</span>);<br><span class="hljs-comment">//让该线程休眠一秒</span><br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>e.printStackTrace();<br>&#125;<br>times++;<br><br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.实现Runnable接口,重写run方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*java是单继承的,在某些情况下一个类可能已经继承了某个父类,再用Thread类方法来创建线程显然不可能了</span><br><span class="hljs-comment">java还可以通过实现Runnable接口来创建线程*/</span><br><span class="hljs-comment">//每隔一秒再控制台输出&quot;hi&quot;,每当输出10次后,自动退出,实现Runnable接口</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">dog</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">dog</span>();<br><span class="hljs-comment">//创建了Thread对象,把dog对象(实现了Runnable),放入Thread</span><br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(d1);<br>t1.start();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)<br>&#123;<br>System.out.println(<span class="hljs-string">&quot;小狗叫&quot;</span>+(++count)+ Thread.currentThread().getName());<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">if</span>(count == <span class="hljs-number">10</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//2.创建两个线程</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><span class="hljs-type">t3</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">t3</span>();<br><span class="hljs-type">t4</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">t4</span>();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">th1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">th2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t2);<br>th1.start();<br>th2.start();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">t3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>n++;<br>System.out.println(<span class="hljs-string">&quot;hei&quot;</span>+n);<br><span class="hljs-keyword">if</span>(n ==<span class="hljs-number">10</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">t4</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>n++;<br>System.out.println(<span class="hljs-string">&quot;hello&quot;</span>+n);<br><span class="hljs-keyword">if</span>(n == <span class="hljs-number">10</span>) &#123;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.实现Runnable接口方式更加适合多个线程共享一个资源的情况,也避免了单继承的限制,建议使用Runnable<br>4.线程终止</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.当线程完成任务后,会自动退出</span><br><span class="hljs-comment">//2.还可以通过使用变量来控制run方法退出的方式停止线程,即通知方式</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-type">thread</span> <span class="hljs-variable">th</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">thread</span>();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(th);<br>t1.start();<br>System.out.println(<span class="hljs-string">&quot;main程正在运行&quot;</span>);<br>Thread.sleep(<span class="hljs-number">10</span>*<span class="hljs-number">1000</span>);  <span class="hljs-comment">//让线程休眠50ms</span><br>th.setLoop(<span class="hljs-literal">false</span>);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">thread</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">while</span>(loop) &#123;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">50</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>System.out.println(<span class="hljs-string">&quot;运行中&quot;</span>+(++count));<br>&#125;<br>&#125;<br><span class="hljs-comment">//提供的set方法,方便更新变量loop</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setLoop</span><span class="hljs-params">(<span class="hljs-type">boolean</span> loop)</span> &#123;  <br><span class="hljs-built_in">this</span>.loop=loop;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-线程插队"><a href="#2-线程插队" class="headerlink" title="2.线程插队"></a>2.线程插队</h2><p>t1.join()&#x2F;&#x2F;等待某线程结束，再恢复当前线程的运行<br>t1.yield()  &#x2F;&#x2F;让出CPU资源，当前线程进入就绪状态<br>注意： yield()是让出资源，但并不放弃。它会进入就绪状态，也就是说：它还会与其他线程一起抢占资源，所以yield()的线程，仍然有可能再次抢占资源。在加上线程运行的不确定性，所以会导致上面的结论并不是绝对的，只是出现的概率要高一些。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work5</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> <span class="hljs-keyword">throws</span> InterruptedException &#123;<br><span class="hljs-type">T</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(t);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;hi&quot;</span>+i);<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br><span class="hljs-keyword">if</span>(i==<span class="hljs-number">5</span>) &#123;<br>t1.start();<br>t1.join();<span class="hljs-comment">//等待某线程结束，再恢复当前线程的运行</span><br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">10</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot;hello&quot;</span>+ i);<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">1000</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace();<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-线程优先级"><a href="#3-线程优先级" class="headerlink" title="3.线程优先级"></a>3.线程优先级</h2><p>1.Java线程有优先级，优先级高的线程会获得较多的CPU运行机会。<br>2.Thread类的setPriority()和getPriority()方法分别用来设置和获取线程的优先级。<br> Java线程的优先级用整数表示，取值范围是1~10;  10最高级。<br>3.每个线程都有默认的优先级。主线程的默认优先级为Thread.NORM_PRIORITY（5）</p><h2 id="4-守护线程"><a href="#4-守护线程" class="headerlink" title="4.守护线程"></a>4.守护线程</h2><p>守护线程:一般是为工作线程服务的,当所有用户线程结束,守护线程自动结束,常见的守护进程是垃圾回收机制<br>如果我们希望当前main线程结束后,子线程自动结束,我们只需要将子线程设置成守护线程即可:xxx.setDaemon(true);该语句要放在xxx.start();语句前</p><h2 id="5-线程的生命周期"><a href="#5-线程的生命周期" class="headerlink" title="5.线程的生命周期"></a>5.线程的生命周期</h2><p>1.NEW   &#x2F;&#x2F;尚未启动的线程处于此状态<br>2.RUNNABLE  &#x2F;&#x2F;在java虚拟机中执行的线程处于此状态<br>3.BLOCKED    &#x2F;&#x2F;被阻塞等待监视器锁定的线程处于此状态<br>4.WAITING&#x2F;&#x2F;正在等待另一个线程执行特定动作的线程处于此状态<br>5.TIMED_WAITING&#x2F;&#x2F;正待等待另一个线程执行达到指定等待时间的线程处于此状态<br>6.TERMINATED&#x2F;&#x2F;已退出的线程处于此状态</p><h2 id="6-线程同步"><a href="#6-线程同步" class="headerlink" title="6.线程同步"></a>6.线程同步</h2><p>1.在多线程编程,一些敏感数据不允许被多个线程访问,此时就使用同步访问技术,保证数据在任何时刻最多一个线程访问<br>2.可以理解为当一个线程在对内存操作时,不允许其他线程操作内存</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.同步代码块</span><br><span class="hljs-keyword">synchronized</span>(对象)&#123;   <span class="hljs-comment">//得到对象的锁,才能操作同步代码</span><br><span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br><span class="hljs-comment">//2.方法声明</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-comment">//需要被同步的代码</span><br>&#125;<br><span class="hljs-comment">//案例:解决售票问题</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work6</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">SellTicket03</span> <span class="hljs-variable">s03</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">SellTicket03</span>();<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(s03);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(s03);<br><span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(s03);<br>t1.start();<br>t2.start();<br>t3.start();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">SellTicket03</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> ticketNum=<span class="hljs-number">100</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">loop</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;  <span class="hljs-comment">//控制run方法变量</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sell</span><span class="hljs-params">()</span> &#123;   <span class="hljs-comment">//同步方法,在同一时刻,只能有一个线程来执行run方法</span><br><span class="hljs-keyword">if</span>(ticketNum &lt;=<span class="hljs-number">0</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;售票结束&quot;</span>);<br>loop = <span class="hljs-literal">false</span>;<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-keyword">try</span> &#123;<br>Thread.sleep(<span class="hljs-number">50</span>);<br>&#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br><span class="hljs-comment">// TODO Auto-generated catch block</span><br>e.printStackTrace(); <br>&#125;<br>System.out.println(<span class="hljs-string">&quot;窗口&quot;</span>+Thread.currentThread().getName()+<span class="hljs-string">&quot;售出一张票&quot;</span>+ <span class="hljs-string">&quot;剩余票数&quot;</span>+(--ticketNum));<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">while</span>(loop) &#123;<br>sell();<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-线程锁"><a href="#7-线程锁" class="headerlink" title="7.线程锁"></a>7.线程锁</h2><p>1.线程同步会导致会出现线程锁导致程序卡死在某一个地方无法继续执行<br>下面操作会释放锁<br>1.当前线程的同步方法、同步代码块执行结束<br>2.当前线程在同步代码块,同步方法中遇到break、return<br>3.当前线程在同步代码块、同步方法中出现了未处理的Error或Exception,导致一场结束<br>4.当前线程在同步代码块、同步方法中执行了线程对象的wait()方法,当前线程暂停,并释放锁<br>下面操作不会释放锁<br>1.线程执行同步代码块或同步方法时,程序调用Thread.sleep()、Thread.yield()方法暂停当前线程的执行,不会释放锁<br>2.线程执行同步代码块时,其他线程调用了该线程的suspend()方法将线程挂起,该线程不会释放锁,避免使用suspen()和resume()来控制线程</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>11.泛型</title>
    <link href="/2023/03/08/java/11.%E6%B3%9B%E5%9E%8B/"/>
    <url>/2023/03/08/java/11.%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="泛型"><a href="#泛型" class="headerlink" title="泛型"></a>泛型</h1><span id="more"></span><h2 id="1-为什么需要泛型"><a href="#1-为什么需要泛型" class="headerlink" title="1.为什么需要泛型"></a>1.为什么需要泛型</h2><p>1.不能对加入到集合ArrayList中的数据类型进行约束<br>2.遍历的时候,需要进行类型转换,如果集合中的数据量大,对效率有影响</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用泛型来对ArrayList进行遍历</span><br>ArrayList&lt;Dog&gt;l1 =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Dog&gt;();<br><span class="hljs-type">dog</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">dog</span> (<span class="hljs-string">&quot;dog1&quot;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-type">dog</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">dog</span> (<span class="hljs-string">&quot;dog2&quot;</span>,<span class="hljs-number">19</span>);<br><span class="hljs-type">dog</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">dog</span> (<span class="hljs-string">&quot;dog3&quot;</span>,<span class="hljs-number">20</span>);<br>l1.add(d1);<br>l1.add(d2);<br>l1.add(d3);<br><span class="hljs-keyword">for</span>(Dog dog:l1) &#123;<br>System.out.println(dog.getname()+dog.getAge());<br>    &#125;<br>    <span class="hljs-comment">//不使用泛型:Dog-加入-&gt;Object-取出-&gt;Dog 放入到ArrayList会先转成Object,在取出时,还需要转换成Dog</span><br>    <span class="hljs-comment">//使用泛型:Dog--&gt;Dog--&gt;Dog 放入和取出时,不需要类型转换</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dog</span> &#123;<br>String name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">dog</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getname</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setname</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dog [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-泛型的好处"><a href="#2-泛型的好处" class="headerlink" title="2.泛型的好处"></a>2.泛型的好处</h2><p>1.编译时,检查添加元素的类型,提高了安全性<br>2.减少了类型转换次数,提高效率</p><h2 id="3-什么是泛型"><a href="#3-什么是泛型" class="headerlink" title="3.什么是泛型"></a>3.什么是泛型</h2><p>1.广泛的类型就是泛型<br>2.泛型又称参数化类型,用来解决数据类型的安全性问题<br>3.在类声明或实例化时只要指定好需要的具体的类型即可<br>4.泛型的作用是:可以在类声明时通过一个标识表示类中某个属性的类型,或者是某个方法的返回值类型,或者是参数类型</p><h2 id="4-泛型语法"><a href="#4-泛型语法" class="headerlink" title="4.泛型语法"></a>4.泛型语法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//泛型说明</span><br>interface 接口 &lt;T&gt;&#123; &#125;和 class 类&lt;K,V&gt;&#123; &#125;<br><span class="hljs-comment">//比如List,ArrayList</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">说明:</span><br><span class="hljs-comment">    1.其中,T,K,V不代表值,而是代表类型</span><br><span class="hljs-comment">    2.任意字母都可以,常用T表示    </span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-comment">//泛型实例化:</span><br>List&lt;String&gt; strList = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;String&gt;();<br>lterator&lt;Customer&gt; iterator = customers.iterator();<br></code></pre></td></tr></table></figure><h2 id="5-泛型应用实例"><a href="#5-泛型应用实例" class="headerlink" title="5.泛型应用实例"></a>5.泛型应用实例</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//创建3个学生对象</span><br><span class="hljs-comment">//放入到HashSet中使用,要求key是String,Value是学生对象</span><br><span class="hljs-comment">//HashSet方式放入3个学生对象</span><br>HashSet&lt;stu&gt; students = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;stu&gt;();<br>students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">stu</span>(<span class="hljs-string">&quot;haozi&quot;</span>,<span class="hljs-number">18</span>));<br>students.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">stu</span>(<span class="hljs-string">&quot;jiaozi&quot;</span>,<span class="hljs-number">16</span>));<br><span class="hljs-comment">//遍历</span><br><span class="hljs-keyword">for</span>(stu s:students) &#123;<br>System.out.println(s);<br>&#125;<br><br><span class="hljs-comment">//HashMap方式放入3个学生对象</span><br>HashMap&lt;String,stu&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;String,stu&gt;();<br>hm.put(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">stu</span>(<span class="hljs-string">&quot;haozi&quot;</span>,<span class="hljs-number">18</span>));<br>hm.put(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">stu</span>(<span class="hljs-string">&quot;jiaozi&quot;</span>,<span class="hljs-number">16</span>));<br><span class="hljs-comment">//hm.put(&quot;2&quot;, new stu(&quot;jiaozi&quot;,18));</span><br><br>Set&lt;Map.Entry&lt;String, stu&gt;&gt; entries = hm.entrySet();<br>Iterator&lt;Map.Entry&lt;String, stu&gt;&gt; iterator = entries.iterator();<br><span class="hljs-keyword">while</span>(iterator.hasNext()) &#123;<br>Map.Entry&lt;String, stu&gt; next = iterator.next();<br>System.out.println(next.getKey()+next.getValue());<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">stu</span>&#123;<br>String name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">stu</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br><span class="hljs-built_in">this</span>.age=age;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;stu [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-泛型细节"><a href="#6-泛型细节" class="headerlink" title="6.泛型细节"></a>6.泛型细节</h2><p>1.给泛型指向数据类型要求的是引用类型,不能是基本数据类型<br>2.再给泛型指定了具体类型后,可以传入该类型或者其子类的类型<br>3.可以简写泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; list1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><p>4.案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work13</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br>ArrayList&lt;Employee&gt; al = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>al.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;haozi2&quot;</span>,<span class="hljs-number">18000</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">11</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2000</span>)));<br>al.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;haozi2&quot;</span>,<span class="hljs-number">1800</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">12</span>,<span class="hljs-number">11</span>,<span class="hljs-number">2000</span>)));<br>al.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Employee</span>(<span class="hljs-string">&quot;haozi3&quot;</span>,<span class="hljs-number">180</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">MyDate</span>(<span class="hljs-number">10</span>,<span class="hljs-number">10</span>,<span class="hljs-number">1980</span>)));<br>System.out.println(al);<br>al.sort(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Employee&gt;() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Employee o1,Employee o2)</span> &#123;<br><span class="hljs-keyword">if</span>(!(o1 <span class="hljs-keyword">instanceof</span> Employee &amp;&amp; o2 <span class="hljs-keyword">instanceof</span> Employee)) &#123;<br>System.out.println(<span class="hljs-string">&quot;类型不正确&quot;</span>);<br>&#125;<br><span class="hljs-comment">//比较name,如果name相同,则按照生日日期先后排序</span><br><span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> o1.getName().compareTo(o2.getName());<br><span class="hljs-keyword">if</span>(i!=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> i;<br>&#125;<br><span class="hljs-comment">//如果name相同,就比较birthday - year </span><br><span class="hljs-type">int</span> <span class="hljs-variable">year</span> <span class="hljs-operator">=</span> o1.getBirthday().getYear() - o2.getBirthday().getYear();<br><span class="hljs-keyword">if</span>(year !=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> year;<br>&#125;<br><span class="hljs-comment">//如果year相同,就比较month</span><br><span class="hljs-type">int</span> <span class="hljs-variable">month</span> <span class="hljs-operator">=</span> o1.getBirthday().getMonth() - o2.getBirthday().getMonth();<br><span class="hljs-keyword">if</span>(month !=<span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> month;<br>&#125;<br><span class="hljs-comment">//如果month相同,就比较day</span><br><span class="hljs-keyword">return</span> o1.getBirthday().getDay() - o2.getBirthday().getDay();<br>&#125;<br>&#125;);<br>System.out.println();<br>System.out.println(al);<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Employee</span>&#123;<br>String name;<br><span class="hljs-type">int</span> sal;<br>MyDate birthday;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Employee</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> sal,MyDate birthday)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br><span class="hljs-built_in">this</span>.sal=sal;<br><span class="hljs-built_in">this</span>.birthday=birthday;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSal</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> sal;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSal</span><span class="hljs-params">(<span class="hljs-type">int</span> sal)</span> &#123;<br><span class="hljs-built_in">this</span>.sal = sal;<br>&#125;<br><span class="hljs-keyword">public</span> MyDate <span class="hljs-title function_">getBirthday</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> birthday;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setBirthday</span><span class="hljs-params">(MyDate birthday)</span> &#123;<br><span class="hljs-built_in">this</span>.birthday = birthday;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;\n [name=&quot;</span> + name + <span class="hljs-string">&quot;, sal=&quot;</span> + sal + <span class="hljs-string">&quot;, birthday=&quot;</span> + birthday + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyDate</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> month;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>  day;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> year;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">MyDate</span><span class="hljs-params">(<span class="hljs-type">int</span> month,<span class="hljs-type">int</span> day,<span class="hljs-type">int</span> year)</span> &#123;<br><span class="hljs-built_in">this</span>.month=month;<br><span class="hljs-built_in">this</span>.day=day;<br><span class="hljs-built_in">this</span>.year=year;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getMonth</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> month;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setMonth</span><span class="hljs-params">(<span class="hljs-type">int</span> month)</span> &#123;<br><span class="hljs-built_in">this</span>.month = month;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getDay</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> day;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setDay</span><span class="hljs-params">(<span class="hljs-type">int</span> day)</span> &#123;<br><span class="hljs-built_in">this</span>.day = day;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getYear</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> year;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setYear</span><span class="hljs-params">(<span class="hljs-type">int</span> year)</span> &#123;<br><span class="hljs-built_in">this</span>.year = year;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;MyDate [month=&quot;</span> + month + <span class="hljs-string">&quot;, day=&quot;</span> + day + <span class="hljs-string">&quot;, year=&quot;</span> + year + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-自定义泛型类"><a href="#7-自定义泛型类" class="headerlink" title="7.自定义泛型类"></a>7.自定义泛型类</h2><p>1.语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java">class 类名 &lt;T,R...&gt;&#123;<br>成员<br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">细节:</span><br><span class="hljs-comment">1.普通成员可以使用泛型(属性、方法)</span><br><span class="hljs-comment">2.使用泛型的数组,不能初始化</span><br><span class="hljs-comment">3.静态方法中不能使用类的泛型</span><br><span class="hljs-comment">4.泛型类的类型,是创建对象时确定的(因为创建对象时,需要指定确认类型)</span><br><span class="hljs-comment">5.如果在创建对象时,没有指定类型,默认为Object</span><br><span class="hljs-comment">*/</span><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Tiger</span>&lt;T,R,M&gt;&#123;<br>String name;<br>R r;  <span class="hljs-comment">//属性使用了泛型</span><br>M m;<br>T t;<br>T[] ts = <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>[<span class="hljs-number">8</span>];  <span class="hljs-comment">//报错,泛型数组不能初始化,不确定T数组的数据类型</span><br><span class="hljs-keyword">static</span> R r2;  <span class="hljs-comment">//报错,因为静态是和类相关的,在类加载的时候对象还没有创建,所以如果静态方法和静态属性,使用了泛型,JVM就无法完成初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Tiger</span><span class="hljs-params">(String name,R r,M m,T t)</span>&#123;  <span class="hljs-comment">//构造方法使用了泛型</span><br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.r = r;<br><span class="hljs-built_in">this</span>.m = m;<br><span class="hljs-built_in">this</span>.t = t;<br>&#125;<br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.Tiger后面泛型,所以Tiger就称为自定义泛型类</span><br><span class="hljs-comment">2.T,R,M泛型的标识符,一般为单个字母大写,可以有多个</span><br><span class="hljs-comment">3.普通成员可以使用泛型(属性、方法)</span><br><span class="hljs-comment">4.</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>2.自定义泛型接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java">interface 接口名&lt;T,R...&gt;&#123;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注意细节:</span><br><span class="hljs-comment">1.接口中,静态成员也不能使用泛型(和泛型类规定一样)</span><br><span class="hljs-comment">2.泛型接口的类型,在继承接口或者实现接口时确定</span><br><span class="hljs-comment">3.没有指定类型,默认为Object</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><p>3.自定义泛型方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java">修饰符 &lt;T,R...&gt;返回类型 方法名(参数列表)&#123;<br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">注意细节:</span><br><span class="hljs-comment">1.泛型方法,可以定义在普通类中,也可以定义在泛型类中</span><br><span class="hljs-comment">2.当泛型方法被调用时,类型会确定</span><br><span class="hljs-comment">3.public void eat(E e)&#123; &#125;,修饰符后没有&lt;T,R..&gt; eat</span><br><span class="hljs-comment">方法不是泛型方法,而是使用了泛型</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br><span class="hljs-type">cat</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">cat</span>();<br>c1.fly(<span class="hljs-string">&quot;宝马&quot;</span>,<span class="hljs-number">100</span>);  <span class="hljs-comment">//因为是泛型,所以会自动识别传入类型</span><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">car</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;   <span class="hljs-comment">//普通方法</span><br><br>&#125;<br><span class="hljs-comment">/*</span><br><span class="hljs-comment">说明:</span><br><span class="hljs-comment">1.&lt;T,R&gt; 就是泛型</span><br><span class="hljs-comment">2.是提供给fly方法使用的</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> &lt;T,R&gt; <span class="hljs-keyword">void</span> <span class="hljs-title function_">fly</span><span class="hljs-params">(T t,R r)</span>&#123;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.泛型的继承和通配符</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.泛型不具备继承性</span><br><span class="hljs-comment">List&lt;Object&gt; list = new ArrayList&lt;String&gt;();//错误</span><br><span class="hljs-comment">2.&lt;?&gt;:支持任意泛型类型</span><br><span class="hljs-comment">3.&lt;? extends A&gt;:支持A类以及A类的子类,规定了泛型的上限</span><br><span class="hljs-comment">4.&lt;? super A&gt;:支持A类以及A类的父亲,不限于直接父类,规定了泛型的下限</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">//说明:List&lt;?&gt;表示任意的泛型类都可以接受</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection1</span><span class="hljs-params">(List&lt;?&gt; c)</span>&#123;<br><span class="hljs-keyword">for</span>(Object object:c)&#123;<br>System.out.println(object);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//? extends AA 表示上限,可以接收AA或者AA的子类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection2</span><span class="hljs-params">(List&lt;? extends AA&gt; c)</span>&#123;<br><span class="hljs-keyword">for</span>(Object object:c)&#123;<br>System.out.println(object);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">//? super 子类类名AA:支持AA类以及AA类的父亲,不限于直接父类,规定了泛型的下限</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">printCollection2</span><span class="hljs-params">(List&lt;? <span class="hljs-built_in">super</span> AA&gt; c)</span>&#123;<br><span class="hljs-keyword">for</span>(Object object:c)&#123;<br>System.out.println(object);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>5.案例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br>DAO&lt;User&gt; d = <span class="hljs-keyword">new</span> <span class="hljs-title class_">DAO</span>&lt;&gt;();<br>d.save(<span class="hljs-string">&quot;1&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">1</span>,<span class="hljs-number">1000</span>,<span class="hljs-string">&quot;haozi1&quot;</span>));<br>d.save(<span class="hljs-string">&quot;2&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">2</span>,<span class="hljs-number">2000</span>,<span class="hljs-string">&quot;haozi2&quot;</span>));<br>d.save(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-number">3000</span>,<span class="hljs-string">&quot;haozi3&quot;</span>));<br>System.out.println(d.list());<br>d.update(<span class="hljs-string">&quot;3&quot;</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>(<span class="hljs-number">3</span>,<span class="hljs-number">5000</span>,<span class="hljs-string">&quot;haozi3&quot;</span>));<br>System.out.println(d.list());<br>d.delete(<span class="hljs-string">&quot;3&quot;</span>);<br>System.out.println(d.list());<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span>&#123;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> id;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">User</span><span class="hljs-params">(<span class="hljs-type">int</span> id,<span class="hljs-type">int</span> age,String name)</span> &#123;<br><span class="hljs-built_in">this</span>.id=id;<br><span class="hljs-built_in">this</span>.age=age;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br><span class="hljs-built_in">this</span>.id = id;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;User [id=&quot;</span> + id + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;, name=&quot;</span> + name + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DAO</span>&lt;T&gt;&#123;<br><span class="hljs-keyword">private</span> Map&lt;String,T&gt; map = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">save</span><span class="hljs-params">(String id,T entity)</span> &#123;<br>map.put(id, entity);<br>&#125;<br><span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">(String id)</span> &#123;<br><span class="hljs-keyword">return</span> map.get(id);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(String id,T entity)</span> &#123;<br>map.put(id, entity);<br>&#125;<br><span class="hljs-keyword">public</span> List&lt;T&gt; <span class="hljs-title function_">list</span><span class="hljs-params">()</span>&#123;<br>List&lt;T&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>Set&lt;String&gt; keyset = map.keySet();<br><span class="hljs-keyword">for</span>(String key:keyset) &#123;<br>list.add(map.get(key));<br>&#125;<br><span class="hljs-keyword">return</span> list;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">delete</span><span class="hljs-params">(String id)</span> &#123;<br>map.remove(id);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>10.集合</title>
    <link href="/2023/02/27/java/10.%E9%9B%86%E5%90%88/"/>
    <url>/2023/02/27/java/10.%E9%9B%86%E5%90%88/</url>
    
    <content type="html"><![CDATA[<h1 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h1><span id="more"></span><h2 id="1-集合的好处"><a href="#1-集合的好处" class="headerlink" title="1.集合的好处"></a>1.集合的好处</h2><p>1.解决数组定义时必须先指定长度<br>2.解决数组必须存储同一类型的数据<br>3.使用数组进行增删改查太麻烦<br>4.集合可以存储任意多个对象,使用方便</p><h2 id="2-集合框架图"><a href="#2-集合框架图" class="headerlink" title="2.集合框架图"></a>2.集合框架图</h2><p><img src="/../../JAVA_TP/3.png" alt="图1"></p><h2 id="3-collection接口方法-已实现子类ArrayList来演示"><a href="#3-collection接口方法-已实现子类ArrayList来演示" class="headerlink" title="3.collection接口方法,已实现子类ArrayList来演示"></a>3.collection接口方法,已实现子类ArrayList来演示</h2><p>3.1add添加单个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">List</span> <span class="hljs-variable">l1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l1.add(<span class="hljs-string">&quot;haozi&quot;</span>);<br>l1.add(<span class="hljs-number">123</span>);<br>l1.add(<span class="hljs-literal">true</span>);<br>System.out.println(l1);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.2remove删除指定元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">List</span> <span class="hljs-variable">l1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l1.add(<span class="hljs-string">&quot;haozi&quot;</span>);<br>l1.add(<span class="hljs-number">123</span>);<br>l1.add(<span class="hljs-literal">true</span>);<br>System.out.println(l1);<br>l1.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//删除第一个元素</span><br>l1.remove(<span class="hljs-literal">true</span>);<span class="hljs-comment">//删除指定元素</span><br>System.out.println(l1);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.3contains查找元素是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">List</span> <span class="hljs-variable">l1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l1.add(<span class="hljs-string">&quot;haozi&quot;</span>);<br>l1.add(<span class="hljs-number">123</span>);<br>l1.add(<span class="hljs-literal">true</span>);<br>System.out.println(l1);<br>l1.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//删除第一个元素</span><br>l1.remove(<span class="hljs-literal">true</span>);<span class="hljs-comment">//删除指定元素</span><br>System.out.println(l1);<br>System.out.println(l1.contains(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//查询元素是否存在</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.4size获取元素个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">List</span> <span class="hljs-variable">l1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l1.add(<span class="hljs-string">&quot;haozi&quot;</span>);<br>l1.add(<span class="hljs-number">123</span>);<br>l1.add(<span class="hljs-literal">true</span>);<br>System.out.println(l1);<br>l1.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//删除第一个元素</span><br>l1.remove(<span class="hljs-literal">true</span>);<span class="hljs-comment">//删除指定元素</span><br>System.out.println(l1);<br>System.out.println(l1.contains(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//查询元素是否存在</span><br>System.out.println(l1.size()); <span class="hljs-comment">//集合长度</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.5isEmpty判断是否为空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">List</span> <span class="hljs-variable">l1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l1.add(<span class="hljs-string">&quot;haozi&quot;</span>);<br>l1.add(<span class="hljs-number">123</span>);<br>l1.add(<span class="hljs-literal">true</span>);<br>System.out.println(l1);<br>l1.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//删除第一个元素</span><br>l1.remove(<span class="hljs-literal">true</span>);<span class="hljs-comment">//删除指定元素</span><br>System.out.println(l1);<br>System.out.println(l1.contains(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//查询元素是否存在</span><br>System.out.println(l1.size()); <span class="hljs-comment">//集合长度</span><br>System.out.println(l1.isEmpty()); <span class="hljs-comment">//判断是否为空</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.6clear清空</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">List</span> <span class="hljs-variable">l1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l1.add(<span class="hljs-string">&quot;haozi&quot;</span>);<br>l1.add(<span class="hljs-number">123</span>);<br>l1.add(<span class="hljs-literal">true</span>);<br>System.out.println(l1);<br>l1.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//删除第一个元素</span><br>l1.remove(<span class="hljs-literal">true</span>);<span class="hljs-comment">//删除指定元素</span><br>System.out.println(l1);<br>System.out.println(l1.contains(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//查询元素是否存在</span><br>System.out.println(l1.size()); <span class="hljs-comment">//集合长度</span><br>System.out.println(l1.isEmpty()); <span class="hljs-comment">//判断是否为空</span><br>l1.clear(); <span class="hljs-comment">//清空</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.7addAll添加多个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">List</span> <span class="hljs-variable">l1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l1.add(<span class="hljs-string">&quot;haozi&quot;</span>);<br>l1.add(<span class="hljs-number">123</span>);<br>l1.add(<span class="hljs-literal">true</span>);<br>System.out.println(l1);<br>l1.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//删除第一个元素</span><br>l1.remove(<span class="hljs-literal">true</span>);<span class="hljs-comment">//删除指定元素</span><br>System.out.println(l1);<br>System.out.println(l1.contains(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//查询元素是否存在</span><br>System.out.println(l1.size()); <span class="hljs-comment">//集合长度</span><br>System.out.println(l1.isEmpty()); <span class="hljs-comment">//判断是否为空</span><br>l1.clear(); <span class="hljs-comment">//清空</span><br><span class="hljs-type">List</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l2.add(<span class="hljs-number">1</span>);<br>l2.add(<span class="hljs-number">2</span>);<br>l1.addAll(l2);<br>System.out.println(l2);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.8containsAll查找多个元素是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">List</span> <span class="hljs-variable">l1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l1.add(<span class="hljs-string">&quot;haozi&quot;</span>);<br>l1.add(<span class="hljs-number">123</span>);<br>l1.add(<span class="hljs-literal">true</span>);<br>System.out.println(l1);<br>l1.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//删除第一个元素</span><br>l1.remove(<span class="hljs-literal">true</span>);<span class="hljs-comment">//删除指定元素</span><br>System.out.println(l1);<br>System.out.println(l1.contains(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//查询元素是否存在</span><br>System.out.println(l1.size()); <span class="hljs-comment">//集合长度</span><br>System.out.println(l1.isEmpty()); <span class="hljs-comment">//判断是否为空</span><br>l1.clear(); <span class="hljs-comment">//清空</span><br><span class="hljs-type">List</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l2.add(<span class="hljs-number">1</span>);<br>l2.add(<span class="hljs-number">2</span>);<br>l1.addAll(l2);<br>System.out.println(l2);<br>System.out.println(l1.containsAll(l2));  <span class="hljs-comment">//查找多个元素是否存在</span><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.9removeAll删除多个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">List</span> <span class="hljs-variable">l1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l1.add(<span class="hljs-string">&quot;haozi&quot;</span>);<br>l1.add(<span class="hljs-number">123</span>);<br>l1.add(<span class="hljs-literal">true</span>);<br>System.out.println(l1);<br>l1.remove(<span class="hljs-number">0</span>);<span class="hljs-comment">//删除第一个元素</span><br>l1.remove(<span class="hljs-literal">true</span>);<span class="hljs-comment">//删除指定元素</span><br>System.out.println(l1);<br>System.out.println(l1.contains(<span class="hljs-literal">true</span>)); <span class="hljs-comment">//查询元素是否存在</span><br>System.out.println(l1.size()); <span class="hljs-comment">//集合长度</span><br>System.out.println(l1.isEmpty()); <span class="hljs-comment">//判断是否为空</span><br>l1.clear(); <span class="hljs-comment">//清空</span><br><span class="hljs-type">List</span> <span class="hljs-variable">l2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l2.add(<span class="hljs-number">1</span>);<br>l2.add(<span class="hljs-number">2</span>);<br>l1.addAll(l2);<br>System.out.println(l2);<br>System.out.println(l1.containsAll(l2));  <span class="hljs-comment">//查找多个元素是否存在</span><br>l1.add(<span class="hljs-number">3</span>);<br>l1.removeAll(l2);  <span class="hljs-comment">//删除多个元素</span><br>System.out.println(l1);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-遍历方式"><a href="#4-遍历方式" class="headerlink" title="4.遍历方式"></a>4.遍历方式</h2><p>4.1 for增强遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">List</span> <span class="hljs-variable">l1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>l1.add(<span class="hljs-string">&quot;haozi&quot;</span>);<br>l1.add(<span class="hljs-number">123</span>);<br>l1.add(<span class="hljs-literal">true</span>);<br><span class="hljs-keyword">for</span>(Object i:l1) &#123;<br>System.out.println(i);<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.2案例:创建3个dog对象,放入arraylist中,并遍历</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">ArrayList</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><span class="hljs-type">dog</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">dog</span> (<span class="hljs-string">&quot;dog1&quot;</span>,<span class="hljs-number">18</span>);<br><span class="hljs-type">dog</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">dog</span> (<span class="hljs-string">&quot;dog2&quot;</span>,<span class="hljs-number">19</span>);<br><span class="hljs-type">dog</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">dog</span> (<span class="hljs-string">&quot;dog3&quot;</span>,<span class="hljs-number">20</span>);<br>l1.add(d1);<br>l1.add(d2);<br>l1.add(d3);<br><span class="hljs-keyword">for</span>(Object dog:l1) &#123;<br>System.out.println(dog);<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">dog</span> &#123;<br>String name;<br><span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">dog</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getname</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setname</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span> &#123;<br><span class="hljs-built_in">this</span>.age = age;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;dog [name=&quot;</span> + name + <span class="hljs-string">&quot;, age=&quot;</span> + age + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><p>4.3案例:利用书的价格排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">List</span> <span class="hljs-variable">l1</span> <span class="hljs-operator">=</span>  <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><span class="hljs-type">book</span> <span class="hljs-variable">d1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">book</span> (<span class="hljs-string">&quot;book1&quot;</span>,<span class="hljs-number">200</span>,<span class="hljs-string">&quot;zz1&quot;</span>);<br><span class="hljs-type">book</span> <span class="hljs-variable">d2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">book</span> (<span class="hljs-string">&quot;book2&quot;</span>,<span class="hljs-number">100</span>,<span class="hljs-string">&quot;zz2&quot;</span>);<br><span class="hljs-type">book</span> <span class="hljs-variable">d3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">book</span> (<span class="hljs-string">&quot;book3&quot;</span>,<span class="hljs-number">300</span>,<span class="hljs-string">&quot;zz3&quot;</span>);<br>l1.add(d1);<br>l1.add(d2);<br>l1.add(d3);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;l1.size()-<span class="hljs-number">1</span>;i++) &#123;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j&lt;l1.size()-<span class="hljs-number">1</span>-i;j++) &#123;<br><span class="hljs-comment">//获取book对象,并向下转型,因为它以前是对象我要重新给他转成book</span><br><span class="hljs-type">book</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> (book)l1.get(j);<br><span class="hljs-type">book</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> (book)l1.get(j+<span class="hljs-number">1</span>);<br><span class="hljs-keyword">if</span>(b1.getJg()&gt;b2.getJg()) &#123;<br>l1.set(j, b2);<br>l1.set(j+<span class="hljs-number">1</span>, b1);<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">for</span>(Object book:l1) &#123;<br>System.out.println(book);<br>&#125;<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">book</span> &#123;<br>String name;<br><span class="hljs-type">int</span> jg;<br>String zz;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">book</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> jg,String zz)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br><span class="hljs-built_in">this</span>.jg = jg;<br><span class="hljs-built_in">this</span>.zz = zz;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getJg</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> jg;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setJg</span><span class="hljs-params">(<span class="hljs-type">int</span> jg)</span> &#123;<br><span class="hljs-built_in">this</span>.jg = jg;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getZz</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> zz;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setZz</span><span class="hljs-params">(String zz)</span> &#123;<br><span class="hljs-built_in">this</span>.zz = zz;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;book [name=&quot;</span> + name + <span class="hljs-string">&quot;, jg=&quot;</span> + jg + <span class="hljs-string">&quot;, zz=&quot;</span> + zz + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-ArrayList的注意事项"><a href="#5-ArrayList的注意事项" class="headerlink" title="5.ArrayList的注意事项"></a>5.ArrayList的注意事项</h2><p>1.ArrayList 是由数组来实现数据存储的<br>2.多线程不建议使用ArrayList</p><h2 id="6-List接口实现类-ArrayList底层结构"><a href="#6-List接口实现类-ArrayList底层结构" class="headerlink" title="6.List接口实现类-ArrayList底层结构"></a>6.List接口实现类-ArrayList底层结构</h2><p>1.ArrayList中维护了一个Object类型的数组elementData。<br>2.当创建ArrayList对象时,如果使用的是无参构造器,则初始elementData容量为0,第一次添加,则扩容elementData为10,如果需要再次扩容,则扩容elementData为1.5倍。<br>3.如果使用的是指定大小的构造器,则初始elementData容量为指定大小,如果需要扩容,则直接扩容elementData为1.5倍</p><h2 id="7-Vector底层结构"><a href="#7-Vector底层结构" class="headerlink" title="7.Vector底层结构"></a>7.Vector底层结构</h2><p>1.Vector是可变数组,安全(针对线程),效率不高,如果是无参,默认10,满后,就按2倍扩容,如果指定大小,则每次直接按2倍扩充</p><h2 id="8-List接口实现类-LinkedList的全面说明"><a href="#8-List接口实现类-LinkedList的全面说明" class="headerlink" title="8.List接口实现类-LinkedList的全面说明"></a>8.List接口实现类-LinkedList的全面说明</h2><p>1.LinkedList实现了双向链表的双端队列特点<br>2.可以添加任意元素(元素可以重复),包括null<br>3.线程不安全,没有实现同步<br>4.LinkedList中维护了两个属性first和last分别指向头节点和尾节点<br>5.每个结点Node对象,里面又维护了prev(前驱)、next(后继)、item(存放数据)三个属性(双向链表)。<br>6.所以LinkedList的元素的添加和删除,不是通过数组完成的,相对来说效率最高</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//基本语法</span><br><span class="hljs-type">LinkedList</span> <span class="hljs-variable">linkedList</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i&lt;=<span class="hljs-number">2</span>;i++)&#123;<br>linkedList.add(i);<br>linkedList.remove();  <span class="hljs-comment">//删除的是第一个结点</span><br>linkedList.set(<span class="hljs-number">1</span>,<span class="hljs-number">999</span>);<span class="hljs-comment">//修改某个索引结点的值</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">o</span> <span class="hljs-operator">=</span> linkedList.get(<span class="hljs-number">1</span>);<span class="hljs-comment">//得到第二个对象</span><br>&#125;<br><span class="hljs-comment">//遍历增强for循环:</span><br><span class="hljs-keyword">for</span>(Object o1:linkedList)&#123;<br>System.out.println(o1);<br>&#125;<br><span class="hljs-comment">//普通遍历:</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; linkedList.size();i++)&#123;<br>System.out.println(linkedList.get(i));<br>&#125;<br><span class="hljs-comment">//迭代器循环</span><br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> linkedList.itreator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>System.out.println(<span class="hljs-string">&quot;next&quot;</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-ArrayList和LinkedList的比较"><a href="#9-ArrayList和LinkedList的比较" class="headerlink" title="9.ArrayList和LinkedList的比较"></a>9.ArrayList和LinkedList的比较</h2><p>1.ArrayList是可变数组,增删效率低,数组扩容,改查效率高<br>2.LinkedList是双向链表,增删效率较高,可以通过链表追加,但是改查的效率较低<br>3.我们可以看操作的数据是增删的操作多还是改查的操作多而去选择ArrayList和LinkdeList</p><h2 id="10-Set接口常用的方法"><a href="#10-Set接口常用的方法" class="headerlink" title="10.Set接口常用的方法"></a>10.Set接口常用的方法</h2><p>1.实现Set接口的子类是无序(添加和取出的顺序不一致),没有索引<br>2.不允许插入重复元素,最多包含一个null<br>3.Set接口的实现类有HashSet和TreeSet<br>4.Set接口和List接口一样,Set接口也是Collection的子接口,因此常用方法和Collection接口一样,遍历方式也一样,但是不能使用索引的方式来获取了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//定义手法</span><br><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>set.add(<span class="hljs-string">&quot;1&quot;</span>);<br>set.add(<span class="hljs-string">&quot;2&quot;</span>);<br>set.add(<span class="hljs-string">&quot;1&quot;</span>);<br>set.add(<span class="hljs-literal">null</span>);<br><span class="hljs-comment">//输出后的顺序和插入的顺序不同,但每次取出的顺序是一致的,而且没有重复值</span><br><br><span class="hljs-comment">//遍历:</span><br><span class="hljs-type">Iterator</span> <span class="hljs-variable">iterator</span> <span class="hljs-operator">=</span> linkedList.itreator();<br><span class="hljs-keyword">while</span>(iterator.hasNext())&#123;<br><span class="hljs-type">Object</span> <span class="hljs-variable">next</span> <span class="hljs-operator">=</span> iterator.next();<br>System.out.println(<span class="hljs-string">&quot;next&quot;</span>);<br>&#125;<br><br><span class="hljs-comment">//增强for循环</span><br><span class="hljs-keyword">for</span>(Object o : set)&#123;<br>System.out.println(o);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="11-Set接口实现类-HashSet"><a href="#11-Set接口实现类-HashSet" class="headerlink" title="11.Set接口实现类-HashSet"></a>11.Set接口实现类-HashSet</h2><p>1.HashSet实现了Set接口<br>2.HashSet实际上是HashMap,底层是数组+链表<br>3.只可以存放一个null值<br>4.输出后的顺序和插入的顺序不同,但每次取出的顺序是一致的,而且没有重复的元素&#x2F;对象</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Set</span> <span class="hljs-variable">hashSet</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>();<br>hashSet.add(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-comment">//能添加</span><br>hashSet.add(<span class="hljs-string">&quot;1&quot;</span>);<span class="hljs-comment">//添加失败</span><br>hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;tom&quot;</span>));<span class="hljs-comment">//能添加</span><br>hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Dog</span>(<span class="hljs-string">&quot;tom&quot;</span>));<span class="hljs-comment">//能添加</span><br><span class="hljs-comment">//面试题</span><br>hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;haozi&quot;</span>));<span class="hljs-comment">//能添加</span><br>hashSet.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;haozi&quot;</span>));<span class="hljs-comment">//不能添加</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Dog</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name)</span>&#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="11-1-HashSet底层机制"><a href="#11-1-HashSet底层机制" class="headerlink" title="11.1.HashSet底层机制"></a>11.1.HashSet底层机制</h3><p>1.HashSet的底层是HashMap<br>2.添加一个元素时,先得到hash值-会转成-&gt;索引值<br>3.找到存储数据表table,看这个索引位置是否已经存放了元素,如果没有,则直接插入<br>4.如果有,调用equals比较,如果相同,就放弃添加,如果不相同,则添加到最后<br>5.如果一条链表的元素个数到达了8,并且table的大小大于等于了64就会进行树化(红黑树),否则仍然采用数组扩容机制</p><h2 id="13-Set接口实现类-LinkedHashSet"><a href="#13-Set接口实现类-LinkedHashSet" class="headerlink" title="13.Set接口实现类-LinkedHashSet"></a>13.Set接口实现类-LinkedHashSet</h2><p>1.它是HashSet的子类<br>2.底层是一个LinkedHashMap,底层是一个数组table(数组)+双向链表<br>3.根据hashcode值决定存放位置<br>4.不允许添加重复元素<br>5.加入的顺序和取出的顺序一致<br>6.添加第一次时,直接将数组table扩容到16</p><h2 id="14-Map接口特点"><a href="#14-Map接口特点" class="headerlink" title="14.Map接口特点"></a>14.Map接口特点</h2><p>1.Map与collection并列存在<br>2.Map中的key(hash得到的,就是数组的列位置,不可以重复)和value(key哈希得到后的位置数组链表的值)可以是任何引用数据类型<br>3.Map中的key不允许重复,当有相同的key则替换为最新的<br>4.Map中的value可以重复<br>5.Map中key可以分为null,value也可以为null,但是key为null只能有一个<br>6.常用String类作为Map的key<br>7.key和value之间存在单向一对一关系,通过key总能找到value<br>8.Map存放数据的key-value是一对k-v,存放在一个HashMap$Node中的,又因为Node实现了Entry接口,所以有一些书上说一对k-v就是一个Entry</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br><span class="hljs-comment">//Map的接口实现类--HashMap</span><br>map.put(<span class="hljs-string">&quot;no1&quot;</span>,<span class="hljs-string">&quot;haozi&quot;</span>);<span class="hljs-comment">//k-v</span><br>map.put(<span class="hljs-string">&quot;no2&quot;</span>,<span class="hljs-string">&quot;lihao&quot;</span>);<span class="hljs-comment">//k-v</span><br><span class="hljs-comment">//put方法是HashMap的一个方法,它的作用是将指定键和对应的值存储到HashMap中</span><br><span class="hljs-comment">/* </span><br><span class="hljs-comment">1.k-v最后是HashMap$Node node = newNode(hash,key,value,null)</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">2.k-v为了方便程序员的遍历,还会创建EntrySet集合,该集合存放的元素类型Entry,而一个Entry对象就有k,v EntrySet&lt;Entry&lt;K,V&gt;&gt;即:transient Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">3.entrySet中,定义的类型是Map.Entry,但实际上存放的还是HashMap$Node,这是因为static class Node&lt;K,V&gt; implement Map.Entry&lt;K,V&gt;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">4.当把HashMap$Node对象存放到 entrySet 就方便我们的遍历,因为Map.Entry提供了重要方法 K getKey(); V getValue();</span><br><span class="hljs-comment"> */</span><br><span class="hljs-type">Set</span> <span class="hljs-variable">set</span> <span class="hljs-operator">=</span> map.entrySet();<br>System.out.println(set.getclass());<span class="hljs-comment">//HashMap$EntrySet   对应2</span><br><span class="hljs-comment">//getClass()返回Class类型的对象。</span><br><span class="hljs-keyword">for</span>(Object obj : set)&#123;<br>System.out.println(obj.getclass());<span class="hljs-comment">//HashMap$Node  对应3</span><br><br><span class="hljs-comment">//为了从 HashMap$Node 取出 K-V</span><br><span class="hljs-comment">//先做向下转型</span><br>Map.<span class="hljs-type">Entry</span> <span class="hljs-variable">entry</span> <span class="hljs-operator">=</span> (Map.Entry) obj;<br>System.out.println(entry.getKey()+<span class="hljs-string">&quot;-&quot;</span>+entry.getValue());<span class="hljs-comment">//对应4</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="15-Map接口方法"><a href="#15-Map接口方法" class="headerlink" title="15.Map接口方法"></a>15.Map接口方法</h2><p>1.put  添加</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;邓超&quot;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Book</span>(<span class="hljs-string">&quot;&quot;</span>,<span class="hljs-number">100</span>));  <span class="hljs-comment">//ok</span><br>map.put(<span class="hljs-string">&quot;邓超&quot;</span>,<span class="hljs-string">&quot;孙俪&quot;</span>);  <span class="hljs-comment">//会替换</span><br>map.put(<span class="hljs-string">&quot;王宝强&quot;</span>,<span class="hljs-string">&quot;马蓉&quot;</span>); <br></code></pre></td></tr></table></figure><p>2.remove  根据键删除映射关系</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">map.remove(<span class="hljs-string">&quot;王宝强&quot;</span>); <br></code></pre></td></tr></table></figure><p>3.get  根据键获取值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Object</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> map.get(<span class="hljs-string">&quot;邓超&quot;</span>);<br></code></pre></td></tr></table></figure><p>4.size  获取元素个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(map.size());<br></code></pre></td></tr></table></figure><p>5.isEmpty  判断个数是否为0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(map.isEmpty());<br></code></pre></td></tr></table></figure><p>6.clear  清除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">map.clear();<br></code></pre></td></tr></table></figure><p>7.containsKey  查找键是否存在</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(map.containsKey(<span class="hljs-string">&quot;邓超&quot;</span>));<br></code></pre></td></tr></table></figure><h2 id="16-Map遍历方式"><a href="#16-Map遍历方式" class="headerlink" title="16.Map遍历方式"></a>16.Map遍历方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Map</span> <span class="hljs-variable">map</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>map.put(<span class="hljs-string">&quot;邓超&quot;</span>,<span class="hljs-string">&quot;孙俪&quot;</span>);<br>map.put(<span class="hljs-string">&quot;王宝强&quot;</span>,<span class="hljs-string">&quot;马蓉&quot;</span>);<br>map.put(<span class="hljs-string">&quot;宋茜&quot;</span>,<span class="hljs-string">&quot;马蓉&quot;</span>);<br>map.put(<span class="hljs-string">&quot;刘令博&quot;</span>,<span class="hljs-literal">null</span>);<br>map.put(<span class="hljs-literal">null</span>,<span class="hljs-string">&quot;刘亦菲&quot;</span>);<br>map.put(<span class="hljs-string">&quot;鹿晗&quot;</span>,<span class="hljs-string">&quot;关晓彤&quot;</span>);<br><br><br><span class="hljs-comment">//第一种:先取出所有的k,再通过k取出对应的value</span><br><span class="hljs-type">Set</span> <span class="hljs-variable">keset</span> <span class="hljs-operator">=</span> map.keySet();<br><span class="hljs-keyword">for</span>(Object key: keset)&#123;<br>System.out.println(key+<span class="hljs-string">&quot;—&quot;</span>+map.get(key));<br>&#125;<br><br><span class="hljs-comment">//第二种:把所有values值取出</span><br><span class="hljs-type">Collection</span> <span class="hljs-variable">values</span> <span class="hljs-operator">=</span> map.values();<br><span class="hljs-keyword">for</span>(Object value : values)&#123;<br>System.out.println(value);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="17-Map接口实现类-HashMap"><a href="#17-Map接口实现类-HashMap" class="headerlink" title="17.Map接口实现类-HashMap"></a>17.Map接口实现类-HashMap</h2><p>1.Map接口的常用实现类是:HashMap、Hashtable和propreties<br>2.HashMap的使用频率较多<br>3.HashMap是以key-val对的方式来存储数据的<br>4.key不允许重复,值可以重复,如果添加相同的key,那么会覆盖原来的key-val<br>5.与HashSet一样,不保证映射的顺序,底层还是Hash表的方式存储的<br>6.线程不安全</p><h3 id="17-1-HashMap底层机制"><a href="#17-1-HashMap底层机制" class="headerlink" title="17.1 HashMap底层机制"></a>17.1 HashMap底层机制</h3><p>1.扩容机制:和HashSet相同<br>2.HashMap底层维护了Node类型的数组table,默认为null<br>3.当创建对象时,将加载因子(loadfactor)初始化为0.75<br>4.第一次添加,则需要扩容table容量为16,临界值为12<br>5.以后再次扩容为table容量的2倍,临界值为原来的2倍,以此类推<br>6.如果一条链表的元素个数超过8并且table的大小&gt;&#x3D;默认64,就会进行树化(红黑树)<br>7.底层也是数组+链表+红黑树<br>案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Arrays;<br><br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work7</span> &#123;<br><span class="hljs-comment">//@SuppressWarnings(&#123;&quot;all&quot;&#125;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">HashMap</span> <span class="hljs-variable">hashMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>();<br>hashMap.put(<span class="hljs-number">1</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">yg</span>(<span class="hljs-string">&quot;haozi&quot;</span>,<span class="hljs-number">180001</span>,<span class="hljs-number">1</span>));<br>hashMap.put(<span class="hljs-number">2</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">yg</span>(<span class="hljs-string">&quot;haozi2&quot;</span>,<span class="hljs-number">180</span>,<span class="hljs-number">2</span>));<br>hashMap.put(<span class="hljs-number">3</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">yg</span>(<span class="hljs-string">&quot;haozi3&quot;</span>,<span class="hljs-number">18001</span>,<span class="hljs-number">3</span>));<br><span class="hljs-type">Set</span> <span class="hljs-variable">keyset</span> <span class="hljs-operator">=</span> hashMap.keySet();<br><span class="hljs-keyword">for</span>(Object key: keyset) &#123;<br><span class="hljs-type">yg</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> (yg) hashMap.get(key);<br><span class="hljs-keyword">if</span>(y.getGz()&gt;<span class="hljs-number">18000</span>) &#123;<br>System.out.println(y);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">yg</span>&#123;<br>String name;<br><span class="hljs-type">double</span> gz;<br><span class="hljs-type">int</span> id;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">yg</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> gz,<span class="hljs-type">int</span> id)</span> &#123;<br><span class="hljs-built_in">this</span>.name=name;<br><span class="hljs-built_in">this</span>.gz=gz;<br><span class="hljs-built_in">this</span>.id=id;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getGz</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> gz;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setGz</span><span class="hljs-params">(<span class="hljs-type">double</span> gz)</span> &#123;<br><span class="hljs-built_in">this</span>.gz = gz;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getId</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> id;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setId</span><span class="hljs-params">(<span class="hljs-type">int</span> id)</span> &#123;<br><span class="hljs-built_in">this</span>.id = id;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;yg [name=&quot;</span> + name + <span class="hljs-string">&quot;, gz=&quot;</span> + gz + <span class="hljs-string">&quot;, id=&quot;</span> + id + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="18-Map接口实现类-Hashtable"><a href="#18-Map接口实现类-Hashtable" class="headerlink" title="18.Map接口实现类-Hashtable"></a>18.Map接口实现类-Hashtable</h2><p>1.存放的元素是键值对:即 K-V<br>2.hashtable的键和值都不能为null<br>3.hashtable的使用方法基本上和HashMap一样<br>4.hashtable的线程是安全的,hashMap的线程是不安全的<br>5.数组初始化大小为11,临界值是8,每次扩容原大小*2+1</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Hashtable</span> <span class="hljs-variable">table</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Hashtable</span>();<br>table.put(<span class="hljs-string">&quot;haozi&quot;</span>,<span class="hljs-string">&quot;100&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="19-Hashtable的子类-Properties"><a href="#19-Hashtable的子类-Properties" class="headerlink" title="19.Hashtable的子类-Properties"></a>19.Hashtable的子类-Properties</h2><p>1.也是使用一种键值对的形式来保存数据<br>2.不允许为null<br>3.重复值会替换<br>4.特点类似于Hashtable类似<br>5.Properties 还可以用于从xxx.properties文件中,加载数据到Properties类对象,并进行读取和修改</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">properties</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br>properties.put(<span class="hljs-string">&quot;john&quot;</span>,<span class="hljs-number">100</span>);<br><span class="hljs-comment">//通过k获取对应值</span><br>System.out.println(properties.get(<span class="hljs-string">&quot;john&quot;</span>));<span class="hljs-comment">//100</span><br>properties.remove(<span class="hljs-string">&quot;john&quot;</span>);  <span class="hljs-comment">//删除</span><br>properties.put(<span class="hljs-string">&quot;john&quot;</span>,<span class="hljs-string">&quot;haozi&quot;</span>);   <span class="hljs-comment">//修改</span><br></code></pre></td></tr></table></figure><h2 id="20-如何选择集合实现类"><a href="#20-如何选择集合实现类" class="headerlink" title="20.如何选择集合实现类"></a>20.如何选择集合实现类</h2><p>1.先判断存储的类型(一组对象[单列]或一组键值对[双列])<br>2.一组对象[单列]:Collection接口<br>    允许重复:List<br>        增删多:LinkedList[底层维护了一个双向链表]<br>        改查多:ArrayList[底层维护Object类型的可变数组]<br>    不允许重复:Set<br>        无序:HashSet[底层是HashMap,维护了一个哈希表,数组+链表+红黑树]<br>        排序:TreeSet<br>        插入和取出顺序一致:LinkedHashSet,维护数组+双向链表<br>3.一组键值对[双列]:Map<br>    键无序:HashMap[底层是:哈希表 jdk8:数组+链表+红黑树]<br>    键排序:TreeMap<br>    键插入和取出顺序一致:LinkedHashMap<br>    读取文件:Properties</p><h2 id="21-Set接口实现类-TreeSet"><a href="#21-Set接口实现类-TreeSet" class="headerlink" title="21.Set接口实现类-TreeSet"></a>21.Set接口实现类-TreeSet</h2><p>1.与HashSet的区别就是TreeSet可以排序<br>2.当使用无参构造器创建TreeSet时候,它仍然是无序的<br>3.使用TreeSet提供的一个构造器可以传入一个比较器(匿名内部类),并指定排序规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeset</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>();<br><br><span class="hljs-comment">//指定排序规则</span><br><span class="hljs-type">TreeSet</span> <span class="hljs-variable">treeset2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeSet</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1,Object o2)</span>&#123;<br><span class="hljs-comment">//下面调用String的compareTo方法进行字符串大小比较</span><br><span class="hljs-keyword">return</span> ((String)o1).compareTo((String) o2);<br><span class="hljs-comment">//按照长度排序</span><br><span class="hljs-comment">//return ((String)o1).length()-((String) o2).length();</span><br>&#125;<br>&#125;);<br>treeset.add (<span class="hljs-string">&quot;jack&quot;</span>);<br>treeset.add (<span class="hljs-string">&quot;tom&quot;</span>);<br>treeset.add (<span class="hljs-string">&quot;sp&quot;</span>);<br>treeset.add (<span class="hljs-string">&quot;a&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="22-Map接口实现类-TreeMap"><a href="#22-Map接口实现类-TreeMap" class="headerlink" title="22.Map接口实现类-TreeMap"></a>22.Map接口实现类-TreeMap</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//使用默认的构造器创建TreeMap,是无序的(也没有排序)</span><br><span class="hljs-comment">//TreeMap treemap = new TreeMap();</span><br><span class="hljs-comment">//这里要求按照传入的K(String)的大小进行排序</span><br><span class="hljs-type">TreeMap</span> <span class="hljs-variable">treeMap</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TreeMap</span>(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1,Object o2)</span>&#123;<br><span class="hljs-comment">//按照传入的K(String)的大小进行排序</span><br><span class="hljs-keyword">return</span> ((String)o2).compareTo((String)o1);<br><span class="hljs-comment">//切换o2和o1的出现顺序就是跳转是按照从大到小还是从小到大排序</span><br><span class="hljs-comment">//按照字符串长度排序</span><br><span class="hljs-comment">//return ((String)o2).length()-((String)o1).length()</span><br>&#125;<br>&#125;);<br>treemap.put (<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-string">&quot;杰克&quot;</span>);<br>treemap.put (<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-string">&quot;汤姆&quot;</span>);<br>treemap.put (<span class="hljs-string">&quot;sp&quot;</span>,<span class="hljs-string">&quot;耗子&quot;</span>);<br>treemap.put (<span class="hljs-string">&quot;a&quot;</span>,<span class="hljs-string">&quot;例子&quot;</span>);<br><br>System.out.println(treemap);<br></code></pre></td></tr></table></figure><h2 id="23-Collection工具类"><a href="#23-Collection工具类" class="headerlink" title="23.Collection工具类"></a>23.Collection工具类</h2><p>1.Collections是一个操作Set、List和Map等集合的工具类<br>2.Collections是提供了一系列静态的方法对集合元素进行排序、查询和修改等操作<br>3.排序操作(均为static方法):<br>3.1reverse(List):反转List中元素的顺序<br>3.2shuffle(List):对List集合元素进行随机排序<br>3.3sort(List):根据元素的自然顺序对指定List集合元素按升序排序<br>3.4sort(List,Comparator):根据指定的Comparator产生的顺序对List集合元素进行排序<br>3.5swap(List,int,int):将指定list集合中的i处元素和j处元素进行交换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">ArrayList</span> <span class="hljs-variable">a1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br>list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br>list.add(<span class="hljs-string">&quot;smith&quot;</span>);<br>list.add(<span class="hljs-string">&quot;king&quot;</span>);<br>list.add(<span class="hljs-string">&quot;milan&quot;</span>);<br>list.add(<span class="hljs-string">&quot;tom&quot;</span>);<br><br><span class="hljs-comment">//reverse反转List中的元素顺序</span><br>Collections.reverse(list);<br>System.out.println(list);<br><span class="hljs-comment">//shuffle随机排序</span><br>Collections.shuffle(list);<br>System.out.println(list);<br><span class="hljs-comment">//sort:根据元素的自然顺序对指定List集合元素按升序排序(按照字符串首字母的大小来排序的)</span><br>Collections.sort(list);<br>System.out.println(list);<br><span class="hljs-comment">//sort(List,Comparator)按照字符串长度大小来排序</span><br>Collections.sort(list,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compart</span><span class="hljs-params">(Object o1,Object o2)</span>&#123;<br><span class="hljs-keyword">if</span>(o1 <span class="hljs-keyword">instanceof</span> String)&#123;<br><span class="hljs-keyword">return</span> ((String)o2).length()-((String)o1).length();<br>&#125;<br>&#125;<br>&#125;);<br>System.out.println(list);<br><span class="hljs-comment">//swap交换</span><br>Collections.swap(list,<span class="hljs-number">0</span>,<span class="hljs-number">1</span>);<br>System.out.println(list);<br></code></pre></td></tr></table></figure><p>3.6Object max(Collection):根据元素的自然顺序,返回给定集合中的最大元素<br>3.7Object max(Collection,Comparator):根据Comparator指定的顺序,返回给定集合中的最大元素<br>3.8Object min(Collection)<br>3.9Object min(Collection,Comparator)<br>3.10int frequency(Collection,Object):返回指定集合中指定元素的出现次数<br>3.11void copy(List dest,List src):将src中的内容复制到dest中<br>3.12boolean replaceAll(List list,Object oldVal,Object newVal):使用新值替换List对象的所有旧值</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//求集合中最元素</span><br>System.out.println(Collections.max(list)); <span class="hljs-comment">//tom</span><br><span class="hljs-comment">//返回字符串长度最大的元素</span><br><span class="hljs-type">Object</span> <span class="hljs-variable">maxObject</span> <span class="hljs-operator">=</span> Collections.max(list,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>()&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1,Object o2)</span>&#123;<br><span class="hljs-keyword">return</span> ((String)o1.)length()-((String)o2).length();<br>&#125;<br>&#125;);<br>System.out.println(<span class="hljs-string">&quot;长度最大的元素=&quot;</span> + maxObject);<br><span class="hljs-comment">//min类似</span><br><br><span class="hljs-comment">//int frequency(Collection,Object):返回指定集合中指定元素的出现次数</span><br>System.out.println(Collections.frequency(list,<span class="hljs-string">&quot;tom&quot;</span>));<br><br><span class="hljs-comment">//void copy(List dest,List src):将src中的内容复制到dest中</span><br><span class="hljs-type">ArrayList</span> <span class="hljs-variable">dest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>();<br><span class="hljs-comment">//为了完成一个完整拷贝,我们需要先给dest赋值,大小和list.size()一样</span><br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;list.size();i++)&#123;<br>dest.add(<span class="hljs-string">&quot;&quot;</span>);<br>&#125;<br><span class="hljs-comment">//拷贝</span><br>Collections.copy(dest,list);<br>System.out.println(dest);<br><br><br><span class="hljs-comment">//boolean replaceAll(List list,Object oldVal,Object newVal):使用新值替换List对象的所有旧值</span><br><span class="hljs-comment">//如果list中有tom就替换成汤姆</span><br>Collections.replaceAll(list,<span class="hljs-string">&quot;tom&quot;</span>,<span class="hljs-string">&quot;汤姆&quot;</span>);<br>System.out.println(list);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>9.常用类</title>
    <link href="/2022/11/17/java/9.%E5%B8%B8%E7%94%A8%E7%B1%BB/"/>
    <url>/2022/11/17/java/9.%E5%B8%B8%E7%94%A8%E7%B1%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="常用类"><a href="#常用类" class="headerlink" title="常用类"></a>常用类</h1><span id="more"></span><h2 id="1-包装类"><a href="#1-包装类" class="headerlink" title="1.包装类"></a>1.包装类</h2><p>1.针对八种基本数据类型相应的引用类型-包装类<br>2.有了类的特点,就可以调用类中的方法</p><table><thead><tr><th align="center">基本数据类型</th><th align="center">包装类</th></tr></thead><tbody><tr><td align="center">boolean</td><td align="center">Boolean</td></tr><tr><td align="center">char</td><td align="center">Character</td></tr><tr><td align="center">byte</td><td align="center">Byte</td></tr><tr><td align="center">short</td><td align="center">Short</td></tr><tr><td align="center">int</td><td align="center">Integer</td></tr><tr><td align="center">long</td><td align="center">Long</td></tr><tr><td align="center">float</td><td align="center">Float</td></tr><tr><td align="center">double</td><td align="center">Double</td></tr><tr><td align="center">案例:演示JDK5以前的手动装箱和拆箱</td><td align="center"></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Integer01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span> <span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-comment">//演示int---&gt;Integer的装箱与拆箱</span><br>        <span class="hljs-comment">//JDK5前是手动装箱和拆箱</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(n1);<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer1</span> <span class="hljs-operator">=</span> Integer.valueof(n1);<br>        <span class="hljs-comment">//手动拆箱</span><br>        <span class="hljs-comment">//Integer---&gt;int</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> integer.intValue();<br>        <span class="hljs-comment">//JDK5后就可以自动拆箱和装箱了</span><br>        <span class="hljs-comment">//自动装箱</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">200</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">integer2</span> <span class="hljs-operator">=</span> n2;<br>        <span class="hljs-comment">//自动拆箱</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">n3</span> <span class="hljs-operator">=</span> integer2;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2包装类方法"><a href="#1-2包装类方法" class="headerlink" title="1.2包装类方法"></a>1.2包装类方法</h2><p>案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">WrapperVSString</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-comment">//包装类（Integer）-&gt;String</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;  <span class="hljs-comment">//自动装箱</span><br>        <span class="hljs-comment">//方式1</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> i+<span class="hljs-string">&quot;&quot;</span>;<br>        <span class="hljs-comment">//方式2</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> i.toString();<br>        <span class="hljs-comment">//方式3</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> String.valueOf(i);<br>        <span class="hljs-comment">//String -&gt;包装类(Integer)</span><br>        <span class="hljs-type">String</span> <span class="hljs-variable">str4</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;12345&quot;</span>;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> Integer.parseInt(str4);<span class="hljs-comment">//使用到自动装箱</span><br>        <span class="hljs-comment">//方式2</span><br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>(str4);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-3包装类Integer和Character类常用方法"><a href="#1-3包装类Integer和Character类常用方法" class="headerlink" title="1.3包装类Integer和Character类常用方法"></a>1.3包装类Integer和Character类常用方法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">System.out.println(Integer.MIN_VALUE)<span class="hljs-comment">//返回最小值</span><br>System.out.println(Integer.MAX_VALUE)<span class="hljs-comment">//返回最大值</span><br>System.out.println(Character.isDigit(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是数字</span><br>System.out.println(Character.isLetter(<span class="hljs-string">&#x27;a&#x27;</span>));<span class="hljs-comment">//判断是不是字母</span><br>System.out.println(Character.isUpperCase(<span class="hljs-string">&#x27;a&#x27;</span>))<span class="hljs-comment">//判断是不是大写</span><br>System.out.println(Character.isLowerCase(<span class="hljs-string">&#x27;a&#x27;</span>))<span class="hljs-comment">//判断是不是小写</span><br>System.out.println(Character.isWhitespace(<span class="hljs-string">&#x27;a&#x27;</span>))<span class="hljs-comment">//判断是不是空格</span><br>System.out.println(Character.toUpperCace(<span class="hljs-string">&#x27;a&#x27;</span>))<span class="hljs-comment">//转成大写</span><br>System.out.println(Character.toLowerCace(<span class="hljs-string">&#x27;A&#x27;</span>))<span class="hljs-comment">//转成小写</span><br></code></pre></td></tr></table></figure><h2 id="1-4String类"><a href="#1-4String类" class="headerlink" title="1.4String类"></a>1.4String类</h2><p>1.String 对象用于保存字符串,也就是一组字符序列,双引号括起来的<br>2.String常见的构造器<br>2.1 String s1 &#x3D; new String();<br>2.2 String s2 &#x3D; new String(String orininal);<br>2.3 String s3 &#x3D; new String(char[] a);<br>2.4 String s4 &#x3D; new String(char[] a,int strartIndex,int count);<br>3.String 有属性 private final char value[];用于存放字符串内容<br>3.1注意:value是一个final类型,不可以将value指向新的地址，但是单个字符的内容可以变化。</p><h3 id="1-4-1String对象的创建方式"><a href="#1-4-1String对象的创建方式" class="headerlink" title="1.4.1String对象的创建方式"></a>1.4.1String对象的创建方式</h3><p>方式一:直接赋值String s &#x3D; “DADADA”;<br>方式二:调用构造器String s &#x3D; new String(“DADADAD”);</p><h3 id="1-4-2String对象的不可变性"><a href="#1-4-2String对象的不可变性" class="headerlink" title="1.4.2String对象的不可变性"></a>1.4.2String对象的不可变性</h3><p>任何一个String对象在创建之后都不能对它的内容作出任何改变。对于连接、获得子串和改变大小写等操作，如果返回值同原字符串不同，实际上是产生了一个新的String对象，在程序的任何地方，相同的字符串字面常量都是同一个对象，下面的代码会改变字符串s的内容吗？<br>String　s　&#x3D;　“Java”;<br>s　&#x3D;　“HTML”;<br>答案是不会。第一条语句创建了一个内容为”Java”的String对象，并将其引用赋值给s。第二条语句创建了一个内容为”HTML”的新String对象，并将其引用赋值给s。赋值后第一个String对象仍然存在，但是不能再访问它，因为变量s现在指向了新的对象<br>案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">String</span>　<span class="hljs-variable">str1</span>　<span class="hljs-operator">=</span>　<span class="hljs-string">&quot;hello&quot;</span>;　<br><span class="hljs-type">String</span>　<span class="hljs-variable">str2</span>　<span class="hljs-operator">=</span>　<span class="hljs-keyword">new</span>　<span class="hljs-title class_">String</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-type">String</span>　<span class="hljs-variable">str3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br>System.out.println(str1==str2);　<br>System.out.println(str1==str3);<br><span class="hljs-comment">//程序运行结果：</span><br><span class="hljs-literal">false</span><br><span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><h2 id="1-5String的常用方法"><a href="#1-5String的常用方法" class="headerlink" title="1.5String的常用方法"></a>1.5String的常用方法</h2><p>1.equals &#x2F;&#x2F;区分大小写<br>2.equalslgnoreCase &#x2F;&#x2F;忽略大小写判断内容是否相等<br>3.length &#x2F;&#x2F;获取字符的个数,字符串长度<br>4.indexOf&#x2F;&#x2F;获取字符在字符串中第一次出现的索引,从0开始找不到返回-1<br>5.lastindexOf&#x2F;&#x2F;获取字符串在字符中最后一次出现的索引,从0开始,找不到返回-1<br>6.substring&#x2F;&#x2F;截取指定范围的字符串<br>7.trim &#x2F;&#x2F;去前后空格<br>8.charAt&#x2F;&#x2F;获取某索引处的字符,不能使用charAt[index]这种方式<br>9.toUpperCase  &#x2F;&#x2F;转换成大写<br>10.toLowerCase  &#x2F;&#x2F;转换成小写<br>11.concat    &#x2F;&#x2F;拼接字符串<br>12.replace &#x2F;&#x2F;替换字符串中的字符<br>13.split &#x2F;&#x2F;分割字符串，对于某些分割字符，我们需要转义比如|、\\等<br>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">String</span> <span class="hljs-variable">poem</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;锄禾日当午，汗滴禾下土，谁之盘中餐，粒粒皆辛苦&quot;</span><br>String[ ]split = poem.split(<span class="hljs-string">&quot;，&quot;</span>);<br><span class="hljs-comment">//以，为标准分割poem字符串，返回一个数组</span><br></code></pre></td></tr></table></figure><p>14.compate To &#x2F;&#x2F;比较两个字符串的大小<br>15.toCharArray&#x2F;&#x2F;转换成字符数组<br>16.format &#x2F;&#x2F;格式化字符串，%s字符串，%c字符，%d整形，%.2f浮点型，类似c语言</p><h2 id="1-6-StringBuffer类"><a href="#1-6-StringBuffer类" class="headerlink" title="1.6 StringBuffer类"></a>1.6 StringBuffer类</h2><p>1.java.long.StringBuffer代表可变的字符序列,可以对字符串内容进行删减<br>2.很多方法与String相同,但StringBuffer是可变长度的<br>3.StringBuffer是一个容器<br>使用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//1.StringBuffer有一个直接父类AbstractStringBuilder,在父类有属性char[] value,不是final,该value 数组存放字符串内容</span><br><span class="hljs-comment">//2.StringBuffer也是一个final类</span><br><span class="hljs-comment">//3.StringBuffer 字符内容是存在char[] value,所有在变化(增加/删除) 不用每次都更换地址(即不是每次都创建新的对象)</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br></code></pre></td></tr></table></figure><p>4.String和StringBuffer的对比<br>4.1String保存的是字符串常量,里面的值不能更改,每次String类的更新实际上就是更改地址,效率比较低&#x2F;&#x2F;private final char value []; 放在常量池<br>4.2StringBuffer保存的是字符串变量,里面的值可以更改,每次StringBuffer的更新实际上可以更新内容,不用更新地址,效率较高&#x2F;&#x2F;char[] value 这个放在堆</p><h3 id="1-6-1StringBuffer的构造器"><a href="#1-6-1StringBuffer的构造器" class="headerlink" title="1.6.1StringBuffer的构造器"></a>1.6.1StringBuffer的构造器</h3><p>1.StringBuffer()  &#x2F;&#x2F;构造一个其中不带字符的字符串缓冲区,其初始容量为16个字符<br>使用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br></code></pre></td></tr></table></figure><p>2.StringBuffer(CharSequence seq) &#x2F;&#x2F;构造一个字符串缓冲区,它包含与指定的CharSequence相同的字符<br>3.StringBuffer(int capacity)  &#x2F;&#x2F;capacity[容量],构造一个不带字符,但是具有指定初始容量的字符串缓冲区。即对char[]大小进行指定<br>使用方法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure><p>4.StringBuffer(string str)  &#x2F;&#x2F;构造一个字符串缓冲区,并将其内容初始化为指定的字符串内容</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-comment">//注意char[]的大小为str.length()+16</span><br></code></pre></td></tr></table></figure><h3 id="1-6-2String和StringBuffer相互转换"><a href="#1-6-2String和StringBuffer相互转换" class="headerlink" title="1.6.2String和StringBuffer相互转换"></a>1.6.2String和StringBuffer相互转换</h3><p>案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//String -&gt; StringBuffer</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;hello&quot;</span>;<br><span class="hljs-comment">//方式一:</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(s);<br><span class="hljs-comment">//方式二:</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>b2=b2.append(s);<br><span class="hljs-comment">//StringBuffer -&gt; String</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">b1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;haozi&quot;</span>);<br><span class="hljs-comment">//方式一</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> b1.toString();<br><span class="hljs-comment">//方式二</span><br><span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(b1);<br></code></pre></td></tr></table></figure><h3 id="1-6-3StringBuffer类常见方法"><a href="#1-6-3StringBuffer类常见方法" class="headerlink" title="1.6.3StringBuffer类常见方法"></a>1.6.3StringBuffer类常见方法</h3><p>1.append &#x2F;&#x2F;增<br>2.delete(start,end)<br>3.replace(start,end,string)&#x2F;&#x2F;将start–end间的内容替换掉,不含end<br>4.indexOf &#x2F;&#x2F;查找子串在字符串第一次出现的索引,如果找不到返回-1<br>5.insert &#x2F;&#x2F;插<br>6.length  &#x2F;&#x2F;获取长度<br>案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(<span class="hljs-string">&quot;hello&quot;</span>);<br><span class="hljs-comment">//增</span><br>s.append(<span class="hljs-string">&#x27;,&#x27;</span>);<br>s.append(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>s.append(<span class="hljs-string">&quot;赵敏&quot;</span>).append(<span class="hljs-number">100</span>).append(<span class="hljs-literal">true</span>).append(<span class="hljs-number">10.5</span>);<br>System.out.println(s);<br><span class="hljs-comment">//输出hello,张三丰赵敏100true10.5</span><br><span class="hljs-comment">//删除</span><br><span class="hljs-comment">//删除索引为&gt;=start &amp;&amp; &lt; end 处的字符</span><br>s.delete(<span class="hljs-number">11</span>,<span class="hljs-number">14</span>);<br><span class="hljs-comment">//[11,14)</span><br>System.out.println(s);<br><span class="hljs-comment">//下标从0开始,结果为hello,张三丰赵敏true10.5</span><br><span class="hljs-comment">//改(替换)</span><br>s.replace(<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,<span class="hljs-string">&quot;haozi&quot;</span>);<br><span class="hljs-comment">//9-11的位置([,)])替换成为haozi</span><br>System.out.println(s);<br><span class="hljs-comment">//hello,张三丰haozitrue10.5</span><br><span class="hljs-comment">//插入</span><br>s.insert(<span class="hljs-number">9</span>,<span class="hljs-string">&quot;赵敏&quot;</span>);<br>System.out.println(s);<br><span class="hljs-comment">//从下标为9的位置插入赵敏</span><br><span class="hljs-comment">//求长度</span><br>System.out.println(s.length());<br></code></pre></td></tr></table></figure><p>例题1:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">String</span> <span class="hljs-variable">str</span> <span class="hljs-operator">=</span> <span class="hljs-literal">null</span>;<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>();<br>sb.append(str);<span class="hljs-comment">//调用的是AbstractStringBuilder的appendNull</span><br>System.out.println(sb.length());<span class="hljs-comment">//输出4</span><br><span class="hljs-comment">//</span><br>System.out.println(sb);<span class="hljs-comment">//null</span><br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(str);<span class="hljs-comment">//看底层源码super(str.length()+16);//报错</span><br>System.out.println(sb1);<span class="hljs-comment">//不执行</span><br></code></pre></td></tr></table></figure><p>例题2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//将输入的价格小数点前的每面三位用逗号隔开,在输出</span><br><span class="hljs-type">String</span> <span class="hljs-variable">price</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123564.59&quot;</span>;<br><span class="hljs-type">StringBuffer</span> <span class="hljs-variable">sb</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuffer</span>(price);<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sb.lastIndexOf(<span class="hljs-string">&quot;.&quot;</span>)-<span class="hljs-number">3</span>;i&gt;<span class="hljs-number">0</span>;i=i-<span class="hljs-number">3</span>)&#123;<br>    sb = sb.insert(i,<span class="hljs-string">&quot;,&quot;</span>);<br>&#125;<br>System.out.println(sb);<br></code></pre></td></tr></table></figure><h2 id="1-7StringBuilder类"><a href="#1-7StringBuilder类" class="headerlink" title="1.7StringBuilder类"></a>1.7StringBuilder类</h2><p>1.一个可变的字符序列,此类提供一个与StringBuffer兼容的API,该类被设计作用StringBuffer的一个简易替换,用在字符串缓冲区被单个线程使用的时候。如果可能，建议优先采用该类,因为在大多数实现中,比StringBuffer要块<br>2.StringBuilder上主要的操作还是append和insert方法,可重载这些方法以接受任意类型的数据</p><h3 id="1-7-1-String、StringBuffer、StringBuilder的比较"><a href="#1-7-1-String、StringBuffer、StringBuilder的比较" class="headerlink" title="1.7.1 String、StringBuffer、StringBuilder的比较"></a>1.7.1 String、StringBuffer、StringBuilder的比较</h3><p>1.StringBuilder和StringBuffer非常类似,均代表可变的字符序列,而且方法一样<br>2.String:不可变字符序列,效率低,但是复用性高(多个对象指向一个常量池)<br>3.StringBuffer:可变字符序列,效率较高(增删),多线程<br>4.StringBuilder:可变字符序列,效率最高,单线程</p><h2 id="1-8Math类"><a href="#1-8Math类" class="headerlink" title="1.8Math类"></a>1.8Math类</h2><p>概念:数学的运算方法<br>方法:</p><table><thead><tr><th align="center">方法名</th><th align="center">描述</th></tr></thead><tbody><tr><td align="center">abs(double a)</td><td align="center">返回double的绝对值</td></tr><tr><td align="center">acos(double a)</td><td align="center">返回一个值的反余弦</td></tr><tr><td align="center">asin(double a)</td><td align="center">返回一个值的反正弦</td></tr><tr><td align="center">atan(double a)</td><td align="center">返回一个值的反正切</td></tr><tr><td align="center">cbrt(double a)</td><td align="center">返回double值得立方根</td></tr><tr><td align="center">pow(int a)</td><td align="center">求幂</td></tr><tr><td align="center">ceil()</td><td align="center">向上取整</td></tr><tr><td align="center">floor()</td><td align="center">向下取整</td></tr><tr><td align="center">sqrt(int a)</td><td align="center">求开方</td></tr><tr><td align="center">max(int a,int b)</td><td align="center">求两个数的最大值</td></tr><tr><td align="center">min(int a,int b)</td><td align="center">求两个数的最小数</td></tr><tr><td align="center">注意random生成随机数的使用方法是:</td><td align="center"></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">Random</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>System.out.println(r.nextInt(<span class="hljs-number">100</span>));<br><span class="hljs-comment">//生成一个[0-100)之间的数字</span><br><span class="hljs-comment">//生成一个2&lt;=X&lt;=7的数字</span><br><span class="hljs-comment">//公式为:(int)(a+Math.random()*(b-a +1))</span><br><span class="hljs-comment">//(int)(2+Math.random()*(7-2 +1))</span><br><span class="hljs-comment">//Math.random()*6返回的是0&lt;=X&lt;6的数字,再+2就是2&lt;=X&lt;8,再前面的(int)就是2-7范围了</span><br></code></pre></td></tr></table></figure><h2 id="1-9Arrays类"><a href="#1-9Arrays类" class="headerlink" title="1.9Arrays类"></a>1.9Arrays类</h2><p>概念:Arrays类中包含了一系列的静态方法,用于管理或操作数组(排序或搜索)<br>1.toString  返回数组的字符串格式<br>    用法:Arrays.toString(arr)<br>2.sort排序(自然排序和定制排序)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Integer arr[] = &#123;<span class="hljs-number">1</span>,-<span class="hljs-number">1</span>,<span class="hljs-number">7</span>,<span class="hljs-number">0</span>,<span class="hljs-number">89</span>&#125;;<br><span class="hljs-comment">//可以使用冒泡/选择排序法或直接使用Arrays提供的sort方法排序</span><br>Arrays.sort(arr);<span class="hljs-comment">//默认的排序从小到大</span><br>System.out.println(Arrays.toString(arr));<br><br><span class="hljs-comment">//sort是重载的,也可以通过传入一个接口Comparator 实现定制排序,调用定制排序时,传入两个参数,1是排序的数组,2实现了Comparator接口的匿名内部类,要求实现 compare方法</span><br><br>Arrays.sort(arr,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>()&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span> <span class="hljs-params">(Object o1,Object o2)</span>&#123;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> (Integer) o1;<br>        <span class="hljs-type">Integer</span> <span class="hljs-variable">i2</span> <span class="hljs-operator">=</span> (Integer) o2;<br>        <span class="hljs-comment">//自定义排序的关键(i2-i1)决定了排序的顺序,i1为传入数组的第一个值,i2为第二个值</span><br>        <span class="hljs-keyword">return</span> i2-i1<br>    &#125;<br>&#125;);<br></code></pre></td></tr></table></figure><p>案例根据书的金额进行排序:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> Arrays;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.Comparator;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br>book[] books = <span class="hljs-keyword">new</span> <span class="hljs-title class_">book</span>[<span class="hljs-number">4</span>];<br>books[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">book</span>(<span class="hljs-string">&quot;红楼梦&quot;</span>,<span class="hljs-number">100</span>);<br>books[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">book</span>(<span class="hljs-string">&quot;金瓶梅新&quot;</span>,<span class="hljs-number">90</span>);<br>books[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">book</span>(<span class="hljs-string">&quot;青年文摘20年&quot;</span>,<span class="hljs-number">5</span>);<br>books[<span class="hljs-number">3</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">book</span>(<span class="hljs-string">&quot;java从入门到放弃&quot;</span>,<span class="hljs-number">300</span>);<br>Arrays.sort(books,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>() &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Object o1,Object o2)</span> &#123;<br><span class="hljs-type">book</span> <span class="hljs-variable">book1</span> <span class="hljs-operator">=</span> (book)o1;<br><span class="hljs-type">book</span> <span class="hljs-variable">book2</span> <span class="hljs-operator">=</span> (book)o2;<br>                <span class="hljs-comment">//输出的顺序决定于return的返回值是1还是-1</span><br><span class="hljs-type">double</span> <span class="hljs-variable">priceVal</span> <span class="hljs-operator">=</span>  book2.getPrice()-book1.getPrice();<br><span class="hljs-keyword">if</span>(priceVal &gt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(priceVal &lt; <span class="hljs-number">0</span>) &#123;<br><span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br>&#125;<br>&#125;);<br><br>System.out.println(Arrays.toString(books));<br>&#125;<br><br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">book</span> &#123;<br>String name;<br><span class="hljs-type">double</span> price;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">book</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> price)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br><span class="hljs-built_in">this</span>.price = price;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br><span class="hljs-built_in">this</span>.name = name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getPrice</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> price;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setPrice</span><span class="hljs-params">(<span class="hljs-type">double</span> price)</span> &#123;<br><span class="hljs-built_in">this</span>.price = price;<br>&#125;<br><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-string">&quot;book [name=&quot;</span> + name + <span class="hljs-string">&quot;, price=&quot;</span> + price + <span class="hljs-string">&quot;]&quot;</span>;<br>&#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p>3.binarySearch 通过二分搜索法进行查找,要求必须排好序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">90</span>,<span class="hljs-number">123</span>,<span class="hljs-number">567</span>&#125;<br><span class="hljs-comment">//1.使用binarysearch 二叉查找</span><br><span class="hljs-comment">//2.传入的数组必须是有序的</span><br><span class="hljs-comment">//3.index为找到arr数组中数据为1的数组下标,不存在则返回-(low(它应该存在的位置)+1)</span><br><span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> Arrays.binarySearch(arr,<span class="hljs-number">1</span>);<br>System.out.println(index);<br></code></pre></td></tr></table></figure><p>4.copyOf数组元素的复制</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//从arr数组中拷贝arr.length个元素到newArr数组中</span><br>Integer[] newArr = Arrays.copyOf(arr,arr.length)<br></code></pre></td></tr></table></figure><p>5.fill数组元素的填充</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] num = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>&#125;;<br><span class="hljs-comment">//使用99去填充num数组,并替换所有元素的值为99</span><br>Arrays.fill(num,<span class="hljs-number">99</span>);<br>System.out.println(Arrays.toString(num));<br></code></pre></td></tr></table></figure><p>6.equals比较两个数组内容是否一致</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] arr = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">90</span>,<span class="hljs-number">123</span>,<span class="hljs-number">567</span>&#125;<br>Integer[] arr2 = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">90</span>,<span class="hljs-number">123</span>,<span class="hljs-number">567</span>&#125;;<br><span class="hljs-comment">//如果arr和arr2数组的元素值一样,则返回true</span><br><span class="hljs-type">boolean</span> <span class="hljs-variable">equals</span> <span class="hljs-operator">=</span> Arrays.equals(arr,arr2)<br>System.out.println(equals)<br></code></pre></td></tr></table></figure><p>7.asList将一组值,转换成list集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//asList方法,会将(2,3,4,5,6,1)数据转换成一个list集合</span><br>List&lt;Integer&gt; asList = Arrays.asList(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">1</span>)<br>System.out.println(asList);<br></code></pre></td></tr></table></figure><h2 id="1-10System类"><a href="#1-10System类" class="headerlink" title="1.10System类"></a>1.10System类</h2><p>1.exit退出当前程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;ok1&quot;</span>);<br>System.exit(<span class="hljs-number">0</span>);<br><span class="hljs-comment">//exit(0) 表示程序退出</span><br><span class="hljs-comment">//0代表一个状态,正常的状态</span><br></code></pre></td></tr></table></figure><p>2.arraycopy:复制数组元素,比较适合底层使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] src = &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;<br><span class="hljs-type">int</span>[] dest = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">3</span>];<br><span class="hljs-comment">//从src数组的0索引开始拷贝到dest数组的0索引到3索引</span><br>System.out.arraycopy(src,<span class="hljs-number">0</span>,dest,<span class="hljs-number">0</span>,<span class="hljs-number">3</span>);<br></code></pre></td></tr></table></figure><p>3.currentTimeMillens:返回当前时间距离1970-1-1的毫秒数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(System.currentTimeMillens);<br></code></pre></td></tr></table></figure><p>4.gc:运行垃圾回收机制System.gc();<br>5.Biginteger和BigDecimal类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//BigInteger适合保存比较大的整数</span><br><span class="hljs-comment">//BigDecimal适合保存精度更高的浮点型</span><br><span class="hljs-type">long</span> <span class="hljs-variable">l</span> <span class="hljs-operator">=</span> <span class="hljs-number">222222222222222222222222l</span>; <span class="hljs-comment">//数据太大,存不进去,可以用BigInteger类来搞定</span><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">biginteger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;222222222222222222222222&quot;</span>);<br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">biginteger2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigInteger</span>(<span class="hljs-string">&quot;22&quot;</span>);<br><span class="hljs-comment">//1.再对BigInteger进行加减乘除的时候,需要使用对应方法,不能直接进行+  -  *  /</span><br><span class="hljs-comment">//2.可以创建一个要操作的BigInteger然后进行相应操作</span><br><span class="hljs-comment">//加</span><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">add</span> <span class="hljs-operator">=</span> bigInteger.add(bigInteger2);<br><span class="hljs-comment">//减</span><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">subtract</span> <span class="hljs-operator">=</span> bigInteger.add(bigInteger2);<br><span class="hljs-comment">//乘</span><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">multiply</span> <span class="hljs-operator">=</span> bigInteger.add(bigInteger2);<br><span class="hljs-comment">//除</span><br><span class="hljs-type">BigInteger</span> <span class="hljs-variable">divide</span> <span class="hljs-operator">=</span> bigInteger.add(bigInteger2);<br><br><span class="hljs-type">BigDecimal</span> <span class="hljs-variable">bigDecimal1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-string">&quot;1999.1215165156156165&quot;</span>);<br><span class="hljs-comment">//用法和上面的整数类似</span><br></code></pre></td></tr></table></figure><h2 id="1-10DATE日期类"><a href="#1-10DATE日期类" class="headerlink" title="1.10DATE日期类"></a>1.10DATE日期类</h2><h2 id="1-11案例"><a href="#1-11案例" class="headerlink" title="1.11案例"></a>1.11案例</h2><p>1.将字符串指定区域反转</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//将字符串&quot;abcdef&quot;反转成&quot;aedcbf&quot;</span><br><span class="hljs-comment">//编写方法public static String reverse(String str,int start,int end)搞定</span><br><span class="hljs-keyword">package</span> Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work2</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcdef&quot;</span>;<br>s1 = reverse(s1,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>);<br>System.out.println(s1);<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> String <span class="hljs-title function_">reverse</span><span class="hljs-params">(String s1,<span class="hljs-type">int</span> start ,<span class="hljs-type">int</span> end)</span> &#123;<br><span class="hljs-keyword">if</span>(s1 !=<span class="hljs-literal">null</span> &amp;&amp; start &gt;=<span class="hljs-number">0</span> &amp;&amp; end &gt; start &amp;&amp; end &lt; s1.length() ) &#123;<br><span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RuntimeException</span>(<span class="hljs-string">&quot;参数不正确&quot;</span>);<br>&#125;<br><span class="hljs-type">char</span>[] chars = s1.toCharArray();<br><span class="hljs-type">char</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-string">&#x27; &#x27;</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> start,j=end ;i&lt;j;i++,j--) &#123;<br>temp = chars[i];<br>chars[i] = chars[j];<br>chars[j] = temp;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">chars2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(chars);<br><span class="hljs-keyword">return</span> chars2;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>2.注册处理题</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//要求1:用户名长度为2或3或4</span><br><span class="hljs-comment">//要求2:密码的长度为6,要求全是数字</span><br><span class="hljs-comment">//要求3:邮箱中包含@和.,并且@在.的前面</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work3</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;jack&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">pwd</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123456&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">email</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;haozi@qq.com&quot;</span>;<br>userRegister(name,pwd,email);<br><br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">userRegister</span><span class="hljs-params">(String name,String passwd,String email)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">namelength</span> <span class="hljs-operator">=</span> name.length();<br><span class="hljs-type">int</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">e</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">r</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">if</span>(!(namelength&gt;=<span class="hljs-number">2</span> &amp;&amp; namelength&lt;=<span class="hljs-number">4</span>))&#123;<br>System.out.println(<span class="hljs-string">&quot;用户名错误&quot;</span>);<br>q=<span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-type">char</span>[] char1 = passwd.toCharArray();<br><span class="hljs-keyword">if</span>(passwd.length()!=<span class="hljs-number">6</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;密码长度错误&quot;</span>);<br>w=<span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;char1.length;i++) &#123;<br><span class="hljs-keyword">if</span>(char1[i] &lt; <span class="hljs-string">&#x27;0&#x27;</span> || char1[i] &gt;<span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;密码格式不正确&quot;</span>);<br>e=<span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br>&#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> email.indexOf(<span class="hljs-string">&#x27;@&#x27;</span>);<br><span class="hljs-type">int</span> <span class="hljs-variable">y</span> <span class="hljs-operator">=</span> email.indexOf(<span class="hljs-string">&#x27;.&#x27;</span>);<br><span class="hljs-keyword">if</span>(!(x&gt; <span class="hljs-number">0</span> &amp;&amp; y&gt;x)) &#123;<br>System.out.println(<span class="hljs-string">&quot;邮箱格式有错&quot;</span>);<br>r=<span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-keyword">if</span>(q==<span class="hljs-number">1</span> &amp;&amp; w==<span class="hljs-number">1</span> &amp;&amp; e==<span class="hljs-number">1</span> &amp;&amp; r==<span class="hljs-number">1</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;注册成功&quot;</span>);<br>&#125;<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.字符串统计</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//例如输入&quot;Willian Jefferson Clinton&quot;,输出形式为:Clinton,Willian.J</span><br><span class="hljs-keyword">package</span> Arrays;<br><span class="hljs-keyword">import</span> java.util.*;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work4</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">s1</span>  <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> s1.nextLine();<br><span class="hljs-comment">//nextLine能收集带空格的字符串</span><br><span class="hljs-type">String</span> <span class="hljs-variable">str1</span>  <span class="hljs-operator">=</span> <span class="hljs-string">&quot;li hao zi&quot;</span>;<br>name(s2);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span> <span class="hljs-params">(String str)</span> &#123;<br><span class="hljs-keyword">if</span>(str == <span class="hljs-literal">null</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;输入的字符串不能为空&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br>String[ ] names = str.split(<span class="hljs-string">&quot; &quot;</span>);<br><span class="hljs-keyword">if</span> (names.length!=<span class="hljs-number">3</span>) &#123;<br>System.out.println(<span class="hljs-string">&quot;输入的字符串格式错误&quot;</span>);<br><span class="hljs-keyword">return</span>;<br>&#125;<br><span class="hljs-type">String</span> <span class="hljs-variable">format</span> <span class="hljs-operator">=</span> String.format(<span class="hljs-string">&quot;%s,%s .%c&quot;</span>, names[<span class="hljs-number">2</span>],names[<span class="hljs-number">0</span>],names[<span class="hljs-number">1</span>].toUpperCase().charAt(<span class="hljs-number">0</span>));<br>System.out.println(format);<br><br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.输入一个字符串,统计字符串中的大写字母、小写字母、数字个数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">work5</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">Scanner</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> s1.nextLine();<br>name(s2);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">name</span><span class="hljs-params">(String str1)</span> &#123;<br><span class="hljs-type">int</span> sz=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> zm=<span class="hljs-number">0</span>;<br><span class="hljs-type">int</span> dxzm=<span class="hljs-number">0</span>;<br><span class="hljs-type">char</span>[] str2 = str1.toCharArray();<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;str2.length;i++) &#123;<br><span class="hljs-keyword">if</span>(str2[i]&gt;=<span class="hljs-string">&#x27;A&#x27;</span>&amp;&amp;str2[i]&lt;=<span class="hljs-string">&#x27;Z&#x27;</span>) &#123;<br>dxzm = dxzm + <span class="hljs-number">1</span>;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str2[i]&gt;=<span class="hljs-string">&#x27;a&#x27;</span>&amp;&amp;str2[i]&lt;=<span class="hljs-string">&#x27;z&#x27;</span>) &#123;<br>zm = zm + <span class="hljs-number">1</span> ;<br>&#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(str2[i]&gt;=<span class="hljs-string">&#x27;0&#x27;</span>&amp;&amp;str2[i]&lt;=<span class="hljs-string">&#x27;9&#x27;</span>) &#123;<br>sz = sz + <span class="hljs-number">1</span>;<br>&#125;<br>&#125;<br>System.out.println(dxzm);<br>System.out.println(zm);<br>System.out.println(sz);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>隔离风景</title>
    <link href="/2022/11/07/%E9%9A%94%E7%A6%BB%E9%A3%8E%E6%99%AF/%E9%9A%94%E7%A6%BB%E5%9B%BE%E7%89%87/"/>
    <url>/2022/11/07/%E9%9A%94%E7%A6%BB%E9%A3%8E%E6%99%AF/%E9%9A%94%E7%A6%BB%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<p><img src="/../../GlFJ/1.jpg" alt="1"><br><img src="/../../GlFJ/2.jpg" alt="2"><br><img src="/../../GlFJ/3.jpg" alt="3"><br><img src="/../../GlFJ/4.jpg" alt="4"><br><img src="/../../GlFJ/5.jpg" alt="5"></p>]]></content>
    
    
    <categories>
      
      <category>风景</category>
      
    </categories>
    
    
    <tags>
      
      <tag>风景</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>8.枚举_注解_异常处理</title>
    <link href="/2022/11/03/java/8.%E6%9E%9A%E4%B8%BE_%E6%B3%A8%E8%A7%A3/"/>
    <url>/2022/11/03/java/8.%E6%9E%9A%E4%B8%BE_%E6%B3%A8%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="枚举-注解-异常处理"><a href="#枚举-注解-异常处理" class="headerlink" title="枚举_注解_异常处理"></a>枚举_注解_异常处理</h1><span id="more"></span><h1 id="1-枚举"><a href="#1-枚举" class="headerlink" title="1.枚举"></a>1.枚举</h1><p>枚举:是一组常量的集合,可以理解为枚举属于一种特殊的类,里面只包含一组有限的特定的对象。<br>实现方式:<br>1.自定义类实现枚举<br>2.使用enum关键字实现枚举<br>自定义枚举案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-comment">//1.将构造器私有化,目的防止直接new</span><br>        <span class="hljs-comment">//2.去掉setxxx方法</span><br>        <span class="hljs-comment">//3.在season内部，直接创建固定的对象</span><br>        <span class="hljs-comment">//4.优化,可以加入final修饰符</span><br>    System.out.println(Season.s1);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Season</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc;<br>          <span class="hljs-comment">//下面定义了4个对象</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;温暖&quot;</span>);<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;夏天&quot;</span>,<span class="hljs-string">&quot;炎热&quot;</span>);<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;秋天&quot;</span>,<span class="hljs-string">&quot;凉爽&quot;</span>);<br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">Season</span> <span class="hljs-variable">s4</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Season</span>(<span class="hljs-string">&quot;冬天&quot;</span>,<span class="hljs-string">&quot;寒冷&quot;</span>);<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season</span><span class="hljs-params">(String name,String desc)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.desc=desc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>enum关键字实现枚举案例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test2</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>    System.out.println(Season2.s1);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">enum</span> <span class="hljs-title class_">Season2</span>&#123;<br>          <span class="hljs-comment">//下面定义了4个对象</span><br>          <span class="hljs-comment">//如果使用了enum来实现枚举类</span><br>          <span class="hljs-comment">//1.使用关键字enum替代class</span><br>          <span class="hljs-comment">//2.s1(&quot;春天&quot;,&quot;温暖&quot;);//常量名(实参列表)</span><br>          <span class="hljs-comment">//3.如果使用enum来实现枚举,要求将定义常量对象,写在前面</span><br>          s1(<span class="hljs-string">&quot;春天&quot;</span>,<span class="hljs-string">&quot;温暖&quot;</span>);<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String desc;<br>    <span class="hljs-keyword">private</span> <span class="hljs-title function_">Season2</span><span class="hljs-params">(String name,String desc)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>        <span class="hljs-built_in">this</span>.desc=desc;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getDesc</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> desc;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项:<br>1.枚举对象必须放在枚举类的行首</p><h2 id="1-1enum枚举常用方法"><a href="#1-1enum枚举常用方法" class="headerlink" title="1.1enum枚举常用方法"></a>1.1enum枚举常用方法</h2><p>说明:使用关键字enum时,会隐式继承Enum类这样我们就可以使用Enum类的相关方法。<br>enum常用方法的使用:<br>1.toString:Enum类已经重写过了,返回的是当前对象名，子类可以重写该方法，用于返回对象的属性信息<br>2.name:返回当前对象名(常量名)，子类中不能重写<br>3.ordinal:返回当前对象的位置号,默认从0开始<br>4.values:返回当前枚举类的所有常量<br>5.valueOf:将字符串转换成枚举对象,要求字符串必须为已有的常量名,否则报异常<br>6.compareTo:比较两个枚举常量，比较的就是编号！！<br>举例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">EnumMethod</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-comment">//使用season2枚举类,来演示各种方法</span><br>    <span class="hljs-type">Season2</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> Season2.s1;<br>    <span class="hljs-comment">//输出枚举对象的名字</span><br>    System.out.println(s1.name());<br>    <span class="hljs-comment">//ordinal()输出的是该枚举对象的次序/编号,从0开始</span><br>    System.out.println(s1.ordinal());<br>    <span class="hljs-comment">//从反编译可以看出values方法,返回Season2[]</span><br>    <span class="hljs-comment">//含有定义的所有枚举对象</span><br>    Season2[] values = Season2.values();<br>    <span class="hljs-keyword">for</span>(Season2 season:values) &#123;<br>    System.out.println(season);<br>    &#125;<br>    <span class="hljs-comment">//valueOf</span><br>    <span class="hljs-type">Season2</span> <span class="hljs-variable">autumn1</span> <span class="hljs-operator">=</span> Season2.valueOf(<span class="hljs-string">&quot;s3&quot;</span>);<br>    System.out.println(autumn1);<br>    <span class="hljs-comment">//compareTo,比较s1和s2的编号,如果=0,则相等,&lt;0,则代表前面的编号小于后面的编号,&gt;1,则前面的编号大于后面的编号</span><br>    System.out.println(Season2.s1.compareTo(Season2.s2));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>细节:</p><ol><li>使用enum关键字后,就不能再继承其他类了,因为enum会隐式继承Enum</li><li>枚举类和普通类一样，可以实现接口<br>语法:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">enum</span> 类名 implements 接口<span class="hljs-number">1</span>，接口<span class="hljs-number">2</span>&#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h1 id="2-注解"><a href="#2-注解" class="headerlink" title="2.注解"></a>2.注解</h1><h2 id="2-1Override注解"><a href="#2-1Override注解" class="headerlink" title="2.1Override注解"></a>2.1Override注解</h2>解释:使用Annotation时要在其前面增加@符号,并把该Annotation当成一个修饰符使用,用于修饰它支持的程序元素<br>三个基本的Annotation:<br>1.@Override:限定某个方法,是重写父类方法,该注解只能用于方法<br>2.@Deprecated:用于表示某个程序元素(类,方法等)已过时<br>3.@SuppressWarnings:抑制编译器警告<h1 id="3-异常处理"><a href="#3-异常处理" class="headerlink" title="3.异常处理"></a>3.异常处理</h1>例题:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Exception01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-comment">//int res = num1/num2;</span><br>        <span class="hljs-comment">//1.当程序执行到两数相除时，程序会报错因为被除数为0,而下面的输出语句不会被执行</span><br>        <span class="hljs-comment">//2.JAVA设计者提供了一个叫异常处理机制来解决该问题</span><br>        <span class="hljs-comment">//3.如果程序员,认为一段代码可能出现异常/问题,可以使用try-catch异常处理机制来解决,从而保证程序的健壮性。</span><br>        <span class="hljs-comment">//4.如果进行异常处理,那么即使出现了异常,程序可以继续执行</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> num1/num2;<br>        &#125; <span class="hljs-keyword">catch</span> (Exceptopn e)&#123;<br>            System.out.println(e.getMessage());<br>        &#125;<br>        <br>        System.out.println(<span class="hljs-string">&quot;程序继续运行&quot;</span>);<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>概念:java将程序执行中发生的不正常情况称为”异常”;<br>执行过程中所发生的异常时间可分为两类:<br>1.Error(错误):JAVA虚拟机无法解决的严重问题,比如栈溢出,Error是严重错误,程序会崩溃<br>2.Exception:其他因变成错误或偶然的外在因素导致的一般性问题,可以使用针对性的代码进行处理比如:空指针访问,试图读取不存在的文件,网络中断等等,Exception分为两大类:运行时异常[程序运行时,发生的异常]和编译时异常[编程时,编译器检查出的异常].<br>了解异常体系图<br><img src="/../../JAVA_TP/2.png" alt="图1"><br>小结:<br>1.异常分为两大类,运行时的异常和编译时的异常<br>2.运行时异常,编译器不要求强制处置的异常,一般是指编程时的逻辑错误，是程序员应该避免其出现的异常。<br>3.对于运行时异常,可以不做处理,因为这类异常很普遍,若全处理可能会对程序的可读性和运行效率产生影响<br>4.编译时异常,是编译器要求必须处置的异常<br>五大运行时的异常:<br>1.NullPointerException:空指针异常<br>2.ArithmeticException:数学运算异常<br>3.ArraylndexOutOfBoundsException:数组下标越界异常<br>4.ClassCastException:类型转换异常<br>5.NumberFormatException:数字格式不正确异常[]<br>编译异常:<br>1.SQLException:操作数据库时,查询表可能发生异常<br>2.IOException:操作文件时,发生的异常<br>3.FileNotFoundException:当操作一个不存在的文件时,异常<br>4.ClassNotFoundException:加载类,而该类不存在时,发生异常<br>5.EOFException:操作文件,到文件末尾,发生异常<br>6.illegalArguementException:参数异常<br>异常处理:<br>定义:就是当异常发生时,对异常处理的方式<br>异常处理的方式:<br>1.try-catch-finally:程序员再代码中捕获发生的异常<br>2.throws:将发生的异常抛出,交给调用者(方法)来处理,最顶级的处理者就是JVM<br>案例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">try</span>&#123;<br>    代码/可能有异常<br>&#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>    <span class="hljs-comment">//捕获到异常</span><br>    <span class="hljs-comment">//1.当异常发生时</span><br>    <span class="hljs-comment">//2.系统将异常封装成Exception对象e,传递给catch</span><br>    <span class="hljs-comment">//3.得到异常对象后,程序员,自己处理</span><br>    <span class="hljs-comment">//4.注意:如果没有发生异常catch块时不会执行的</span><br>&#125;<span class="hljs-keyword">finally</span>&#123;<br>    <span class="hljs-comment">//1.不管try代码块是否有异常发生,始终要执行finally</span><br>    <span class="hljs-comment">//2.所以,通常将释放资源的代码,放在finally</span><br>&#125;<br></code></pre></td></tr></table></figure>Throws处理机制图:<br><img src="/../../JAVA_TP/1.jpg" alt="图1"><h2 id="3-1try-catch异常处理"><a href="#3-1try-catch异常处理" class="headerlink" title="3.1try-catch异常处理"></a>3.1try-catch异常处理</h2>案例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TryCatchDetail02</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-comment">//1.如果发生异常,则异常发生后面的代码不会执行,直接进入到catch块</span><br>        <span class="hljs-comment">//2.如果异常没有发生,则顺序执行try的代码块,不会进入到catch</span><br>        <span class="hljs-comment">//3.如果希望不管是否发生异常,都执行某段代码则可以使用finally语句块</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-type">Person</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>();<br>            person=<span class="hljs-literal">null</span>;<br>            System.out.println(person.getName());<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">n2</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> n1/n2;<br>            <span class="hljs-comment">//1.如果try代码块有可能有多个异常</span><br>            <span class="hljs-comment">//2.可以使用多个catch分别捕获不同的异常,响应处理</span><br>            <span class="hljs-comment">//3.要求子类异常写在前面,父类异常写在后面</span><br>        &#125; <span class="hljs-keyword">catch</span> (NullPointerException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;空指针异常=&quot;</span>+ e.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (ArithmeticException e)&#123;<br>            System.out.println(<span class="hljs-string">&quot;算数异常&quot;</span> + e.getMessage());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>             System.out.println(e.getMessage());<br>        &#125; <span class="hljs-keyword">finally</span>&#123;<br><br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-2throws异常"><a href="#3-2throws异常" class="headerlink" title="3.2throws异常"></a>3.2throws异常</h2>含义:<br>1.如果一个方法(中的语句执行时)可能生成某种异常,但不能确定如何处理这些异常,则此方法应显示地声明抛出异常,表明该方法将不对这些异常进行处理,而由该方法的调用者负责处理<br>2.在方法声明中用throws语句可以声明抛出异常的列表,throws后面的异常类型可以是方法中产生的异常类型,也可以是它的父类<br>例子:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Throws01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> Exception,(其他异常) &#123;<br>        <span class="hljs-comment">//创建了一个文件流对象</span><br>        <span class="hljs-comment">//1.这里的异常是一个FileNotFoundException编译异常</span><br>        <span class="hljs-comment">//2.使用前面讲过的try-catch-finally可以解决问题</span><br>        <span class="hljs-comment">//3.使用throws,抛出异常,让调用f1方法的调用者(方法)来处理</span><br>        <span class="hljs-comment">//4.throws后面的异常类型可以是方法中产生的异常类型,也可以是它的父类</span><br>        <span class="hljs-comment">//5.throws 关键字后也可以是异常列表,即可抛出多个异常</span><br>        <span class="hljs-type">FileInputStream</span> <span class="hljs-variable">fis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">FileInputStream</span>(<span class="hljs-string">&quot;d://aa.txt&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>注意事项:<br>1.对于编译异常,程序必须处理,比如try-catch或throws<br>2.对于运行时异常,程序中如果没有处理,默认就是throws的方式处理<br>3.子类重写父类的方法时,对抛出异常的规定:子类重写的方法,所抛出的异常类型要么和父类抛出的异常一致,要么为父类抛出的异常类型的子类型<br>4.在throws过程中,如果有方法try-catch,就相当于处理异常,就可以不必throws<h2 id="3-3自定义异常"><a href="#3-3自定义异常" class="headerlink" title="3.3自定义异常"></a>3.3自定义异常</h2>定义:<br>当程序中出现了某些错误,但该错误信息没有在Throwable子类中描述处理,这个时候可以自己设计异常类,用于描述该错误信息<br>步骤:<br>1.定义类:自定义异常类名(程序员自己写)继承Exception或RuntimeException<br>2.如果继承Exception则属于编译异常<br>3.如果继承RuntimeException,属于隐形异常(一般来说继承这个较多)<h2 id="3-4throw和throws的区别"><a href="#3-4throw和throws的区别" class="headerlink" title="3.4throw和throws的区别"></a>3.4throw和throws的区别</h2><table><thead><tr><th align="center"></th><th align="center">意义</th><th align="center">位置</th><th align="center">后面跟的东西</th></tr></thead><tbody><tr><td align="center">throws</td><td align="center">异常处理的一种方式</td><td align="center">发方法声明处</td><td align="center">异常类型</td></tr><tr><td align="center">throw</td><td align="center">手动生成异常对象的关键字</td><td align="center">方法体中</td><td align="center">异常对象</td></tr></tbody></table></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>7.类(静态)变量与类(静态)方法</title>
    <link href="/2022/10/25/java/7.%E7%B1%BB%E5%8F%98%E9%87%8F%E4%B8%8E%E7%B1%BB%E6%96%B9%E6%B3%95/"/>
    <url>/2022/10/25/java/7.%E7%B1%BB%E5%8F%98%E9%87%8F%E4%B8%8E%E7%B1%BB%E6%96%B9%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="类变量-静态变量"><a href="#类变量-静态变量" class="headerlink" title="类变量(静态变量)"></a>类变量(静态变量)</h1><span id="more"></span><h2 id="1-类变量-静态变量"><a href="#1-类变量-静态变量" class="headerlink" title="1.类变量(静态变量)"></a>1.类变量(静态变量)</h2><p>1.快速理解:就是一个变量被多个类共同使用<br>2.Static变量在类加载的时候就已经生成了<br>定义语法:</p><blockquote><p>访问修饰符 static 数据类型,变量名  </p></blockquote><p>如何访问静态变量:</p><blockquote><p>1.类名.类变量名(推荐)<br>2.对象名.类变量名</p></blockquote><p>案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">VisitStatic</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-comment">//类型.类变量名</span><br>        <span class="hljs-comment">//说明:类变量是随着类的加载而创建的,所以没有实例也能访问。</span><br>        System.out.println(A.name);<br>        <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">A</span>();<br>        System.out.println(a.name);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-comment">//静态变量</span><br>    <span class="hljs-comment">//静态变量的访问权限仍然要遵循相关的访问权限</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;haozi&quot;</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.类变量细节:<br>当我们让每个类都共享使用一个变量时,就可以考虑使用类变量。<br>类变量是共享的,实例变量是独有的<br>类变量的生命周期是随着类的加载开始的,随着类的消亡而销毁</p><h2 id="2-类方法-静态方法"><a href="#2-类方法-静态方法" class="headerlink" title="2.类方法(静态方法)"></a>2.类方法(静态方法)</h2><p>1.定义格式:访问修饰符 static 数据返回类型 方法名(){ }<br>2.调用方式:类名.类方法名或对象名.类方法名<br>3.案例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Stu</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">double</span> <span class="hljs-variable">fee</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Stu</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name=name;<br>    &#125;<br>    <span class="hljs-comment">//当方法使用了static修饰,那么它就是静态方法</span><br>    <span class="hljs-comment">//静态方法就可以访问静态属性/变量</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">payFee</span><span class="hljs-params">(<span class="hljs-type">double</span> fee)</span>&#123;<br>        Stu.fee+=fee;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">showFee</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(Stu.fee);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>4.类方法使用细节:<br>1.类方法和普通方法都是随着类的加载而加载,将结构信息存储在方法区,类方法中无this的参数,普通方法中隐含着this的参数<br>2.类方法(静态方法)可以通过类名调用,也可以通过对象名调用<br>3.类方法中不允许使用对象有关的关键字,比如this和super……<br>5.类方法中只能访问静态变量或静态方法<br>6.普通成员方法既可以访问普通变量&#x2F;方法,也可以访问静态变量&#x2F;方法<br>小结:静态方法只能访问静态的成员,非静态的方法,可以访问静态成员和非静态成员必须遵守访问权限</p><h2 id="3-代码块"><a href="#3-代码块" class="headerlink" title="3.代码块"></a>3.代码块</h2><p>1.理解:相当于对构造器的补充机制,可以做初始化操作<br>2.使用场景:多个构造器中都有重复的语句,可以放到构造器中<br>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Movie</span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> price;<br>    <span class="hljs-keyword">private</span> String director;<br>&#125;<br><span class="hljs-comment">//代码块</span><br><span class="hljs-comment">//1.下面的若干构造器都有相同的语句</span><br><span class="hljs-comment">//2.我们把相同的语句放到代码块中</span><br><span class="hljs-comment">//3.不管调用哪个构造器,创建对象,都会先调用代码块的内容</span><br>&#123;<br>    System.out.println(<span class="hljs-string">&quot;电影屏幕打开……&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;广告开始……&quot;</span>);<br>    System.out.println(<span class="hljs-string">&quot;电影正式开始……&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(String name)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Movie</span><span class="hljs-params">(String name,<span class="hljs-type">double</span> price)</span>&#123;<br>    ......<br>&#125;<br></code></pre></td></tr></table></figure><p>注意事项:<br>1.static代码块也叫静态代码块，而且随着类的加载而执行，并且只会执行一次，如果是普通代码块，每创建一个对象，就执行。<br>2.类在什么时候被加载</p><blockquote><p>1.创建对象实例时(new)<br>2.创建子类对象实例,父类也会被加载<br>3.使用类的静态成员时(静态属性，静态方法)<br>4.static代码块是类加载时,执行的,只会执行一次<br>5.普通代码块是在创建对象时调用的,创建一次,调用一次</p></blockquote><p>调用顺序注意事项:</p><blockquote><p>1.调用静态代码块和静态属性初始化(静态代码块和静态属性初始化调用的优先级一样,吐过有多个,则按照它们的定义顺序调用)<br>2.调用普通代码块和普通属性的初始化(优先级一样,按照定义顺序调用)<br>3.最后调用构造方法<br>4.构造器的前面隐含了super()和普通代码块,调用顺序为super()、普通代码块、构造器</p></blockquote><p>子类继承关系代码块调用顺序:</p><blockquote><p>1.父类的静态代码块和静态属性(优先级一样,按定义顺序执行)<br>2.子类的静态代码块和静态属性(优先级一样,按定义顺序执行)<br>3.父类的普通代码块和普通属性初始化(优先级一样,按定义顺序执行)<br>4.父类的构造方法<br>5.子类的普通代码块和普通属性初始化(优先级一样,按定义顺序执行)<br>6.子类的构造方法</p></blockquote><h2 id="4-final关键字"><a href="#4-final关键字" class="headerlink" title="4.final关键字"></a>4.final关键字</h2><p>使用场景:</p><blockquote><p>1.当不希望被继承时,可以用final修饰<br>2.当不希望父类的某个方法被子类覆盖&#x2F;重写<br>3.当不希望类的某个属性值被修改可以用final修饰<br>4.当不希望某个局部变量被修改,可以用final修饰</p></blockquote><p>赋值方式:</p><blockquote><p>1.可以在定义时赋值<br>2.可以在构造器中赋值<br>3.可以在代码块中赋值</p></blockquote><p>如果final修饰的属性是静态的,则初始化的位置只能是:</p><blockquote><p>1.定义时<br>2.在静态代码块中,不能在构造器中赋值</p></blockquote><h2 id="5-抽象类"><a href="#5-抽象类" class="headerlink" title="5.抽象类"></a>5.抽象类</h2><p> 定义:当父类的某些方法,需要声明,但是有不确定如何实现,可以声明为抽象方法,那么这个类就是抽象类。所谓抽象方法就是没有实现的方法体,实现就是指,没有方法体<br> 案例:<br> <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//关键字abstract修饰的类称为抽象类</span><br><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    ……<br>&#125;<br><span class="hljs-comment">//例如:</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    String color;<br>    String <span class="hljs-title function_">getColor</span><span class="hljs-params">()</span>&#123;<span class="hljs-comment">//成员方法</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">this</span>.color;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getArea</span><span class="hljs-params">()</span>;<span class="hljs-comment">//抽象方法</span><br>&#125;<br></code></pre></td></tr></table></figure><br>抽象类细节:<br>1.抽象类不能实例化<br>2.抽象类不一定要包含abstract方法<br>3.一但包含了abstract方法,那么这个类必须声明为抽象类<br>4.abstract只能修饰类和方法<br>5.如果一个类继承了抽象类则它必须实现抽象类的所有抽象方法,除非它自己也声明为abstract类<br>6.抽象方法不能使用private final static 修饰,因为这些关键字都是和重写相违背的<br>例子2:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">class</span>  <span class="hljs-title class_">VolumeArea</span>&#123;<br><span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">volume</span><span class="hljs-params">(<span class="hljs-type">double</span> r)</span>;<br><span class="hljs-keyword">abstract</span> <span class="hljs-type">double</span> <span class="hljs-title function_">area</span><span class="hljs-params">(<span class="hljs-type">double</span> r)</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">VolumeAndArea</span> <span class="hljs-keyword">extends</span>  <span class="hljs-title class_">VolumeArea</span>  &#123;<br><span class="hljs-type">double</span> <span class="hljs-title function_">volume</span><span class="hljs-params">(<span class="hljs-type">double</span> r)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">4</span>/<span class="hljs-number">3</span>*<span class="hljs-number">3.14</span>*r*r*r;<br>&#125;<br><span class="hljs-type">double</span> <span class="hljs-title function_">area</span> <span class="hljs-params">(<span class="hljs-type">double</span> r)</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">3.14</span>*r*r;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ktlx</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">VolumeAndArea</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">VolumeAndArea</span>();<br>System.out.println(x.area(<span class="hljs-number">2.5</span>));<br>System.out.println(x.volume(<span class="hljs-number">2.5</span>));<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="6-接口"><a href="#6-接口" class="headerlink" title="6.接口"></a>6.接口</h2><p>定义:接口就是给出一些没有实现的方法,封装到一起,到某个类要使用的时候,再根据具体情况把这些方法写出来。<br>语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">interface 接口名&#123;<br>    <span class="hljs-comment">//属性</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">final</span> <span class="hljs-variable">x</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-comment">//方法</span><br>    <span class="hljs-comment">//在接口中,抽象方法可以省略abstract关键字</span><br>    <span class="hljs-comment">//方法体可以有实现方式,需要default关键字修饰</span><br>    <span class="hljs-keyword">default</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ok</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;OKK&quot;</span>);<br>    &#125;<br>    <span class="hljs-comment">//静态方法</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;cry....&quot;</span>);<br>    &#125;<br>&#125;<br>class 类名 implements 接口&#123;<br>    自己属性；<br>    自己方法；<br>    必须实现接口的抽象方法；<br>&#125;<br></code></pre></td></tr></table></figure><p>小结:Jdk8.0后接口类可以有静态方法、默认方法、也就是说接口中可以有方法的具体实现。<br>接口细节:<br>1.接口不能被实例化<br>2.接口中所有的方法是public方法<br>3.抽象类实现接口，可以不用实现接口的方法<br>4.一个类可以继承多个接口<br>5.接口中的属性只能是final的而且是public static final修饰符<br>6.接口中属性的访问形式:接口名.属性名<br>7.接口的修饰符只能是public和默认<br>8.当子类继承了父类,就自动拥有了父类的功能,如果子类需要扩展功能,可以通过实现接口的方式来扩展</p><h2 id="7-接口的多态特性"><a href="#7-接口的多态特性" class="headerlink" title="7.接口的多态特性"></a>7.接口的多态特性</h2><p>1.多态参数<br>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Usb</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Camera</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Usb</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是相机,我开始工作&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是相机,我停止工作&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Phone</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Usb</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">start</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是手机,我开始工作&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">stop</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;我是手机,我停止工作&quot;</span>);<br>    &#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Computer</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">working</span><span class="hljs-params">(Usb usb)</span>&#123;<br>        usb.start();<br>        usb.stop();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span>  <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Camera</span> <span class="hljs-variable">c</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Camera</span>();<br>        <span class="hljs-type">Phone</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Phone</span>();<br>        <span class="hljs-type">Computer</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Computer</span>();<br>        c1.working(Phone);<br>    &#125;<br>&#125;<br>&#125;<br>&#125;<br><span class="hljs-comment">//Usb usb形参是接口类型usb</span><br><span class="hljs-comment">//看到接收实现了usb接口的类的对象实例</span><br></code></pre></td></tr></table></figure><p>2.多态数组<br>3.接口的多态传递</p><h2 id="8-内部类"><a href="#8-内部类" class="headerlink" title="8.内部类"></a>8.内部类</h2><p>基本介绍:一个类的内部又完整的嵌套了另一个类结构,被嵌套的称为内部类,是我们类的五大成员(属性、方法、构造方法、代码块、内部类)<br>特点:可以直接访问私有属性并且可以体现类与类之间的包含关系<br>语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outer</span>&#123;  <span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Inner</span>&#123;   <span class="hljs-comment">//内部类</span><br><br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Other</span>&#123;    <span class="hljs-comment">//外部其他类</span><br><br>&#125;<br></code></pre></td></tr></table></figure><p>内部类的分类:<br>定义在外部类局部位置上(比如方法内):<br>1.局部内部类(有类名)<br>2.匿名内部类(没有类名,重点)<br>定义在外部类的成员位置上:<br>1.成员内部类(没用static修饰)<br>2.静态内部类(使用static修饰)</p><p>局部内部类的使用:<br>说明:局部内部类是定义在外部类的局部位置,比如方法中,并且有类名<br>1.可以直接访问外部类的所有成员,包含私有的<br>2.不能添加访问修饰符,因为它的地位就是一个局部变量,局部变量是不能使用修饰符的,但是可以使用final修饰(加了就不能被继承)<br>3.作用域:仅仅在定义它的方法或代码块中<br>4.局部内部类访问外部类的成员访问方式是直接访问<br>5.外部类访问局部内部类的成员访问方式是:创建对象,再访问(注意,必须在作用域内)<br>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">package</span> jbnbl;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test1</span> &#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span> &#123;<br><span class="hljs-type">Other01</span> <span class="hljs-variable">o1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Other01</span>();<br>o1.say();<br>&#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Other01</span>&#123;  <span class="hljs-comment">//外部类</span><br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m2</span><span class="hljs-params">()</span> &#123;<br>System.out.println(<span class="hljs-string">&quot;m2的私有方法&quot;</span>);<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span>  <span class="hljs-title function_">say</span><span class="hljs-params">()</span> &#123;  <span class="hljs-comment">//方法</span><br>System.out.println(<span class="hljs-string">&quot;Say&quot;</span>);<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">inner01</span>&#123;   <span class="hljs-comment">//内部类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span> &#123;  <br>System.out.println(i);<br>m2();<br>&#125;<br>&#125;<br><span class="hljs-comment">//外部类访问内部类需要实例化对象再调用方法</span><br><span class="hljs-type">inner01</span> <span class="hljs-variable">i1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">inner01</span>();<br>i1.f1();<br>&#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><p>6.外部其他类不能访问局部内部类<br>7.如果外部类和局部内部类的成员重名时，默认遵循就近原则,如果想访问外部类的成员,则可以使用(外部类型.this.成员)去访问</p><h2 id="9-匿名内部类"><a href="#9-匿名内部类" class="headerlink" title="9.匿名内部类"></a>9.匿名内部类</h2><p>说明:匿名内部类是定义在外部类的局部位置,比如方法中,并且没有类名<br>1.语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">new</span> 类或接口(参数列表)&#123;<br>    类体<br>&#125;;<br><span class="hljs-comment">//1.本质是类</span><br><span class="hljs-comment">//2.内部类</span><br><span class="hljs-comment">//3.该类没有名字</span><br><span class="hljs-comment">//4.同时还是一个对象</span><br></code></pre></td></tr></table></figure><p>2.实现案例(基于接口的):</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Outher04</span> <span class="hljs-variable">outher04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outher04</span>();<br>        outher04.method();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outher04</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//需求:使用IA接口,并创建对象</span><br>        <span class="hljs-comment">//传统方式:写一个类,实现接口,并创建对象</span><br>        <span class="hljs-comment">//新需求:Tiger类只是使用一次,后面不再使用</span><br>        <span class="hljs-comment">//解决:可以使用匿名内部类来简化开发</span><br>        <span class="hljs-comment">//new 实现的接口名</span><br>        <span class="hljs-type">IA</span> <span class="hljs-variable">tiger</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">IA</span>()&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;老虎叫唤&quot;</span>);<br>            &#125;<br>        &#125;;<br>        tiger.cry();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">IA</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">cry</span><span class="hljs-params">()</span>;<br>&#125;<br></code></pre></td></tr></table></figure><p>3.实现案例(基于类的)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test2</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Outher04</span> <span class="hljs-variable">outher04</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outher04</span>();<br>        outher04.method();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outher04</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">method</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//演示基于类的匿名内部类</span><br>        <span class="hljs-comment">//1.father的编译类型为father</span><br>        <span class="hljs-comment">//2.father的运行类型为匿名内部类</span><br>        <span class="hljs-type">Father</span> <span class="hljs-variable">father</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Father</span>(<span class="hljs-string">&quot;jack&quot;</span>)&#123;<br>            <span class="hljs-comment">//匿名内部类可以直接访问外部类的所有成员,包含私有的</span><br>            <span class="hljs-comment">//外部其他类不能访问匿名内部类</span><br>            <span class="hljs-comment">//如果外部类和匿名内部类的成员重名时,内部类访问的话,默认遵守就近原则,如果想访问外部类的成员,则可以使用(外部类名.this.成员)去访问</span><br>            <span class="hljs-comment">//注意:jack参数列表会传递给构造器</span><br>            <span class="hljs-comment">//class 匿名内部类 extends father</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;匿名内部类重写了test方法&quot;</span>);<br>            &#125;<br>        &#125;;<br>        father.test();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Father</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Father</span><span class="hljs-params">(String name)</span>&#123;<br><br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">()</span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>匿名内部类实践:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">/*</span><br><span class="hljs-comment">1.有一个铃声接口Bell,里面有一个ring方法</span><br><span class="hljs-comment">2.有一个手机类Cellphone,具有闹钟功能alarmclock,参数是Bell类型</span><br><span class="hljs-comment">3.测试手机类的闹钟功能,通过匿名内部类(对象)作为参数,打印:懒猪起床了</span><br><span class="hljs-comment">4.过匿名内部类(对象)作为参数,打印:小伙伴们上课了</span><br><span class="hljs-comment">*/</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test3</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Cellphone</span> <span class="hljs-variable">cellphone</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Cellphone</span>();<br>        cellphone.alarmclock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>()&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;懒猪起床了&quot;</span>);<br>            &#125;<br>        &#125;);<br>        cellphone.alarmclock(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Bell</span>()&#123;<br>            <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span>&#123;<br>                System.out.println(<span class="hljs-string">&quot;小伙伴们上课了&quot;</span>);<br>            &#125;<br>        &#125;);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">interface</span> <span class="hljs-title class_">Bell</span>&#123;<br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">ring</span><span class="hljs-params">()</span>;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Cellphone</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">alarmclock</span><span class="hljs-params">(Bell bell)</span>&#123;<br>        bell.ring();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="10-成员内部类"><a href="#10-成员内部类" class="headerlink" title="10.成员内部类"></a>10.成员内部类</h2><p>说明:成员内部类是定义在外部类的成员位置，并且没有static修饰。</p><ol><li>可以直接访问外部类的所有成员包含所有的</li><li>可以添加任意的访问修饰符因为它的地位就是一个成员<br>例子:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test3</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Outher05</span> <span class="hljs-variable">o5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outher05</span>();<br>        o5.t1();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outher05</span>&#123;<span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-comment">//注意:成员内部类是定义在外部类的成员位置上</span><br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Innter05</span>&#123;<span class="hljs-comment">//成员内部类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>            System.out.println&#123;n+name&#125;;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">t1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-comment">//使用成员内部类方法:</span><br>        <span class="hljs-type">Innter05</span> <span class="hljs-variable">i5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Innter05</span>();<br>        i5.say();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>细节:</li><li>作用域:和外部类的其他成员一样,为整个类体，比如前面案例，在外部类的成员方法中创建成员内部类对象，再调用方法。</li><li>成员内部类访问外部类是直接访问</li><li>外部类访问成员内部类访问方式是创建对象再访问</li><li>外部其他类使用成员内部类的三种方式<br>案例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test3</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Outher05</span> <span class="hljs-variable">o5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outher05</span>();<br>        o5.t1();<br>        <span class="hljs-comment">//第一种方式:</span><br>        Outher05.<span class="hljs-type">Innter05</span> <span class="hljs-variable">innter05</span> <span class="hljs-operator">=</span> Outer05.<span class="hljs-keyword">new</span> <span class="hljs-title class_">Innter05</span>();<br>        innter05.say();<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Outher05</span>&#123;<span class="hljs-comment">//外部类</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;张三&quot;</span>;<br>    <span class="hljs-keyword">class</span> <span class="hljs-title class_">Innter05</span>&#123;<span class="hljs-comment">//成员内部类</span><br>        <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>            System.out.println&#123;n+name&#125;;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">t1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">Innter05</span> <span class="hljs-variable">i5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Innter05</span>();<br>        i5.say();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure></li><li>如果外部类和内部类的成员重名时，内部类访问的话，默认遵循就近原则，如果想访问外部类的成员，则可以使用(外部类型.this.成员)去访问<h2 id="11-静态内部类"><a href="#11-静态内部类" class="headerlink" title="11.静态内部类"></a>11.静态内部类</h2>说明:静态内部类是定义在外部类的成员位置,并且有static修饰</li><li>可以直接访问外部类的所有静态成员，包含私有的，但不能直接访问非静态成员</li><li>可以添加任意访问修饰符,因为它的地位就是一个成员</li><li>作用域:同其他的成员，为整个类体</li><li>外部类访问静态内部类访问方式为创建对象再访问</li><li>外部其他类访问静态内部类<br>实现方法:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs JAVA">Outher10.<span class="hljs-type">Inner10</span> <span class="hljs-variable">inner10</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Outher10</span>.Inner10();<br>inner10.say();<br></code></pre></td></tr></table></figure></li><li>如果外部类和静态内部类的成员重名时，静态内部类访问的话,默认遵循就近原则，如果想访问外部类的成员,则可以使用(外部类名.成员)去访问。</li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>6.程序调试</title>
    <link href="/2022/10/06/java/6.%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95/"/>
    <url>/2022/10/06/java/6.%E7%A8%8B%E5%BA%8F%E8%B0%83%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h1 id="程序调试"><a href="#程序调试" class="headerlink" title="程序调试"></a>程序调试</h1><span id="more"></span><h1 id="Eclipse程序调试步骤"><a href="#Eclipse程序调试步骤" class="headerlink" title="Eclipse程序调试步骤"></a>Eclipse程序调试步骤</h1><ol><li>添加断点((知道哪里错了)错误行、(不知道哪里错了)第一行)，在代码行数的前面点击</li><li>debug模式运行(Debug As)</li><li>通过快捷键或点击调试<blockquote><p>F6:单步跟踪，每次执行一行<br>F5:进入方法内部跟踪<br>F8:执行到下一个断点、执行结束</p></blockquote></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>5.包,面对对象的三要素</title>
    <link href="/2022/09/29/java/5.%E5%8C%85/"/>
    <url>/2022/09/29/java/5.%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="包"><a href="#包" class="headerlink" title="包"></a>包</h1><span id="more"></span><h2 id="1-命名规则"><a href="#1-命名规则" class="headerlink" title="1.命名规则"></a>1.命名规则</h2><p>只能包含数字、字母、下划线、小圆点、但是不能用数字开头，不能是关键字和保留字</p><h2 id="2-命名规范"><a href="#2-命名规范" class="headerlink" title="2.命名规范"></a>2.命名规范</h2><p>一般是小写字母+小圆点<br>一般是 com.公司名.项目名.业务模块名<br>比如:<br>com.sina.crm.user&#x2F;&#x2F;用户模块<br>com.sima.crm.order&#x2F;&#x2F;订单模块<br>com.sina.crm.utils&#x2F;&#x2F;工具类</p><h2 id="3-常用的包"><a href="#3-常用的包" class="headerlink" title="3.常用的包"></a>3.常用的包</h2><p>1.java.lang.*  &#x2F;&#x2F;lang包是基础包,默认引入,不需要在引入<br>2.java.util.*  &#x2F;&#x2F;util包，系统提供的工具包，工具类，使用Scanner<br>3.java.net.*   &#x2F;&#x2F;net包，网络包，网络开发<br>4.java.awt.*   &#x2F;&#x2F;是做java的界面开发,GUI<br>例:用Arrays给数组排序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Import01</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">int</span> [] arr = &#123;-<span class="hljs-number">1</span>,<span class="hljs-number">20</span>,<span class="hljs-number">2</span>,<span class="hljs-number">13</span>,<span class="hljs-number">3</span>&#125;;<br>        Arrays.sort(arr);<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;arr.length;i++)&#123;<br>            System.out.print(arr[i]+<span class="hljs-string">&quot;\t&quot;</span>)<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-访问修饰符"><a href="#4-访问修饰符" class="headerlink" title="4.访问修饰符"></a>4.访问修饰符</h2><p>用来控制方法和属性(成员变量)的访问权限(范围)<br>1.公开级别:用public修饰,对外公开<br>2.受保护级别:用protected修饰,对子类和同一个包中的类公开<br>3.默认级别:没有修饰符号,向同一个包的类公开<br>4.私有级别:用private修饰,只有类本身可以访问,不对外公开</p><table><thead><tr><th align="center">访问级别</th><th align="center">访问控制</th><th align="center">本类</th><th align="center">同包</th><th align="center">子类(继承)</th><th align="center">不同包</th></tr></thead><tbody><tr><td align="center">公开</td><td align="center">public</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">√</td></tr><tr><td align="center">受保护</td><td align="center">protected</td><td align="center">√</td><td align="center">√</td><td align="center">√</td><td align="center">×</td></tr><tr><td align="center">默认</td><td align="center">没有修饰符</td><td align="center">√</td><td align="center">√</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">私有</td><td align="center">private</td><td align="center">√</td><td align="center">×</td><td align="center">×</td><td align="center">×</td></tr><tr><td align="center">注意事项:</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">1.修饰符可以用来修饰类中的属性，成员方法以及类</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">2.只有默认的和public才能修饰类！</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr><tr><td align="center">3.成员方法的访问规则和属性完全一样。</td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table><h2 id="5-面向对象编程三大特征-封装"><a href="#5-面向对象编程三大特征-封装" class="headerlink" title="5.面向对象编程三大特征-封装"></a>5.面向对象编程三大特征-封装</h2><ol><li>定义:把抽象出来的数据(属性)和对数据的操作(方法)封装在一起，数据被保护在内部，程序的其他部分只有同伙被授权的操作(方法)，才能对数据进行操作。<br>封装的好处:隐藏实现细节</li><li>封装的实现步骤:<br>1.将属性进行私有化private[不能直接修改属性]<br>2.提供一个公共的set方法，用于对属性判断并赋值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> Set <span class="hljs-title function_">Xxx</span><span class="hljs-params">(类型 参数名)</span>&#123;<br>    属性=参数名；<br>&#125;<br></code></pre></td></tr></table></figure>3.提供一个公共的get方法，用于获取属性的值<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> 数据类型 get <span class="hljs-title function_">Xxx</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> xx;<br>&#125;<br></code></pre></td></tr></table></figure>简而言之:封装就是利用get和set方法对传入的值可以加以判断，如果自己写了构造方法，则会绕过get和set方法，不能判断，所以可以这样写构造方法.<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>    setName(name);<br>    SetAge(age);<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-面向对象编程三大特征-继承"><a href="#5-面向对象编程三大特征-继承" class="headerlink" title="5.面向对象编程三大特征-继承"></a>5.面向对象编程三大特征-继承</h2>主要解决了两个类中的方法有很多是相同的。<br>关键字:extends<br>语法:class 子类 extends 父类。<br>继承的细节:</li><li>子类继承了所有父类的属性和方法，但是私有属性和方法不能在子类直接访问，要通过公共的方法区访问。</li><li>当创建子类的对象时，不管使用子类的哪个构造器，默认情况下总会调用父类的无参构造器，如果父类没有提供无参构造器，则必须在子类的构造器中用super去指定使用父类的哪个构造器完成对父类的初始化工作，否则编译错误。</li><li>如果希望指定去调用父类的某个构造器，则显式的调用一下:super(参数列表)。</li><li>super()和this()都只能在构造器第一行，因此这两个方法不能共存在一个构造器。<h3 id="super关键字"><a href="#super关键字" class="headerlink" title="super关键字"></a>super关键字</h3></li><li>定义:super代表父类的引用，用于访问父类的属性、方法、构造器</li><li>当子类中有和父类中的成员(属性和方法),重名时，必须通过super+方法名。如果没有重名，则可以用this+方法名和super+方法名或直接访问是一个效果。注意:super可以跳过本类直接去找父类，如果本类有和父类一样的方法，则执行父类的方法。总而言之:子类和父类有一样的方法则系统会优先使用子类的，this和直接访问方式，如果使用了super+方法名则去访问父类的方法。<h2 id="6-方法重写"><a href="#6-方法重写" class="headerlink" title="6.方法重写"></a>6.方法重写</h2><table><thead><tr><th align="center">名称</th><th align="center">发生范围</th><th align="center">方法名</th><th align="center">形参列表</th><th align="center">返回类型</th><th align="center">修饰符</th></tr></thead><tbody><tr><td align="center">重载</td><td align="center">本类</td><td align="center">必须一样</td><td align="center">类型，个数或者顺序至少有一个不同</td><td align="center">无要求</td><td align="center">无要求</td></tr><tr><td align="center">重写</td><td align="center">父子类</td><td align="center">必须一样</td><td align="center">相同</td><td align="center">子类重写的方法返回的类型和父类返回的类型一致，或是其子类</td><td align="center">子类方法不能缩小父类方法的使用范围</td></tr></tbody></table><h2 id="7-面向对象编程三大特征-多态"><a href="#7-面向对象编程三大特征-多态" class="headerlink" title="7.面向对象编程三大特征-多态"></a>7.面向对象编程三大特征-多态</h2>多态&#x3D;多种状态<br>方法的多态:重写和重载就能体现多态<br>JAVA中的多态主要表现为方法的多态,主要是方法重载和方法重写的表现.<br>方法重载实现的是静态多态性,又称编译多态,在编译阶段确定调用哪个重载方法<br>方法重写实现的是动态的多态性,又称运行多态,在运行阶段确定调用哪个重载的方法<br>JAVA中方法的重载包括成员方法和构造方法的重载<br>对象的多态:</li><li>一个对电工的编译类型和运行类型可以不一致</li><li>编译类型在定义对象时，就确定了，不能改变</li><li>运行类型是可以变化的</li><li>编译类型看定义时 &#x3D; 号的左边，运行类型看 &#x3D; 号的右边<br>例:<br>Animal animal &#x3D; new Dog();<br>&#x2F;&#x2F;animal编译类型是Animal，运行类型Dog;<br>animal &#x3D; new Cat();<br>&#x2F;&#x2F;animal的运行类型编程了cat，但编译类型还是Animal;<h3 id="向上转型"><a href="#向上转型" class="headerlink" title="向上转型:"></a>向上转型:</h3>多态的前提是:两个对象(类)存在继承关系<br>多态的向上转型</li><li>本质:父类的引用指向了子类的对象</li><li>语法:父类类型 引用名 &#x3D; new 子类类型();</li><li>特点1:编译类型看左边，运行类型看右边</li><li>特点2:可以调用父类中的所有成员(遵守访问权限)</li><li>特点3:不能调用子类中的特有成员,最终运行效果看子类的具体实现。<br>例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;动物&quot;</span>;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sleep</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;睡&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;跑&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;吃&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello,你好&quot;</span>);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">cat</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Animal</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">eat</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫吃鱼&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">catchMouse</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;猫抓老鼠&quot;</span>);<br>    &#125;<br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Animal</span> <span class="hljs-variable">animal</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">cat</span>();<span class="hljs-comment">//向上转型。</span><br>        animal.xxx;<span class="hljs-comment">//可以调用父类的所有方法(遵守访问权限),不能调用cat的catchMouse方法。</span><br>        <span class="hljs-comment">//不能调用子类的特有成员.(向下转型可以解决)</span><br>        <span class="hljs-comment">//因为在编译阶段，能调用哪些成员，是由编译类型决定的。</span><br>        animal.eat();<span class="hljs-comment">//输出猫吃鱼</span><br>         <span class="hljs-comment">//因为运行时,执行到该行时,animal运行类时cat,所以eat就是cat的eat</span><br>        animal.run();<span class="hljs-comment">//输出跑</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="向下转型"><a href="#向下转型" class="headerlink" title="向下转型:"></a>向下转型:</h3></li><li>语法:子类类型 引用名 &#x3D; (子类类型) 父类引用;</li><li>只能强转父类的引用,不能强转父类的对象</li><li>要求父类的引用必须指向的是当前目标类型的对象</li><li>当向下转型后可以调用子类类型中所有的成员<br>例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//上例中的animal.catchMouse调用报错，可以用向下转型。</span><br><span class="hljs-comment">//语法:子类类型 引用名 = (子类类型) 父类引用;</span><br><span class="hljs-type">Cat</span> <span class="hljs-variable">cat</span> <span class="hljs-operator">=</span> (Cat) animal;<span class="hljs-comment">//编译类型是cat,运行类型是cat。</span><br>cat.catchMouse();<span class="hljs-comment">//即可调用。</span><br></code></pre></td></tr></table></figure>小细节:</li><li>属性没有重写之说!属性的值看编译类型。</li><li>instanceOf比较操作符,用于判断对象的运行类型是否为XX类型或XX类型的子类型。<br>例子:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Base</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Sub</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Base</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">display</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-built_in">this</span>.count);<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">Sub</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Sub</span>();<span class="hljs-comment">//注意运行类型和编译类型，运行类型为Sub，编译类型为 Sub.</span><br>        System.out.println(s.count);<br>        s.display();<br>        <span class="hljs-type">Base</span> <span class="hljs-variable">b</span> <span class="hljs-operator">=</span> s;<br>        System.out.println(b==s);<br>        System.out.println(b.count);<br>        b.display();   <span class="hljs-comment">//注意运行类型和编译类型，运行类型为Sub，编译类型为 Base.</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">/*输出结果为:</span><br><span class="hljs-comment">    20</span><br><span class="hljs-comment">    20</span><br><span class="hljs-comment">    True</span><br><span class="hljs-comment">    10</span><br><span class="hljs-comment">    20</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure><h2 id="8-JAVA动态绑定机制"><a href="#8-JAVA动态绑定机制" class="headerlink" title="8.JAVA动态绑定机制"></a>8.JAVA动态绑定机制</h2></li><li>当调用对象方法的时候，该方法会和该对象的内存地址&#x2F;运行类型绑定</li><li>当调用对象属性时，没有动态绑定机制，哪里声明，哪里使用<br>例:<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">10</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> geti()+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">geti</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">B</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">A</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">20</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i + <span class="hljs-number">20</span>;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">geti</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum1</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> i+<span class="hljs-number">10</span>;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>    <span class="hljs-type">A</span> <span class="hljs-variable">a</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">B</span>();<br>    <span class="hljs-comment">//编译看左边，运行看右边</span><br>    <span class="hljs-comment">//a的编译类型A 运行类型B</span><br>    <span class="hljs-comment">//即调用的方法先看运行类型中有没有</span><br>    System.out.println(a.sum());  <span class="hljs-comment">//40</span><br>    System.out.println(a.sum1());   <span class="hljs-comment">//30</span><br>    <span class="hljs-comment">//如果把子类的sum方法注释，注意geti获得的值(调用的是子类的geti)，此例中获得的是子类的geti的值，所以父类的sum方法为20+10=30。</span><br>    <span class="hljs-comment">/*</span><br><span class="hljs-comment">    如果把B类的sum1方法注释，则执行父类的sum1方法，此时i的值为父类i的值，因为属性没有动态绑定机制。</span><br><span class="hljs-comment">    */</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="9-多态数组"><a href="#9-多态数组" class="headerlink" title="9.多态数组"></a>9.多态数组</h2>定义:数组的定义类型为父类型，里面保存的实际元素类型为子类类型。<br>例:现有一个继承结构如下,要求创建一个Person对象、2个Student对象和2个Teacher对象,统一放在数组中，并调用每个对象say方法。<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br><span class="hljs-keyword">private</span> String name;<br><span class="hljs-keyword">private</span> <span class="hljs-type">int</span> age;<br><span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name;<br>    <span class="hljs-built_in">this</span>.age=age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name;<br>&#125;<br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> name;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAge</span><span class="hljs-params">(<span class="hljs-type">int</span> age)</span>&#123;<br>    <span class="hljs-built_in">this</span>.age=age;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAge</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> age;<br>&#125;<br><span class="hljs-keyword">public</span> String  <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> name + <span class="hljs-string">&quot;\t&quot;</span> + age;<br>&#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Student</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> score;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Student</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age,<span class="hljs-type">double</span> score)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name,age);<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setScore</span><span class="hljs-params">(<span class="hljs-type">double</span> score)</span>&#123;<br>        <span class="hljs-built_in">this</span>.score = score;<br>    &#125;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getScore</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> score;<br>    &#125;<br>    <span class="hljs-comment">//重写父类的say方法</span><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.say()+ <span class="hljs-string">&quot;score=&quot;</span>+score;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Teacher</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Person</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">double</span> salary;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Teacher</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age,<span class="hljs-type">double</span> salary)</span>&#123;<br>        <span class="hljs-built_in">super</span>(name,age);<br>        <span class="hljs-built_in">this</span>.salary=salary;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setSalary</span><span class="hljs-params">(<span class="hljs-type">double</span> salary)</span>&#123;<br>        <span class="hljs-built_in">this</span>.salary=salary;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">getSalary</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> salary;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//重写父类的say方法</span><br><span class="hljs-keyword">public</span> String <span class="hljs-title function_">say</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">super</span>.say() + <span class="hljs-string">&quot;salary&quot;</span> + salary;<br>&#125;<br><span class="hljs-comment">//主方法</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String [] args)</span>&#123;<br>    Person[] persons = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>[<span class="hljs-number">5</span>];<br>    persons[<span class="hljs-number">0</span>] =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Person</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">20</span>);<br>    persons[<span class="hljs-number">1</span>] =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">100</span>);<br>    persons[<span class="hljs-number">2</span>] =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;jack&quot;</span>,<span class="hljs-number">20</span>,<span class="hljs-number">30</span>);<br>    persons[<span class="hljs-number">3</span>] =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;haozi&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-number">20000</span>);<br>    persons[<span class="hljs-number">3</span>] =  <span class="hljs-keyword">new</span> <span class="hljs-title class_">Teacher</span>(<span class="hljs-string">&quot;haozi&quot;</span>,<span class="hljs-number">30</span>,<span class="hljs-number">40000</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt;persons.length;i++)&#123;<br>        <span class="hljs-comment">//person[i]的编译类型是Person,运行类型是Perosn、Student、Teacher。</span><br>        System.out.println(persons[i].say());<span class="hljs-comment">//动态绑定</span><br>    &#125;<br>&#125;<br><span class="hljs-comment">//升级:如果Teacher和Student类中都有一个自己的方法，则可以用向下转型。</span><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">if(persons[i] instanceof Student)&#123;</span><br><span class="hljs-comment">    Student student = (Student)person[i]//向下转型</span><br><span class="hljs-comment">    student.study();</span><br><span class="hljs-comment">    //一条语句执行:((Student)persons[i]).study;</span><br><span class="hljs-comment">&#125;else if(persons[i] instanceof Teacher)&#123;</span><br><span class="hljs-comment">    ......</span><br><span class="hljs-comment">&#125;</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>扩展:&#x3D;&#x3D;和equals的对比</li><li>&#x3D;&#x3D;:既可以判断基本类型,又可以判断引用类型</li><li>&#x3D;&#x3D;:如果判断及基本类型，判断的是值是否相等</li><li>&#x3D;&#x3D;:如果判断引用类型，判断的是地址是否相等，即判定是不是同一个对象<br>equals方法(只能判断引用类型)</li><li>默认判断的是地址是否相等，子类中往往重写该方法，用来判断内容是否相等，比如Integer,String</li></ol><p>hashCode方法(后面会具体讲)</p><ol><li>提高具有哈希结构的容器效率</li><li>两个引用，如果指向的是同一个对象，则哈希值肯定是一样的，否则哈希值是不一样的</li><li>哈希值主要是根据地址号来的，不能完全将哈希值等价于地址<br>toString方法:返回该对象的字符串表示</li><li>默认返回:全类名+@+哈希值的十六进制</li><li>重写toString方法，打印对象或拼接对象时，都会调用该对象的toString形式</li><li>直接输出一个对象时,toString方法会被默认调用</li></ol><p>Finalize方法</p><ol><li>当对象被回收时，系统会自动调用该对象的finalize方法。子类可以重写该方法，释放资源</li><li>垃圾回收机制的调用，是由系统来决定，也可以通过System.gc()主动触发垃圾回收机制</li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>4.类与对象</title>
    <link href="/2022/09/10/java/4.%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/"/>
    <url>/2022/09/10/java/4.%E7%B1%BB%E4%B8%8E%E5%AF%B9%E8%B1%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="类与对象"><a href="#类与对象" class="headerlink" title="类与对象"></a>类与对象</h1><span id="more"></span><h2 id="1-类"><a href="#1-类" class="headerlink" title="1.类"></a>1.类</h2><p>例:创建一个猫类，里面有若干属性</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">cat</span> &#123;  <span class="hljs-comment">//创建了一个名为cat的类</span><br>    <span class="hljs-comment">//属性</span><br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    String color;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>    <span class="hljs-comment">//使用面向对象实例化一只猫</span><br>    <span class="hljs-type">cat</span> <span class="hljs-variable">c1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">cat</span>();<br>    <span class="hljs-comment">//new cat() 创建一只猫，赋给c1,c1就是一个对象</span><br>    c1.name = <span class="hljs-string">&quot;小白&quot;</span>;<br>    c1.age = <span class="hljs-string">&quot;1&quot;</span>;<br>    c1.color = <span class="hljs-string">&quot;白色&quot;</span>;<br>    <span class="hljs-type">cat</span> <span class="hljs-variable">c2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">cat</span>();<span class="hljs-comment">//创建了第二只猫</span><br>    System.out.println(c1.name+c.age+c1.color)<br>    <span class="hljs-comment">//访问对象的属性</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-属性-x2F-成员变量"><a href="#2-属性-x2F-成员变量" class="headerlink" title="2.属性&#x2F;成员变量"></a>2.属性&#x2F;成员变量</h2><p>定义:属性是类的一个组成部分，一般是基本的数据类型也可以是引用类型(数组、对象)，比如上例中的int age 就是一个属性<br>注意:new cat()创建的是对象空间(数据)才真的是对象</p><h2 id="3-创建对象的形式"><a href="#3-创建对象的形式" class="headerlink" title="3.创建对象的形式"></a>3.创建对象的形式</h2><p>1.先声明再创建<br>cat c1;<br>c1 &#x3D; new cat();<br>2.直接创建<br>cat c1 &#x3D; new cat();<br>3.如何访问属性<br>对象名.属性名<br>例:cat.name<br>……</p><h2 id="4-成员方法-方法"><a href="#4-成员方法-方法" class="headerlink" title="4.成员方法(方法)"></a>4.成员方法(方法)</h2><p>例:有person类,里面有2个属性,有一个方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">person</span>&#123;<br>    <span class="hljs-type">int</span> age;<br>    String name;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">speak</span><span class="hljs-params">()</span>&#123;   <span class="hljs-comment">//speak方法,有void代表没有返回值,public表示方法是公开的。</span><br>        System.out.println(<span class="hljs-string">&quot;我是新手&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;   <span class="hljs-comment">//int n 为形参</span><br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;= n;i++)&#123;<br>            res = res + i;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">summ</span><span class="hljs-params">(<span class="hljs-type">int</span> sum1,<span class="hljs-type">int</span> sum2)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> sum1+sum2;<br>        <span class="hljs-keyword">return</span> res;       <span class="hljs-comment">//有返回值(return),为res,没有void。</span><br>    &#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(Strint[]args)</span>&#123;<br>    <span class="hljs-type">person</span> <span class="hljs-variable">p1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">person</span>();<br>    p1.speak();<span class="hljs-comment">//调用方法</span><br>    p1.sum(<span class="hljs-number">5</span>);<span class="hljs-comment">//调用方法,并将5(实参)传递给sum的形参(n)接收</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">reset</span> <span class="hljs-operator">=</span> p1.summ(<span class="hljs-number">5</span>,<span class="hljs-number">10</span>);<span class="hljs-comment">//调用summ方法，传参，因为有返回值，所以用reset变量接收。</span><br>    System.out.println(reset);<br>    <br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>方法的好处:<br>1.提高了代码的复用性<br>2.可以将细节封装起来，然后供其他用户来调用使用<br>方法注意事项:<br>1.一个方法最多只能有一个返回值<br>2.如果方法要求有返回值类型，则方法体中最后执行的语句必须为return 值;而且要求返回值类型必须和return的值类型一致或兼容<br>方法的传参机制:<br>1.基本数据类型,传递的是值(值拷贝),形参的任何改变不会影响实参；<br>2.引用类型传递的是地址(传递也是值,但值是地址),可以通过形参来影响实参；</p><h2 id="5-方法的递归"><a href="#5-方法的递归" class="headerlink" title="5.方法的递归"></a>5.方法的递归</h2><p>个人理解:在方法中重复的调用方法<br>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>    <span class="hljs-type">T</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>    t1.test(<span class="hljs-number">4</span>);<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">test</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n&gt;<span class="hljs-number">2</span>)&#123;<br>        test(n-<span class="hljs-number">1</span>);<br>    &#125;<br>    System.out.println(<span class="hljs-string">&quot;n=&quot;</span> + n);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>上面的案例输出的结果为:<br>n &#x3D; 2<br>n &#x3D; 3<br>n &#x3D; 4<br>例2:用递归求阶乘</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">factorial</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span>&#123;<br>    <span class="hljs-keyword">if</span>(n == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<span class="hljs-keyword">else</span>&#123;<br>        factorial(n-<span class="hljs-number">1</span>)*n;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>递归注意事项:<br>1.执行一个方法时，就创建一个新的受保护的独立空间(栈空间)<br>2.方法的局部变量是独立的，不会相互影响，比如n变量<br>3.如果方法使用的是运用类型变量，就会共享该引用类型<br>4.当一个方法执行完毕，或者遇到了return，就会返回，遵守谁调用，结果就返回给谁</p><h2 id="6-方法重载"><a href="#6-方法重载" class="headerlink" title="6.方法重载"></a>6.方法重载</h2><p>1.java中允许同一个类多个同名的方法,但是必须参数不同。<br>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">MyCalculator</span> <span class="hljs-variable">mc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyCalculator</span>();<br>        System.out.println(mc.Calculator(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>));<br>        System.out.println(mc.Calculator(<span class="hljs-number">1</span>,<span class="hljs-number">2.8</span>));<br>        System.out.println(mc.Calculator(<span class="hljs-number">1</span>,<span class="hljs-number">2.1</span>,<span class="hljs-number">11</span>));<br>    &#125;<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyCalculator</span>&#123;   <span class="hljs-comment">//类</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calculator</span><span class="hljs-params">(<span class="hljs-type">int</span> n1,<span class="hljs-type">int</span> n2)</span>&#123;   <span class="hljs-comment">//方法</span><br>        <span class="hljs-keyword">return</span> n1+n2;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">double</span> <span class="hljs-title function_">calculator</span><span class="hljs-params">(<span class="hljs-type">int</span> n1,<span class="hljs-type">double</span> n2)</span>&#123;   <span class="hljs-comment">//构造方法1(数据类型不一样)</span><br>        <span class="hljs-keyword">return</span> n1+n2;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">public</span> <span class="hljs-title function_">calculator</span><span class="hljs-params">(<span class="hljs-type">int</span> n1,<span class="hljs-type">double</span> n2,<span class="hljs-type">int</span> n3)</span>&#123;   <span class="hljs-comment">//构造方法2(数据个数不一样)</span><br>        <span class="hljs-keyword">return</span> n1+n2+n3;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="7-可变参数"><a href="#7-可变参数" class="headerlink" title="7.可变参数"></a>7.可变参数</h2><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">m</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> x)</span>&#123;<br>        <span class="hljs-keyword">return</span> n+x;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">sum</span><span class="hljs-params">(<span class="hljs-type">int</span> n,<span class="hljs-type">int</span> x,<span class="hljs-type">int</span> y)</span>&#123;<br>        <span class="hljs-keyword">return</span> n+x+y;<br>    &#125;<br>    ......<br>    <span class="hljs-comment">//上面的三个方法名称相同，功能相同，参数个数不同---&gt;可使用可变参数优化</span><br>&#125;<br></code></pre></td></tr></table></figure><p>可改写为:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-comment">//1.int...可以表示接受的是可变参数，类型是int,即可以接收多个int(0-多)</span><br><span class="hljs-comment">//2.使用可变参数时，可以当做数组来使用，即n可以当做数组</span><br><span class="hljs-comment">//3.遍历n求和即可</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Method</span>&#123;<br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">m</span><span class="hljs-params">(<span class="hljs-type">int</span>... n)</span>&#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i&lt; n.length;i++&gt;)&#123;<br>        res = res+n[i]<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>    &#125;<br>&#125;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>    <span class="hljs-type">Method</span> <span class="hljs-variable">m1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Method</span>();<br>    System.out.println(m1.m(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>,<span class="hljs-number">100</span>));<br>&#125;<br></code></pre></td></tr></table></figure><p>注意细节:<br>1.可变参数的实参可以为0或任意多个。<br>2.可变参数的实参可以是数组。<br>3.可变参数的本质就是数组。<br>4.可变参数可以和普通类型的参数放在一起，但必须保证可变参数在最后<br>5.一个形参列表中只能出现一个可变参数。</p><h2 id="8-作用域"><a href="#8-作用域" class="headerlink" title="8.作用域"></a>8.作用域</h2><p>注意事项:<br>1.属性和局部变量可以重名，访问时遵循就近原则;<br>2.在同一个作用域中，比如在同一个成员方法中，两个局部变量，不能重名;<br>3.属性生命周期较长，对象无，则属性无;局部变量，生命周期短，代码块结束，局部变量无;<br>4.作用域范围不同<br>全局变量:可以被本类使用，或其他类使用(通过对象调用)<br>局部变量:只能在本类中对应的方法中使用<br>5.修饰符不同<br>全局变量&#x2F;属性可以加修饰符<br>局部变量不可以加修饰符</p><h2 id="9-构造方法"><a href="#9-构造方法" class="headerlink" title="9.构造方法"></a>9.构造方法</h2><p>语法:<br>[修饰符]方法名(形参列表){<br>    方法体;<br>}<br>作用:完成对新对象的初始化<br>说明:<br>1.构造器的修饰符可以默认，也可以是public private<br>2.构造器没有返回值<br>3.方法名和类名一样<br>4.参数列表和成员方法一样的规则<br>5.构造器的调用系统完成<br>通过this调用其他的构造方法:<br>例子:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">test</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span> &#123;<br>        <span class="hljs-built_in">this</span>(name);<br>        <span class="hljs-built_in">this</span>.age = age;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">test</span> <span class="hljs-variable">person</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">test</span>(<span class="hljs-string">&quot;man&quot;</span>,<span class="hljs-number">22</span>);<br>        System.out.println(person.name);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Person</span>&#123;<br>    String name;<br>    <span class="hljs-type">int</span> age;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Person</span><span class="hljs-params">(String pname,<span class="hljs-type">int</span> page)</span>&#123;<span class="hljs-comment">//构造器/构造方法</span><br>        name = pname;<br>        age = page;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>注意:<br>1.如果程序员没有定义构造方法，系统会自动给类生成一个无参构造方法，可以用javap反编译。<br>2.一旦定义了自己的构造器，则默认构造器就覆盖了</p><h2 id="10-this关键字"><a href="#10-this关键字" class="headerlink" title="10.this关键字"></a>10.this关键字</h2><p>java虚拟机会给每个对象分配this,代表当前对象<br>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-title function_">Dog</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>    <span class="hljs-built_in">this</span>.name=name;<br>    <span class="hljs-built_in">this</span>.age=age;<br>    <span class="hljs-comment">//this.name就是当前对象的属性name</span><br>    <span class="hljs-comment">//this.age就是当前对象的属性age</span><br>&#125;<br></code></pre></td></tr></table></figure><p>简单地说:哪个对象调用,this就代表了哪个对象<br>注意事项:<br>1.this关键字可以用来访问本类的属性、方法、构造方法<br>2.this用于区分当前类的属性和局部变量<br>3.访问成员方法的语法:this.方法名(参数列表);<br>4.this可以出现在实例方法和构造方法中,但不可以出现在类方法中<br>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>    <span class="hljs-type">T</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>    t1.f2();<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f1</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;f1()方法..&quot;</span>);<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">f2</span><span class="hljs-params">()</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;f2()方法..&quot;</span>);<br>        f1();<br>        <span class="hljs-built_in">this</span>.f1();<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出为:</span><br><span class="hljs-comment">//f2()方法..</span><br><span class="hljs-comment">//f1()方法..</span><br><span class="hljs-comment">//f1()方法..</span><br></code></pre></td></tr></table></figure><p>4.访问构造器语法:this(参数列表);只能在构造方法里使用(即只能在构造器中访问另外一个构造器,必须放在第一条语句)<br>例:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span>&#123;<br>    <span class="hljs-type">T</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">T</span>();<br>&#125;<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">T</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">T</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-built_in">this</span>(<span class="hljs-string">&quot;haozi&quot;</span>,<span class="hljs-number">100</span>);<br>        System.out.println(<span class="hljs-string">&quot;T()构造器&quot;</span>)<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">T</span><span class="hljs-params">(String name,<span class="hljs-type">int</span> age)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;T(String name,int age)构造器&quot;</span>)<br>    &#125;<br>&#125;<br><span class="hljs-comment">//输出结果为:</span><br><span class="hljs-comment">//T(String name,int age)构造器</span><br><span class="hljs-comment">//T()构造器</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>2.顺序控制</title>
    <link href="/2022/09/05/java/2.%E9%A1%BA%E5%BA%8F%E6%8E%A7%E5%88%B6/"/>
    <url>/2022/09/05/java/2.%E9%A1%BA%E5%BA%8F%E6%8E%A7%E5%88%B6/</url>
    
    <content type="html"><![CDATA[<h1 id="1-顺序控制"><a href="#1-顺序控制" class="headerlink" title="1.顺序控制"></a>1.顺序控制</h1><span id="more"></span><p>定义:程序从上到下逐行地执行，中间没有任何判断和跳转。</p><h1 id="2-分支控制if-else"><a href="#2-分支控制if-else" class="headerlink" title="2.分支控制if-else"></a>2.分支控制if-else</h1><h2 id="2-1单分支"><a href="#2-1单分支" class="headerlink" title="2.1单分支"></a>2.1单分支</h2><p>基本语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件表达式)&#123;<br>    执行代码块<span class="hljs-number">1</span>；<br>    执行代码块<span class="hljs-number">2</span>；<br>    ……<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-2双分支"><a href="#2-2双分支" class="headerlink" title="2.2双分支"></a>2.2双分支</h2><p>基本语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件表达式)&#123;<br>    执行代码块<span class="hljs-number">1</span>；<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>    执行代码块<span class="hljs-number">2</span>；<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-3多分支"><a href="#2-3多分支" class="headerlink" title="2.3多分支"></a>2.3多分支</h2><p>基本语法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>(条件表达式<span class="hljs-number">1</span>)&#123;<br>    执行代码块<span class="hljs-number">1</span>；<br>&#125;<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(条件表达式<span class="hljs-number">2</span>)&#123;<br>    执行代码块<span class="hljs-number">2</span>；<br>&#125;<br>……<br><span class="hljs-keyword">else</span>&#123;<br>    执行代码块n；<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-4嵌套分支"><a href="#2-4嵌套分支" class="headerlink" title="2.4嵌套分支"></a>2.4嵌套分支</h2><p>基本语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">if</span>()&#123;<br>    <span class="hljs-keyword">if</span>()&#123;<br>        <br>    &#125;<span class="hljs-keyword">else</span>&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-5switch分支结构"><a href="#2-5switch分支结构" class="headerlink" title="2.5switch分支结构"></a>2.5switch分支结构</h2><p>基本语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">switch</span>(表达式)&#123;<br>    <span class="hljs-keyword">case</span> 常量<span class="hljs-number">1</span>：<br>    语句块<span class="hljs-number">1</span>；<br>    <span class="hljs-keyword">case</span> 常量<span class="hljs-number">2</span>：<br>    语句块<span class="hljs-number">2</span>；<br>    <span class="hljs-keyword">break</span>；<span class="hljs-comment">//中途退出</span><br>    <span class="hljs-keyword">case</span> n：<br>    语句块n；<br>    <span class="hljs-keyword">default</span>：<span class="hljs-comment">//类似于else</span><br>    <span class="hljs-keyword">default</span>语句块；<br>    <span class="hljs-keyword">break</span>；<br>&#125;<br></code></pre></td></tr></table></figure><p>switch穿透:即如果case符合了一个条件，但是此条件下没有break语句，那么它会继续执行下面的语句块2，并不会进行条件的判定。以此类推，直到遇到break。<br>注意:<br>1.表达式数据类型，应和case后的常量类型一致，或者是可以自动转成可以相互比较的类型，比如输入的是字符，而常量是int。<br>2.语句中的default语句是可选的。</p><h2 id="2-6for循环控制"><a href="#2-6for循环控制" class="headerlink" title="2.6for循环控制"></a>2.6for循环控制</h2><p>基本语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>(循环变量初始化；循环条件；循环变量迭代)&#123;<br>    循环语句；<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-7while循环控制"><a href="#2-7while循环控制" class="headerlink" title="2.7while循环控制"></a>2.7while循环控制</h2><p>基本语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">while</span>(循环条件)&#123;<br>    循环体；<br>    循环变量迭代；<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-8do-while循环控制"><a href="#2-8do-while循环控制" class="headerlink" title="2.8do..while循环控制"></a>2.8do..while循环控制</h2><p>基本语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">循环变量初始化；<br><span class="hljs-keyword">do</span>&#123;<br>    循环体;<br>    循环变量迭代；<br>&#125;<span class="hljs-keyword">while</span>(循环条件)；<br></code></pre></td></tr></table></figure><h2 id="2-9多重-嵌套-循环控制"><a href="#2-9多重-嵌套-循环控制" class="headerlink" title="2.9多重(嵌套)循环控制"></a>2.9多重(嵌套)循环控制</h2><p>基本语法:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span>()&#123;<br>    <span class="hljs-keyword">for</span>()&#123;<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="案例，输出99乘法表"><a href="#案例，输出99乘法表" class="headerlink" title="案例，输出99乘法表"></a>案例，输出99乘法表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">day9_6_jzt</span> &#123;<br><span class="hljs-comment">//编写99乘法表</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String []args)</span> &#123;<br><span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;i &lt;= <span class="hljs-number">9</span>;i++) &#123;<br>System.out.println(<span class="hljs-string">&quot; &quot;</span>);<br>sum = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;j &lt;= i;j++) &#123;<br> sum = j*i;<br>System.out.print(j+<span class="hljs-string">&quot;*&quot;</span>+i+<span class="hljs-string">&quot;=&quot;</span>+sum);<br>System.out.print(<span class="hljs-string">&quot;\t&quot;</span>);<br>&#125;<br>&#125;<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2-10跳转控制语句-break"><a href="#2-10跳转控制语句-break" class="headerlink" title="2.10跳转控制语句-break"></a>2.10跳转控制语句-break</h2><p>基本语法:break；<br>功能:当循环满足了某个条件后，可以终止循环。</p><h2 id="2-11跳转控制语句-continue"><a href="#2-11跳转控制语句-continue" class="headerlink" title="2.11跳转控制语句-continue"></a>2.11跳转控制语句-continue</h2><p>基本语法:continue；<br>功能:用于结束本次循环，继续执行下一次循环。</p><h2 id="2-12跳转控制语句-return"><a href="#2-12跳转控制语句-return" class="headerlink" title="2.12跳转控制语句-return"></a>2.12跳转控制语句-return</h2><p>功能:return使用在方法上，表示跳出当前所在的方法。如果return写在main方法，则会退出程序。</p>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>3.数组</title>
    <link href="/2022/09/05/java/3.%E6%95%B0%E7%BB%84/"/>
    <url>/2022/09/05/java/3.%E6%95%B0%E7%BB%84/</url>
    
    <content type="html"><![CDATA[<h1 id="1-数组"><a href="#1-数组" class="headerlink" title="1.数组"></a>1.数组</h1><span id="more"></span><p>数组的定义方式:</p><blockquote><p>1.double [ ] x &#x3D; {……};<br>&#x2F;&#x2F;数据类型[ ] 数组名<br>2.动态初始化方式:<br>语法:数据类型 数组名[ ] &#x3D; new 数组类型[大小]<br>int a [ ] &#x3D; new int[5];<br>先声明数组:<br>语法:数据类型 数组名[ ]<br>int a [ ];<br>创建数组:<br>语法:数组名 &#x3D; new 数据类型[大小]；<br>a &#x3D; new int [5];<br>3.静态初始化<br>语法:数据类型 数组名[ ] &#x3D; {元素值……}<br>int a [ ] &#x3D; {1,2,3,4,5};</p></blockquote><h2 id="2-选择排序法"><a href="#2-选择排序法" class="headerlink" title="2.选择排序法"></a>2.选择排序法</h2><p>描述:冒泡排序法是有一个符合条件的就进行交换，而选择排序法是从头比到尾在进行交换</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> java.util.Arrays；<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">day9_8_1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">int</span> arr[] = &#123;<span class="hljs-number">24</span>,<span class="hljs-number">69</span>,<span class="hljs-number">80</span>,<span class="hljs-number">57</span>,<span class="hljs-number">13</span>&#125;;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i+<span class="hljs-number">1</span>;j &lt; arr.length;j++)&#123;<br>                <span class="hljs-keyword">if</span>(arr[i]&gt;arr[j])&#123;     <span class="hljs-comment">//从小到大排序</span><br>                    temp = arr[j];<br>                    arr[j] = arr[i];<br>                    arr[i] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(Arrays.toString(arr));<span class="hljs-comment">//遍历数组</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3-冒泡排序法"><a href="#3-冒泡排序法" class="headerlink" title="3.冒泡排序法"></a>3.冒泡排序法</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">day9_8_2</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        <span class="hljs-type">int</span> arr [] = &#123;<span class="hljs-number">24</span>,<span class="hljs-number">69</span>,<span class="hljs-number">80</span>,<span class="hljs-number">57</span>,<span class="hljs-number">13</span>&#125;;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length-<span class="hljs-number">1</span>;i++)&#123;<br>            <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j &lt; arr.length-<span class="hljs-number">1</span>-i;j++)&#123;<br>                <span class="hljs-keyword">if</span>(arr[j]&gt;arr[j+<span class="hljs-number">1</span>])&#123;<br>                    <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> arr[j];<br>                    arr[j] = arr[j+<span class="hljs-number">1</span>];<br>                    arr[j+<span class="hljs-number">1</span>] = temp;<br>                &#125;<br>            &#125;<br>        &#125;<br>        System.out.println(Arrays.toString(arr));<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4-查找数组"><a href="#4-查找数组" class="headerlink" title="4.查找数组"></a>4.查找数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">import</span> java.util.Scanner;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">day_9_9_1</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        Strint arr [] = &#123;<span class="hljs-string">&quot;耗子&quot;</span>,<span class="hljs-string">&quot;旭子&quot;</span>,<span class="hljs-string">&quot;强子&quot;</span>,<span class="hljs-string">&quot;宇子&quot;</span>&#125;;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        System.out.println(<span class="hljs-string">&quot;请输入要查找的字符串&quot;</span>);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<span class="hljs-comment">//判断是否查找成功</span><br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt;=arr.length;i++)&#123;<br>            <span class="hljs-keyword">if</span>(name.equals(arr[i]))&#123;   <span class="hljs-comment">//equals用来比较字符串内容，这里用来判断name和arr[i]的字符串是否相等。</span><br>                System.out.println(<span class="hljs-string">&quot;恭喜你找到了&quot;</span>+name+<span class="hljs-string">&quot;它的下标为&quot;</span>+i);<br>                index = i;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span>(index = -<span class="hljs-number">1</span>)&#123;<br>            System.out.println(<span class="hljs-string">&quot;Sorry,并没有找到&quot;</span>+name);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="5-二维数组"><a href="#5-二维数组" class="headerlink" title="5.二维数组"></a>5.二维数组</h2><p>5.1二维数组的定义方式(静态初始化):</p><blockquote><p>int arr [ ] [ ] &#x3D;{ {……} };</p></blockquote><p>例如:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">int</span> arr [ ] [ ] = &#123;&#123;<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-number">0</span>&#125;,<br>                   &#123;<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>,<span class="hljs-number">1</span>&#125;,<br>                   &#123;<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>,<span class="hljs-number">2</span>&#125;&#125;;<br></code></pre></td></tr></table></figure><p>可以理解为:每一对{ }都是一个一维数组，多个一维数组构成二维数组。<br>如何访问二维数组中的某个元素:<br>例:我们要寻找arr数组中的4，则表达式为arr[1][3];<br>二维数组的动态初始化方式:</p><blockquote><p>语法:类型 数组名[ ][ ] &#x3D; new 类型[大小][大小];<br>例如:int arr [ ] [ ] &#x3D; new int[2][3];<br>&#x2F;&#x2F;这样就定义了一个二行三列的数组。<br>也可以写成int arr;&#x2F;&#x2F;先声明，arr &#x3D; new int [2][3];&#x2F;&#x2F;再开辟空间。</p></blockquote><p>5.2遍历一个二维数组</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;i &lt; arr.length;i++)&#123;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;j &lt; arr[i].length;j++)&#123;<br>        System.out.print(a[i][j]+<span class="hljs-string">&quot;&quot;</span>);<br>    &#125;<br>    System.out.println( );<span class="hljs-comment">//换行</span><br>&#125;<br></code></pre></td></tr></table></figure><p>5.3让两个二维数组的长度相等</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs JAVA"><span class="hljs-type">int</span> [] [] arr1 = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;&#125;;<br><span class="hljs-type">int</span> [] [] arr2 = &#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;&#125;;<br><span class="hljs-type">int</span> [] [] arr3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [arr1.length][arr1.length];<br><span class="hljs-type">int</span> [] [] arr4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span> [arr2.length][arr2.length];<br><span class="hljs-comment">//arr3,arr4的值为空，但是有长度,和arr1,arr2的长度相等</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.入门数据结构</title>
    <link href="/2022/08/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%85%A5%E9%97%A8/"/>
    <url>/2022/08/31/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/1.%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-入门数据结构"><a href="#1-入门数据结构" class="headerlink" title="1.入门数据结构"></a>1.入门数据结构</h1><span id="more"></span><h2 id="1-1定义"><a href="#1-1定义" class="headerlink" title="1.1定义"></a>1.1定义</h2><p>1.数据:描述客观事物的数、字符以及能输入计算机且能被处理的符号的集合。<br>2.数据元素:数据的组成单位。<br>3.数据对象:是性质相同的数据元素的集合。<br>4.数据结构是数据对象+算法。<br>例:</p><table><thead><tr><th align="center">学号</th><th align="center">姓名</th><th align="center">分数</th></tr></thead><tbody><tr><td align="center">224161111</td><td align="center">耗子</td><td align="center">90</td></tr></tbody></table><p>在此表中:</p><blockquote><p>数据项(学号、姓名、分数)<br>数据(224161111|耗子|90)<br>数据元素(224161111、耗子、90)</p></blockquote><p>5.逻辑类型结构包括:</p><blockquote><p>集合，0:0关系<br>线性关系，1:1关系<br>树形关系，1:n关系<br>图形关系，m:n关系</p></blockquote><p>6.数据的存储结构包括:</p><blockquote><p>顺序存储结构<br>链式存储结构<br>索引存储结构<br>哈希存储结构<br>其中:线性存储结构是有且只有一个开始和一个终端的端点，并且所有结点都只有一个前驱和后继。</p></blockquote><p>7.序偶:</p><blockquote><p>序:就是有序的意思<br>偶:一对儿<br>表示方法:&lt;x，y&gt;(x，y∈D),D是数据元素的集合，把x叫做序偶的第一元素，把y叫做序偶的第二元素。x为y的前驱元素，y为x的后继元素。若某个元素没有前驱元素则为开始元素，若某个元素没有后继元素则为终端元素。</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>数据结构</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数据结构</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>1.入门java</title>
    <link href="/2022/08/24/java/1.%E5%85%A5%E9%97%A8/"/>
    <url>/2022/08/24/java/1.%E5%85%A5%E9%97%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="1-入门java"><a href="#1-入门java" class="headerlink" title="1.入门java"></a>1.入门java</h1><span id="more"></span><h2 id="1-1输出helloworld"><a href="#1-1输出helloworld" class="headerlink" title="1.1输出helloworld"></a>1.1输出helloworld</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">helloworld</span>&#123;<br>    <span class="hljs-comment">//公共类(public)，一个源文件能有一个</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[]args)</span>&#123;<br>        System.out.println(<span class="hljs-string">&quot;hello world&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="1-2转义字符"><a href="#1-2转义字符" class="headerlink" title="1.2转义字符"></a>1.2转义字符</h2><p>1.\t:一个制表位(TAB)，实现对齐功能<br>2.\n:换行符<br>3.\\:一个\</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(<span class="hljs-string">&quot;hello\\\\world&quot;</span>);<br><span class="hljs-comment">//输出结果为hello\\world，4个\分别用来转义和输出</span><br></code></pre></td></tr></table></figure><p>4.\“:一个”<br>5.\‘:一个’<br>6.\r:一个回车</p><h2 id="1-3注释"><a href="#1-3注释" class="headerlink" title="1.3注释"></a>1.3注释</h2><ol><li><p>单行注释</p><blockquote><p>&#x2F;&#x2F;注释文字</p></blockquote></li><li><p>多行注释</p><blockquote><p>&#x2F;*<br>…<br>…<br>*&#x2F;</p></blockquote></li></ol><h2 id="1-4变量"><a href="#1-4变量" class="headerlink" title="1.4变量"></a>1.4变量</h2><ol><li>例:int a&#x3D;1;<blockquote><p>&#x2F;&#x2F;定义了一个int类型的变量a的值为1</p></blockquote></li></ol><h2 id="1-5数据类型"><a href="#1-5数据类型" class="headerlink" title="1.5数据类型"></a>1.5数据类型</h2><ol><li><p>数值型</p><blockquote><p>字节型:byte[1]<br>短整型:short[2]<br>整形:int[4]<br>长整型:long[8]<br>单精度:float[4]<br>双精度:double[8]<br>字符型:char[2]<br>布尔型:boolean[1]</p></blockquote></li><li><p>引用数据类型</p><blockquote><p>类:class<br>接口:interface<br>数组[]</p></blockquote></li></ol><p>注意:</p><blockquote><ol><li>浮点数由:符号位+指数位+尾数位组成。</li><li>java的浮点型默认为double型,声明float型常量,须后面添加F或f。<br>例:float num1 &#x3D; 1.1&#x2F;&#x2F;错误<br>float num1 &#x3D; 1.1F&#x2F;&#x2F;正确</li></ol></blockquote><h2 id="1-6数据类型转换"><a href="#1-6数据类型转换" class="headerlink" title="1.6数据类型转换"></a>1.6数据类型转换</h2><ol><li>java会将精度小的类型自动转换为精度大的数据类型(自动转换)。</li><li>数据类型按精度大小排序为:<blockquote><p>char➡int➡long➡float➡double<br>byte➡short➡int➡long➡float➡double</p></blockquote></li></ol><p>注意:</p><ol><li>如果有多种类型的数据混合运算时,系统首先自动将所有数据转换成容量最大的数据类型,再进行计算。</li><li>我们把精度大的数据类型赋值给精度小的数据类型时就会报错，反之会进行自动转换。</li><li>byte,short和char之间不会相互转换。</li><li>byte，short，char之间可以计算，在计算时首先转换为int类型。<h2 id="1-7强制类型转换"><a href="#1-7强制类型转换" class="headerlink" title="1.7强制类型转换"></a>1.7强制类型转换</h2></li><li>自动类型转换的逆过程，将容量大的数据类型转换为容量小的数据类型。使用时要加上强制转换符(),但会造成精度下降。<h2 id="1-8String和基本数据类型的转换"><a href="#1-8String和基本数据类型的转换" class="headerlink" title="1.8String和基本数据类型的转换"></a>1.8String和基本数据类型的转换</h2></li><li>基本类型转为String<br>语法:将基本数据类型的值++””即可 <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">n1</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br><span class="hljs-type">float</span> <span class="hljs-variable">f1</span> <span class="hljs-operator">=</span> <span class="hljs-number">1.1</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> n1 + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-type">String</span> <span class="hljs-variable">s2</span> <span class="hljs-operator">=</span> f1 + <span class="hljs-string">&quot;&quot;</span>;<br><span class="hljs-comment">//将n1转换为字符串</span><br>System.out.println(s1 + <span class="hljs-string">&quot; &quot;</span> + f1)<br></code></pre></td></tr></table></figure></li><li>将String转为基本数据类型<br>语法:通过基本类型的包装类调用parseXX方法即可<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">String</span> <span class="hljs-variable">s5</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;123&quot;</span>;<br><span class="hljs-type">int</span> <span class="hljs-variable">num1</span> <span class="hljs-operator">=</span> Integer.parseInt(s5);<br><span class="hljs-type">long</span> <span class="hljs-variable">num2</span> <span class="hljs-operator">=</span> Long.parseLong(s5);<br>......<br></code></pre></td></tr></table></figure><h2 id="1-9算数运算符"><a href="#1-9算数运算符" class="headerlink" title="1.9算数运算符"></a>1.9算数运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">说明</th><th align="center">案例</th><th align="center">结果</th></tr></thead><tbody><tr><td align="center">+</td><td align="center">正号</td><td align="center">+7</td><td align="center">7</td></tr><tr><td align="center">-</td><td align="center">负号</td><td align="center">b&#x3D;11;-b</td><td align="center">-11</td></tr><tr><td align="center">+</td><td align="center">加</td><td align="center">1+1</td><td align="center">2</td></tr><tr><td align="center">-</td><td align="center">减</td><td align="center">1-1</td><td align="center">0</td></tr><tr><td align="center">*</td><td align="center">乘</td><td align="center">1*1</td><td align="center">1</td></tr><tr><td align="center">&#x2F;</td><td align="center">除</td><td align="center">1&#x2F;1</td><td align="center">1</td></tr><tr><td align="center">%</td><td align="center">取余</td><td align="center">2&#x2F;9</td><td align="center">1</td></tr><tr><td align="center">++</td><td align="center">自增加(前,后)</td><td align="center">a&#x3D;2;b&#x3D;++a</br>a&#x3D;2;b&#x3D;a++</td><td align="center">a&#x3D;3;b&#x3D;3</br>a&#x3D;3;b&#x3D;2</td></tr><tr><td align="center">–</td><td align="center">自减减(前,后)</td><td align="center">a&#x3D;2;b&#x3D;–a</br>a&#x3D;2;b&#x3D;a–</td><td align="center">a&#x3D;1;b&#x3D;1</br>a&#x3D;1;b&#x3D;2</td></tr><tr><td align="center">注意:</td><td align="center"></td><td align="center"></td><td align="center"></td></tr></tbody></table></li><li>在%(取余)的本质，套用公式a % b &#x3D; a - a &#x2F; b * b</li><li>int i &#x3D; 1；i &#x3D; i++；此时i等于1.<blockquote><p>因为使用了临时变量1.temp &#x3D; 1;2.i &#x3D; i + 1;3.i &#x3D; temp</p></blockquote></li><li>int i &#x3D; 1；i &#x3D; ++i；此时i等于2.<blockquote><p>因为使用了临时变量1.i &#x3D; i + 1;2.temp &#x3D; i;3.i &#x3D; temp</p></blockquote><h2 id="1-10关系运算符"><a href="#1-10关系运算符" class="headerlink" title="1.10关系运算符"></a>1.10关系运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="center">大于</td></tr><tr><td align="center">&gt;&#x3D;</td><td align="center">大于等于</td></tr><tr><td align="center">&lt;</td><td align="center">小于</td></tr><tr><td align="center">&lt;&#x3D;</td><td align="center">小于等于</td></tr><tr><td align="center">!&#x3D;</td><td align="center">不等于</td></tr><tr><td align="center">&#x3D;&#x3D;</td><td align="center">等于</td></tr></tbody></table><h2 id="1-11逻辑运算符"><a href="#1-11逻辑运算符" class="headerlink" title="1.11逻辑运算符"></a>1.11逻辑运算符</h2></li><li>&amp;、&amp;&amp;(与)<blockquote><p>真&amp;真 &#x3D; 真<br>真&amp;&amp;真 &#x3D; 真<br>真&amp;假 &#x3D; 假<br>真&amp;&amp;假 &#x3D; 假</p></blockquote></li><li>|、||(或)<blockquote><p>真|真 &#x3D; 真<br>真||真 &#x3D; 真<br>真|假 &#x3D; 真<br>真||假 &#x3D; 真<br>假|假 &#x3D; 假<br>假||假 &#x3D; 假</p></blockquote></li><li>!(取反)<blockquote><p>!真 &#x3D; 假<br>!假 &#x3D; 真</p></blockquote></li><li>^(异或)<blockquote><p>真^真 &#x3D; 假<br>真^假 &#x3D; 真<br>假^真 &#x3D; 真<br>假^假 &#x3D; 假</p></blockquote><h2 id="1-12赋值运算符"><a href="#1-12赋值运算符" class="headerlink" title="1.12赋值运算符"></a>1.12赋值运算符</h2><table><thead><tr><th align="center">运算符</th><th align="center">说明</th></tr></thead><tbody><tr><td align="center">+&#x3D;</td><td align="center">加等于，等价于a +&#x3D; b；等于a &#x3D; a + b</td></tr><tr><td align="center">-&#x3D;</td><td align="center">减等于</td></tr><tr><td align="center">*&#x3D;</td><td align="center">乘等于</td></tr><tr><td align="center">&#x2F;&#x3D;</td><td align="center">除等于</td></tr><tr><td align="center">%&#x3D;</td><td align="center">取余等于</td></tr><tr><td align="center">注意:赋值运算符底层有类型转换。</td><td align="center"></td></tr></tbody></table><h2 id="1-13三元运算符"><a href="#1-13三元运算符" class="headerlink" title="1.13三元运算符"></a>1.13三元运算符</h2><p>语法:条件表达式?表达式1:表达式2；<br>条件符合执行表达式1，否则执行表达式2.</p></li></ol>]]></content>
    
    
    <categories>
      
      <category>java</category>
      
    </categories>
    
    
    <tags>
      
      <tag>java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL入门第二篇</title>
    <link href="/2020/07/19/MySQL(2)/"/>
    <url>/2020/07/19/MySQL(2)/</url>
    
    <content type="html"><![CDATA[<h1 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h1><span id="more"></span><p>insert into &lt;表名&gt; values (在表中插入的数据);   </p><blockquote><p>&#x2F;&#x2F;在表中插入数据，方法有很多种，这里只写一种，注意，在表里插入的数据要对应你建表的格式。</p></blockquote><p>例如: </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">insert into xs (&#x27;201901&#x27;,&#x27;张三&#x27;, &#x27;计算机&#x27;,1,&#x27;2000-01-02&#x27;,58);  <br>//此条数据对应上一篇文章的表，字符型数据添加时必须带单引号，然后两条数据之间用逗号隔开，注意，MySQL只能识别英文标点。  <br></code></pre></td></tr></table></figure><p>delete from &lt;表名&gt; where &lt;条件&gt;;</p><blockquote><p>&#x2F;&#x2F;删除表中记录</p></blockquote><p>update &lt;表明&gt; set 字段名&#x3D;’值’ where &lt;条件&gt;;</p><blockquote><p>&#x2F;&#x2F;修改表中记录</p></blockquote><p>select * from &lt;表名&gt;;</p><blockquote><p>&#x2F;&#x2F;查询表中记录</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MySQL入门第一篇</title>
    <link href="/2020/07/19/MySQL(1)/"/>
    <url>/2020/07/19/MySQL(1)/</url>
    
    <content type="html"><![CDATA[<h1 id="学习笔记"><a href="#学习笔记" class="headerlink" title="学习笔记"></a>学习笔记</h1><span id="more"></span><p>show database；  </p><blockquote><p>&#x2F;&#x2F;显示所有数据库，数据库的语句格式都是分号结尾 </p></blockquote><p>use &lt;数据库名&gt;  </p><blockquote><p>&#x2F;&#x2F;进入数据库  </p></blockquote><p>show tables； </p><blockquote><p>&#x2F;&#x2F;查看此数据库的所有表  </p></blockquote><p>create databases &lt;库名&gt;；</p><blockquote><p>&#x2F;&#x2F;新建库  </p></blockquote><p>create table &lt;新表名&gt; （字段名,数据类型,字段名,数据类型….）    </p><blockquote><p>&#x2F;&#x2F;创建表，注意：要先进库，才能建表   </p></blockquote><p>例如:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs MySQL">   mysql&gt; create table xs  <br>       (<br>           学号 char(6)    not null primary key,  <br>           姓名 char(8)    not null,  <br>           专业名 char(10) null,  <br>           性别 tinyint(1) not null default 1,  <br>           出生日期 date not null,  <br>           总学分 tinyint(1) null，  <br>           备注 text null  <br>         );  <br>解释:  <br>   1.char：字符类型数据  <br>   2.not null：表示学号不能为空值  <br>   3.primary key：表示学号为主键  <br>   4.tinyint：整形数据，长度为1字节，0-255  <br>   5.default：默认  <br>   6.null ：可以为空值  <br>   7.date ：日期型  <br>   8.text:字符串型  <br></code></pre></td></tr></table></figure><p>drop databases &lt;数据库名&gt;；</p><blockquote><p>&#x2F;&#x2F;删除库</p></blockquote><p>desc &lt;表名&gt;；</p><blockquote><p>&#x2F;&#x2F;查看表结构</p></blockquote><p>alter databases &lt;库名&gt;</p><blockquote><p>&#x2F;&#x2F;修改数据库</p></blockquote><p>alter table &lt;表名&gt;</p><blockquote><p>&#x2F;&#x2F;修改表  </p></blockquote><p>例如:  </p><pre><code class="MySQL">    alter table &lt;表名&gt; add primary key (学号，课程号)        //为表中添加主键为学号，课程号。</code></pre>]]></content>
    
    
    <categories>
      
      <category>MySQL</category>
      
    </categories>
    
    
    <tags>
      
      <tag>MySQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>dns服务</title>
    <link href="/2020/07/19/Linux/DNS/"/>
    <url>/2020/07/19/Linux/DNS/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux的网络服务之一"><a href="#Linux的网络服务之一" class="headerlink" title="Linux的网络服务之一"></a>Linux的网络服务之一</h1><h2 id="DNS服务器"><a href="#DNS服务器" class="headerlink" title="DNS服务器"></a>DNS服务器</h2><span id="more"></span><p>rpm -q bind</p><blockquote><p>&#x2F;&#x2F;检查DNS是否安装  </p></blockquote><p>yum install -y bind</p><blockquote><p>&#x2F;&#x2F;安装DNS服务</p></blockquote><p>service  firewalld  stop</p><blockquote><p>&#x2F;&#x2F;关闭防火墙</p></blockquote><p>setenforce  0</p><blockquote><p>&#x2F;&#x2F;关闭安全策略</p></blockquote><p>vi &#x2F;etc&#x2F;named.conf</p><blockquote><p>&#x2F;&#x2F;配置文件位置</p></blockquote><h2 id="配置文件更多信息"><a href="#配置文件更多信息" class="headerlink" title="配置文件更多信息"></a>配置文件更多信息</h2><p>DNS的配置文件分为:主配置文件，全局配置文件,区域配置文件,正向配置文件，反向配置文件.</p><h2 id="在主配置文件中"><a href="#在主配置文件中" class="headerlink" title="在主配置文件中"></a>在主配置文件中</h2><p>listen-on port 53 { 127.0.0.1; }; </p><blockquote><p>&#x2F;&#x2F;指定dns服务的端口和ip，dns默认监听端口为53，any代表主机的任何ip(ipv4)</p></blockquote><p>listen-on-v6 port 53 { ::1; };</p><blockquote><p>&#x2F;&#x2F;ipv6的配置</p></blockquote><p>directory       “&#x2F;var&#x2F;named”;</p><blockquote><p>&#x2F;&#x2F;程序的主目录</p></blockquote><p>allow-query     { localhost; };</p><blockquote><p>&#x2F;&#x2F;指定可以查询的客户端，any代表任意客户端,把127.0.0.1和localhost改成any即可。</p></blockquote><p>include “&#x2F;etc&#x2F;named.rfc1912.zones”;</p><blockquote><p>&#x2F;&#x2F;区域配置文件的位置</p></blockquote><p>vi &#x2F;etc&#x2F;named.rfc1912.zones</p><blockquote><p>&#x2F;&#x2F;进入解析配置文件</p></blockquote><h2 id="在解析配置文件中"><a href="#在解析配置文件中" class="headerlink" title="在解析配置文件中"></a>在解析配置文件中</h2><p>配置解析配置文件(正向)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Linux">zone &quot;myweb.com&quot; IN &#123;<br>        type master; <br>        file &quot;myweb.com.zheng&quot;;  <br>        allow-update &#123; none; &#125;; <br>&#125;;<br></code></pre></td></tr></table></figure><p>配置解析配置文件(反向)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs Linux">zone &quot;159.168.192.in-addr.arpa&quot; IN &#123; <br>        type master;  <br>        file &quot;192.168.159.fan&quot;;  <br>        allow-update &#123; none; &#125;; <br>&#125;;  <br></code></pre></td></tr></table></figure><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a>注意:</h2><ol><li>文中的myweb.com是你的域名地址</li><li>file “myweb.com.zheng”;是此域名的正向解析地址，其中引号里的语句可以自定义更改</li><li>文中的zone “159.168.192.in-addr.arpa” IN {是反向地址解析，语句159.168.192是你虚拟机或者服务器的ip地址的反向ip</li><li>file “192.168.159.fan”;是填写反向地址解析的配置文件，192.168.159.fan语句可以自定义</li></ol><h2 id="配置正向地址解析文件"><a href="#配置正向地址解析文件" class="headerlink" title="配置正向地址解析文件"></a>配置正向地址解析文件</h2><p>cp -a named.localhost myweb.com.zheng</p><blockquote><p>named.localhost为正向解析的模板，复制后的文件名字必须是你配置解析文件中file “myweb.com.zheng”;里的名字。</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Linux">$TTL 1D<br>@       IN SOA  abc.com. rname.invalid. (<br>                                        0       ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>        NS      dns.abc.com.<br>        A       127.0.0.1<br>        AAAA    ::1<br>dns     A       192.168.100.128<br>www     A       192.168.100.129<br></code></pre></td></tr></table></figure><ol><li>abc.com.是你域名的地址</li><li>dns是主机名，192.168.100.128是对应的ip地址</li><li>www是主机名，192.168.100.129是对应的ip地址</li></ol><p>cp -a named.loopback 192.168.159.fan</p><blockquote><p>#named.loopback为反向解析的模板</p></blockquote><h2 id="配置反向地址解析文件"><a href="#配置反向地址解析文件" class="headerlink" title="配置反向地址解析文件"></a>配置反向地址解析文件</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Linux">$TTL 1D<br>@       IN SOA  abc.com. rname.invalid. (<br>                                        0       ; serial<br>                                        1D      ; refresh<br>                                        1H      ; retry<br>                                        1W      ; expire<br>                                        3H )    ; minimum<br>        NS      dns.abc.com.<br>        A       127.0.0.1<br>        AAAA    ::1<br>        PTR     localhost.<br>128     PTR     dns.abc.com<br>129     PTR     www.abc.com<br></code></pre></td></tr></table></figure><ol><li>abc.com.是你域名的地址</li><li>128是dns.abc.com的映射</li><li>129是<a href="http://www.abc.com的映射/">www.abc.com的映射</a></li><li>dns.abc.com的正&#x2F;反解析ip必须是网卡的dns</li><li>使用nslookup 命令，就可以查看解析</li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Web服务</title>
    <link href="/2020/07/19/Linux/Web/"/>
    <url>/2020/07/19/Linux/Web/</url>
    
    <content type="html"><![CDATA[<h1 id="Linxu中的网络服务之一-Web服务-httpd"><a href="#Linxu中的网络服务之一-Web服务-httpd" class="headerlink" title="Linxu中的网络服务之一    Web服务(httpd)"></a>Linxu中的网络服务之一    Web服务(httpd)</h1><span id="more"></span><p>rpm -q httpd</p><blockquote><p>&#x2F;&#x2F;检查Web服务是否安装</p></blockquote><p>yum install -y httpd</p><blockquote><p>&#x2F;&#x2F;安装httpd软件包  </p></blockquote><p>service httpd start</p><blockquote><p>&#x2F;&#x2F;启动httpd服务  </p></blockquote><p>service  firewalld  stop</p><blockquote><p>&#x2F;&#x2F;关闭防火墙  </p></blockquote><p>setenforce  0</p><blockquote><p>&#x2F;&#x2F;关闭安全策略  </p></blockquote><p>cd &#x2F;var&#x2F;www&#x2F;html</p><blockquote><p>&#x2F;&#x2F;默认网页的文本储存位置<br>&#x2F;&#x2F;var是用户文件  </p></blockquote><p>vi index.html</p><blockquote><p>&#x2F;&#x2F;是网站(index)默认(首页)的文档  </p></blockquote><p>vi &#x2F;etc&#x2F;httpd&#x2F;conf&#x2F;httpd.conf</p><blockquote><p>&#x2F;&#x2F;http的配置服务  </p></blockquote><h3 id="配置文件里的参数-全局配置"><a href="#配置文件里的参数-全局配置" class="headerlink" title="配置文件里的参数(全局配置):"></a>配置文件里的参数(全局配置):</h3><p>ServerRoot “&#x2F;etc&#x2F;httpd”(31行)</p><blockquote><p>&#x2F;&#x2F;软件包总目录  </p></blockquote><p>Listen 80</p><blockquote><p>&#x2F;&#x2F;设置服务的端口，默认省略ip，表示监听本机所有ip的80端口，如果添加其他端口在下一行输入Listenxx即可  </p></blockquote><p>Include conf.modules.d&#x2F;*.conf </p><blockquote><p>&#x2F;&#x2F;补充服务，Include(路径) ,引用</p></blockquote><p>User<br>Group</p><blockquote><p>&#x2F;&#x2F;当阿帕奇安装的时候，系统会自动创建一个用户和用户组,(66行和67行)  </p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs Linux">&lt; Directory &gt;<br>AllowOverride none<br>Require all denied|granted<br>&lt; /Directory &gt;<br>//网站目录的访问权限，默认都是拒绝的(102行-105行)，如果设置成granted表示允许访问。<br>DocumentRoot &quot;/var/www/html&quot;<br>//网站的根目录(119行) <br>&lt;IfModule dir_module&gt;  <br>  DirectoryIndex index.html  <br>  &lt;/IfModule&gt;<br>//设定网站的默认页(首页,162行-164行)  <br>IncludeOptional conf.d/*.conf<br>//加载其他的配置文件(352行),/etc/httpd/conf.d/ (完整路径)  <br></code></pre></td></tr></table></figure><h2 id="基于多个ip地址的虚拟主机"><a href="#基于多个ip地址的虚拟主机" class="headerlink" title="基于多个ip地址的虚拟主机"></a>基于多个ip地址的虚拟主机</h2><p>实现多个网站，一个端口，多ip实现<br>为主机网卡配置多个ip<br>临时增加ip<br>ip addr add 192.168.159.128&#x2F;24 dev ens33</p><blockquote><p>&#x2F;&#x2F;临时配置多ip，然后重启，再次重启后就消失  </p></blockquote><h3 id="如何配置永久的单网卡多ip"><a href="#如何配置永久的单网卡多ip" class="headerlink" title="如何配置永久的单网卡多ip"></a>如何配置永久的单网卡多ip</h3><ol><li><p>cd &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;</p><blockquote><p>&#x2F;&#x2F;进入网卡配置文件  </p></blockquote></li><li><p>vi ifcfg-ens33</p><blockquote><p>&#x2F;&#x2F;目前已经配置了一个ip  </p></blockquote></li><li><p>cp ifcfg-ens33 ifcfg-ens33:1</p><blockquote><p>&#x2F;&#x2F;在同等目录复制出一个一样的网卡配置文件，:1为网卡的子接口  </p></blockquote></li><li><p>vi ifcfg-ens33:1</p></li></ol><blockquote><p>&#x2F;&#x2F;进入ens33:1配置文件，修改配置DEVICE&#x3D;”ens33:1”,然后在更改ip地址即可。  </p></blockquote><h2 id="实现多ip一个端口"><a href="#实现多ip一个端口" class="headerlink" title="实现多ip一个端口:"></a>实现多ip一个端口:</h2><p>在httpd配置文件里增加:<br>a文件  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Linux">&lt;VirtualHost 192.168.159.120:80&gt;<br>ServerName a.com <br>//域名  <br>DocumentRoot &quot;/a&quot;<br>//根目录<br>&lt;font color=“green”&gt;&lt; Directory &quot;/a&quot;&gt;  <br>AllowOverride none  <br>Require all granted  <br>&lt;/Directory&gt;  <br>&lt;/VirtualHost&gt; &lt;/font&gt;<br></code></pre></td></tr></table></figure><p>b文件 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Linux">&lt;VirtualHost 192.168.159.121:80&gt;<br>ServerName a.com<br>//域名  <br>DocumentRoot &quot;/b&quot;<br>//根目录<br>&lt;Directory &quot;/b&quot;&gt;  <br>AllowOverride none  <br>Require all granted  <br>&lt;/Directory&gt;  <br>&lt;/VirtualHost&gt;<br></code></pre></td></tr></table></figure><h2 id="实现单ip多端口的http配置"><a href="#实现单ip多端口的http配置" class="headerlink" title="实现单ip多端口的http配置"></a>实现单ip多端口的http配置</h2><p>只需更改:<br>&lt; VirtualHost 192.168.159.121:80&gt;<br>…<br></VirtualHost><br>&lt;VirtualHost 192.168.159.121:801&gt;<br>…<br></VirtualHost><br>还要在Listen 80处添加语句来表示你新添加的端口号<br>httpd -t </p><blockquote><p>&#x2F;&#x2F;检查配置文件错误  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>DHCP服务</title>
    <link href="/2020/07/19/Linux/DHCP/"/>
    <url>/2020/07/19/Linux/DHCP/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux的网络服务之一"><a href="#Linux的网络服务之一" class="headerlink" title="Linux的网络服务之一"></a>Linux的网络服务之一</h1><span id="more"></span><h2 id="dhcp服务"><a href="#dhcp服务" class="headerlink" title="dhcp服务"></a>dhcp服务</h2><p>rpm -q dhcp</p><blockquote><p>&#x2F;&#x2F;检查是否安装dhcp服务  </p></blockquote><p>yum install -y dhcp</p><blockquote><p>&#x2F;&#x2F;安装dhcp服务 </p></blockquote><p>service dhcpd start</p><blockquote><p>&#x2F;&#x2F;开启dhcp服务</p></blockquote><p>service dhcp restart</p><blockquote><p>&#x2F;&#x2F;重启dhcp服务 </p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a><font color=“#FF00000”>注意:</font></h2><blockquote><p>在虚拟机上的编辑菜单中的虚拟网络编辑器中取消dhcp服务,由于取消了虚拟机网卡的dhcp服务，我们要给网卡手动配置一个ip，linux上的dhcp服务分配的ip必须和你网卡的ip一样。 </p></blockquote><p>vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifcfg-ens33</p><blockquote><p>&#x2F;&#x2F;进入网卡的配置文件(ens33不是固定的) </p></blockquote><h2 id="更改网卡配置文件"><a href="#更改网卡配置文件" class="headerlink" title="更改网卡配置文件:"></a>更改网卡配置文件:</h2><p>bootproto&#x3D;static</p><blockquote><p>&#x2F;&#x2F;变成静态  </p></blockquote><p>ONBOOT&#x3D;yes<br>IPADDR&#x3D;</p><blockquote><p>&#x2F;&#x2F;ip地址  </p></blockquote><p>NETMASK&#x3D;</p><blockquote><p>&#x2F;&#x2F;子网掩码</p></blockquote><p>GATEWAY&#x3D;</p><blockquote><p>&#x2F;&#x2F;网关 ,网络上默认网关:8.8.8.8  </p></blockquote><p>DNS1&#x3D;</p><blockquote><p>&#x2F;&#x2F;DNS服务  </p></blockquote><h2 id="配置完要重启网络服务"><a href="#配置完要重启网络服务" class="headerlink" title="配置完要重启网络服务"></a>配置完要重启网络服务</h2><p>service network restart</p><blockquote><p>&#x2F;&#x2F;重启网卡 </p></blockquote><h2 id="配置dhcp的配置文件"><a href="#配置dhcp的配置文件" class="headerlink" title="配置dhcp的配置文件:"></a>配置dhcp的配置文件:</h2><p>vi &#x2F;etc&#x2F;dhcp&#x2F;dhcpd.conf</p><blockquote><p>&#x2F;&#x2F;dhcp的配置文件</p></blockquote><p>subnet 192.168.100.0 netmask 255.255.255.0{</p><blockquote><p>&#x2F;&#x2F;定义网络地址和子网掩码</p></blockquote><p>range 192.168.100.200 192.168.100.251;</p><blockquote><p>&#x2F;&#x2F;分配ip地址的范围(写完加分号) </p></blockquote><p>option routers 192.168.100.2;</p><blockquote><p>&#x2F;&#x2F;配置网关  </p></blockquote><p>option domain-name-servers 8.8.8.8;</p><blockquote><p>&#x2F;&#x2F;配置DNS  </p></blockquote><p>default-lease-time 600;</p><blockquote><p>&#x2F;&#x2F;配置租约时间(默认,单位为秒)  </p></blockquote><p>max-lease-time 7200;</p><blockquote><p>&#x2F;&#x2F;配置租约时间(最大,单位为秒)  </p></blockquote><p>host xxx{ </p><blockquote><p>&#x2F;&#x2F;指定机器使用ip(xxx代表主机机器名，自行取名，选配)  </p></blockquote><p>hardware ethernet xx:xx:xx:xx:xx:xx:; </p><blockquote><p>&#x2F;&#x2F;指定机器的物理地址(xxx代表指定机器的物理地址)  </p></blockquote><p>fixed-address xxxxxx;</p><blockquote><p>&#x2F;&#x2F;指定机器的ip地址(xxx代表你要给的ip地址)  </p></blockquote><p>}<br>}<br>service dhcp restar</p><blockquote><p>&#x2F;&#x2F;重启dhcp服务  </p></blockquote><h2 id="注意-1"><a href="#注意-1" class="headerlink" title="注意:"></a><font color=“#FF00000”>注意:</font></h2><blockquote><p>1.在dhcp配置文件中，记得要在第一段和最后一段后添加大括号，在大括号里面的每一条语句都要添加分号。<br>2.在文中的给指定PC设置ip可以不选择，看要求.</p></blockquote><h2 id="测试"><a href="#测试" class="headerlink" title="测试:"></a>测试:</h2><p>设置客户端网卡为自动获取，如果不能获取，Linux进行安全设置<br>service  firewalld  stop<br>setenforce  0</p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cd</title>
    <link href="/2020/07/19/Linux/cd/"/>
    <url>/2020/07/19/Linux/cd/</url>
    
    <content type="html"><![CDATA[<h1 id="cd的应用"><a href="#cd的应用" class="headerlink" title="cd的应用"></a>cd的应用</h1><span id="more"></span><h2 id="cd-（目录路径）"><a href="#cd-（目录路径）" class="headerlink" title="cd （目录路径）"></a>cd （目录路径）</h2><blockquote><p>&#x2F;&#x2F;实现切换目录  </p></blockquote><h2 id="x2F"><a href="#x2F" class="headerlink" title="&#x2F;"></a>&#x2F;</h2><blockquote><p>&#x2F;&#x2F;根目录  </p></blockquote><h2 id="home"><a href="#home" class="headerlink" title="home"></a>home</h2><blockquote><p>&#x2F;&#x2F;家目录  </p></blockquote><h2 id=""><a href="#" class="headerlink" title="~"></a>~</h2><blockquote><p>&#x2F;&#x2F;主目录  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cat</title>
    <link href="/2020/07/19/Linux/cat/"/>
    <url>/2020/07/19/Linux/cat/</url>
    
    <content type="html"><![CDATA[<h1 id="cat的应用"><a href="#cat的应用" class="headerlink" title="cat的应用"></a>cat的应用</h1><span id="more"></span><h2 id="cat-文件路径"><a href="#cat-文件路径" class="headerlink" title="cat (文件路径)"></a>cat (文件路径)</h2><blockquote><p>&#x2F;&#x2F;直接打开一个文件和vim不同不需要输入冒号和q</p></blockquote><h2 id="cat-（待合并的文件路径1）-（待合并和文件路径2）-gt-（合并之后的文件路径）"><a href="#cat-（待合并的文件路径1）-（待合并和文件路径2）-gt-（合并之后的文件路径）" class="headerlink" title="cat （待合并的文件路径1） （待合并和文件路径2） &gt;（合并之后的文件路径）"></a>cat （待合并的文件路径1） （待合并和文件路径2） &gt;（合并之后的文件路径）</h2><blockquote><p>&#x2F;&#x2F;实现文件的合并</p></blockquote><h2 id="cat-b-文件名"><a href="#cat-b-文件名" class="headerlink" title="cat -b (文件名)"></a>cat -b (文件名)</h2><blockquote><p>&#x2F;&#x2F;列出行号（忽略空白行）</p></blockquote><h2 id="cat-n-文件名"><a href="#cat-n-文件名" class="headerlink" title="cat -n (文件名)"></a>cat -n (文件名)</h2><blockquote><p>&#x2F;&#x2F;列出行号（不忽略空白）</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>fdisk</title>
    <link href="/2020/07/19/Linux/fdisk/"/>
    <url>/2020/07/19/Linux/fdisk/</url>
    
    <content type="html"><![CDATA[<h1 id="磁盘管理"><a href="#磁盘管理" class="headerlink" title="磁盘管理"></a>磁盘管理</h1><h2 id="fdisk磁盘分区操作"><a href="#fdisk磁盘分区操作" class="headerlink" title="fdisk磁盘分区操作"></a>fdisk磁盘分区操作</h2><span id="more"></span> <blockquote><p>接口：SCSI和IDE和SATA<br>主分区（最多1-4个）、扩展分区（最多0-1个）、逻辑分区（无数个）<br>磁盘编号：由三位字母与一位数字组成<br>主分区：&#x2F;dev&#x2F;sdb1、&#x2F;dev&#x2F;sdb2<br>扩展分区：&#x2F;dev&#x2F;sdb3<br>逻辑分区：&#x2F;dev&#x2F;sdb5、&#x2F;dev&#x2F;sdb6……（以此类推）</p></blockquote><p>fdisk -l</p><blockquote><p>查看分区情况</p></blockquote><p>fdisk &#x2F;dev&#x2F;sdb</p><blockquote><p>进入磁盘编辑模式</p></blockquote><h3 id="子命令"><a href="#子命令" class="headerlink" title="子命令"></a>子命令</h3><ul><li>n <blockquote><p>&#x2F;&#x2F;新建一个分区  </p></blockquote></li><li>p    <blockquote><p>&#x2F;&#x2F;列出分区表  </p></blockquote></li><li>l    <blockquote><p>&#x2F;&#x2F;显示分区文件类型列表  </p></blockquote></li><li>t    <blockquote><p>&#x2F;&#x2F;改变分区文件类型  </p></blockquote></li><li>m<blockquote><p>&#x2F;&#x2F;列出帮助信息  </p></blockquote></li><li>d   <blockquote><p>&#x2F;&#x2F;删除分区  </p></blockquote></li><li>w     <blockquote><p>&#x2F;&#x2F;保存分区  </p></blockquote></li><li>q    <blockquote><p>&#x2F;&#x2F;不保存退出分区  </p></blockquote><h2 id="磁盘的格式化操作"><a href="#磁盘的格式化操作" class="headerlink" title="磁盘的格式化操作"></a>磁盘的格式化操作</h2><p>mkfs（格式化的文件系统类型）（分区名称</p><h1 id="文件的挂载与卸载"><a href="#文件的挂载与卸载" class="headerlink" title="文件的挂载与卸载"></a>文件的挂载与卸载</h1><p>mount (选项(可有可无))（分区）（挂载点<br>例如：  </p><blockquote><p>mount &#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;m1</p></blockquote></li></ul><p>卸载命令格式：<br>umount (分区)(挂载点)<br>例如：  </p><blockquote><p>umount &#x2F;dev&#x2F;sdb1 &#x2F;mnt&#x2F;m1</p></blockquote><h2 id="自动挂载："><a href="#自动挂载：" class="headerlink" title="自动挂载："></a>自动挂载：</h2><p>1.设置开机自动挂载<br>2.增加自动挂载磁盘信息， 修改（vim &#x2F;etc&#x2F;fstab）配置文件：  </p><blockquote><p>vi&#x2F;etc&#x2F;fstab</p></blockquote><p>3.添加以下信息  </p><h2 id="gdisk分区格式：（gpt格式，没有主分区和扩展分区的概念了）"><a href="#gdisk分区格式：（gpt格式，没有主分区和扩展分区的概念了）" class="headerlink" title="gdisk分区格式：（gpt格式，没有主分区和扩展分区的概念了）"></a>gdisk分区格式：（gpt格式，没有主分区和扩展分区的概念了）</h2><p>gdisk （要分区的磁盘）</p><blockquote><p>&#x2F;&#x2F;进入分区，开始划分,里面和fdisk一样，保存后要格式化才能使用</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>find</title>
    <link href="/2020/07/19/Linux/find/"/>
    <url>/2020/07/19/Linux/find/</url>
    
    <content type="html"><![CDATA[<h1 id="find的应用"><a href="#find的应用" class="headerlink" title="find的应用"></a>find的应用</h1><span id="more"></span> <p>find (要查询的文件)  </p><blockquote><p>&#x2F;&#x2F;查找某一文件</p></blockquote><p>find（文件路径）（-name） （查找的文件名</p><blockquote><p>&#x2F;&#x2F;按名字查找  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>date</title>
    <link href="/2020/07/19/Linux/date/"/>
    <url>/2020/07/19/Linux/date/</url>
    
    <content type="html"><![CDATA[<h1 id="date时间应用（课外）"><a href="#date时间应用（课外）" class="headerlink" title="date时间应用（课外）"></a>date时间应用（课外）</h1><span id="more"></span>  <ul><li>date  <blockquote><p>&#x2F;&#x2F;查看操作时间和日期<br>直接用出现<br>2020年4月17日 星期六 ……  </p></blockquote></li><li>第二种表达方法<br>date +%F<blockquote><p>出现结果: 2020-04-17  </p></blockquote></li><li>第三种<br>date “+%F %T”<blockquote><p>引号表示让”年月日时秒分”成为一个不可分割的整体<br>出现结果:2020-04-17 16:00:00  </p></blockquote></li><li>还有好多的用法详情:<br><a href="https://www.cnblogs.com/asxe/p/9317811.html">点击前往</a></li></ul>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>chmod</title>
    <link href="/2020/07/19/Linux/chmod/"/>
    <url>/2020/07/19/Linux/chmod/</url>
    
    <content type="html"><![CDATA[<h1 id="chmod文件权限应用"><a href="#chmod文件权限应用" class="headerlink" title="chmod文件权限应用"></a>chmod文件权限应用</h1><span id="more"></span> <h2 id="ll-文件路径"><a href="#ll-文件路径" class="headerlink" title="ll (文件路径)"></a>ll (文件路径)</h2><blockquote><p>&#x2F;&#x2F;查看文件权限信息<br>例如:-:rw-:r–:r–:.root:root:19mb:03月17:19:43:passwd<br>详细:(文件类型)(文件所属者权限)(文件组权限)(其他用户权限)(所属者)(所属用户)(文件大小)(创建时间)(文件名)  </p><blockquote><p>rw-r–r–<br>rwx(读、写、运行)<br>-(代表没有这个权限)  </p><blockquote><p>文件类型:<br>管道文件  (p)<br>链接文件  (l)<br>块设备文件  (b)  </p></blockquote></blockquote></blockquote><h2 id="chmod命令-修改文件权限"><a href="#chmod命令-修改文件权限" class="headerlink" title="chmod命令  (修改文件权限)"></a>chmod命令  (修改文件权限)</h2><p>#chmod<font color="FF1493"> [给谁]</font><font color="A0522D">[+或者-或＝]</font><font color="#0000FF">[mode]</font><font color="FF00FF">[文件名]  </font>  </p><blockquote><p>＋&#x2F;&#x2F;添加权限<br>—&#x2F;&#x2F;删除权限<br>＝&#x2F;&#x2F;添加新的权限删除以前的权限    </p><blockquote><p>u&#x2F;&#x2F;文件或目录的所有者<br>g&#x2F;&#x2F;组用户<br>o&#x2F;&#x2F;其他用户<br>a&#x2F;&#x2F;所有    </p><blockquote><p>每种身份的数字类型:<br> r:4<br> w:2<br> x:1<br> o:0<br>可以连写，比如u+rwx，g+rwx，中间用逗号隔开即可。</p></blockquote></blockquote></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>free</title>
    <link href="/2020/07/19/Linux/free/"/>
    <url>/2020/07/19/Linux/free/</url>
    
    <content type="html"><![CDATA[<h1 id="free的应用（课外）"><a href="#free的应用（课外）" class="headerlink" title="free的应用（课外）"></a>free的应用（课外）</h1><span id="more"></span><p>free  </p><blockquote><p>&#x2F;&#x2F;（查看内存使用情况 ）  </p></blockquote><p>free -m</p><blockquote><p>&#x2F;&#x2F;（以m为单位统计可以改为g） </p></blockquote><p>free -g </p><blockquote><p>&#x2F;&#x2F;（以g为单位统计）    </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ftp服务</title>
    <link href="/2020/07/19/Linux/ftp/"/>
    <url>/2020/07/19/Linux/ftp/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux的网络服务之一-FTP服务器"><a href="#Linux的网络服务之一-FTP服务器" class="headerlink" title="Linux的网络服务之一  FTP服务器"></a>Linux的网络服务之一  FTP服务器</h1><span id="more"></span><h3 id="安装ftp软件-vsftpd"><a href="#安装ftp软件-vsftpd" class="headerlink" title="安装ftp软件(vsftpd)"></a>安装ftp软件(vsftpd)</h3><blockquote><p>安装方式1:<br>通过光盘，优盘等存储介质安装(本地安装)<br>方式2:<br>网络安装(已经配置网络能够正常访问) </p></blockquote><p>yum install -y vsftpd</p><blockquote><p>&#x2F;&#x2F;通过网络安装vsftpd服务  </p></blockquote><p>rpm -q vsftpd</p><blockquote><p>&#x2F;&#x2F;确认软件是否安装</p></blockquote><h3 id="配置ftp服务"><a href="#配置ftp服务" class="headerlink" title="配置ftp服务"></a>配置ftp服务</h3><p>service vsftpd start</p><blockquote><p>&#x2F;&#x2F;启动(临时，每次重启都得开启)    </p></blockquote><p>service vsftpd stop</p><blockquote><p>&#x2F;&#x2F;停止vsftpd服务</p></blockquote><p>service vsftpd restart </p><blockquote><p>&#x2F;&#x2F;重启ftp服务  </p></blockquote><p>systemctl enable vsftpd</p><blockquote><p>&#x2F;&#x2F;每次开机自启动vsftpd服务</p></blockquote><h3 id="安全设置"><a href="#安全设置" class="headerlink" title="安全设置"></a>安全设置</h3><p>systemctl stop firewalld</p><blockquote><p>&#x2F;&#x2F;关闭防火墙  </p></blockquote><p>systemctl status firewalld</p><blockquote><p>&#x2F;&#x2F;查看防火墙状态 </p></blockquote><p>systemctl start firewalld</p><blockquote><p>&#x2F;&#x2F;启动防火墙</p></blockquote><p>setenforce 0</p><blockquote><p>&#x2F;&#x2F;关闭安全策略或设置配置文件 &#x2F;etc&#x2F;selinux&#x2F;config  设置 SELINUX&#x3D;disabled(临时)   </p></blockquote><p>firewall-cmd –permanent –zone&#x3D;public –add-service&#x3D;ftp</p><blockquote><p>&#x2F;&#x2F;允许通过vsftpd服务的通过  </p></blockquote><!-- firewall-cmd --reload  //重新加载防火墙  --permanent有这个则ftp服务永久通过  --zone=public也可以不写  或关闭或设置selinux 允许ftp服务  方式1:setsebool ftpd_full_access on  //设置允许ftp-->  <h3 id="访问ftp服务器"><a href="#访问ftp服务器" class="headerlink" title="访问ftp服务器"></a>访问ftp服务器</h3><blockquote><p>在计算机里输入<a href="ftp://linux的ip地址/">ftp://linux的ip地址</a><br>在浏览器里输入<a href="ftp://linux的ip地址/">ftp://linux的ip地址</a><br>在cmd里输入 ftp linux的ip地址<br>默认匿名用户的名字Anonymous<br>密码为空密码  </p></blockquote><h3 id="匿名用户"><a href="#匿名用户" class="headerlink" title="匿名用户"></a>匿名用户</h3><p>cd &#x2F;var&#x2F;ftp</p><blockquote><p>&#x2F;&#x2F;vsftpd对于匿名用户的存储位置   </p></blockquote><p>cd &#x2F;home</p><blockquote><p>&#x2F;&#x2F;vsftpd对于登录用户的文件存储位置是  </p></blockquote><h3 id="配置ftp服务的文件"><a href="#配置ftp服务的文件" class="headerlink" title="配置ftp服务的文件"></a>配置ftp服务的文件</h3><p>vi etc&#x2F;vsftpd&#x2F;vsftpd.conf</p><blockquote><p>&#x2F;&#x2F;vtp的配置文件位置</p></blockquote><p>anonymous_enable&#x3D;YES</p><blockquote><p>&#x2F;&#x2F;设置匿名用户是否可以访问(第12行)  </p></blockquote><p>load_enable&#x3D;YES</p><blockquote><p>&#x2F;&#x2F;允许本地用户访问(第16行)  </p></blockquote><p>write_enable&#x3D;YES</p><blockquote><p>&#x2F;&#x2F;所有用户是否可写(第19行)  </p></blockquote><p>anon_upload_enbale&#x3D;YES</p><blockquote><p>&#x2F;&#x2F;前面有#是被注释掉了，不执行 ,匿名用户是否可以上传(第29行)</p></blockquote><p>anon_mkdir_write_enable&#x3D;YES</p><blockquote><p>&#x2F;&#x2F;是否匿名用户是否可以创建目录（第33行）</p></blockquote><p>anon_other_write_enable&#x3D;YES</p><blockquote><p>&#x2F;&#x2F;打开匿名用户删除和重新命名的权限(手动添加)</p></blockquote><h2 id="注意"><a href="#注意" class="headerlink" title="注意:"></a><font color=“#FF00000”>注意:</font></h2><ol><li>配置完之后重启服务  </li><li>除了设置设置配置文件，还要更改文件的读、写、可读权限。<br>anon_umask&#x3D;022<br>&#x2F;&#x2F;匿名用户的掩码(如果需要，自己添加，含义:如umask是022，这时新建一个权限为666的文档，文件的实际权限为666-022&#x3D;644)<br>umask是在linux中常见的一个东西，它其实是一个掩码。当然，也有umask这样一个命令，它是对用户建立的文件的默认属性的定义。该定义为:假设umask为022，则对于一个文件夹的话，它的默认属性为 777-022&#x3D;755,这也就是我们平时建立文件夹的权限。而对于一般的文件的话，则是用 666-022&#x3D;644.</li></ol><h3 id="普通用户访问ftp配置"><a href="#普通用户访问ftp配置" class="headerlink" title="普通用户访问ftp配置"></a>普通用户访问ftp配置</h3><p>ftpusers&#x3D;  </p><blockquote><p>&#x2F;&#x2F;黑名单，写在这个里的用户不能访问 </p></blockquote><p>user_list&#x3D;</p><blockquote><p>&#x2F;&#x2F;黑白(名单)即可,如果不经过配置，默认的是黑名单<br>怎么配置才能变成白名单呢？<br>在user_list&#x3D;的后面添加用户即可。 </p></blockquote><p>userlist_enable&#x3D;YES</p><blockquote><p>&#x2F;&#x2F;用户列表文件是否启用 </p></blockquote><p>userlist_deny&#x3D;YES</p><blockquote><p>&#x2F;&#x2F;用户列表是否为黑名单，YES（user_list）为黑名单，NO为白名单</p></blockquote><p>userlist_file&#x3D;1.txt(文件)</p><blockquote><p>&#x2F;&#x2F;指定文件,在1.txt里设置白名单</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>grep</title>
    <link href="/2020/07/19/Linux/grep/"/>
    <url>/2020/07/19/Linux/grep/</url>
    
    <content type="html"><![CDATA[<h1 id="grep-查找文档字符-的应用"><a href="#grep-查找文档字符-的应用" class="headerlink" title="grep(查找文档字符)的应用"></a>grep(查找文档字符)的应用</h1><span id="more"></span>   <p>grep (要查询的字符)  (文档路径) </p><blockquote><p>&#x2F;&#x2F;查询文档指定字符    </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>mkdir</title>
    <link href="/2020/07/19/Linux/mkdir/"/>
    <url>/2020/07/19/Linux/mkdir/</url>
    
    <content type="html"><![CDATA[<h1 id="mkdir的应用"><a href="#mkdir的应用" class="headerlink" title="mkdir的应用"></a>mkdir的应用</h1><span id="more"></span> <p>mkdir（路径）</p><blockquote><p>&#x2F;&#x2F;创建目录</p></blockquote><p>mkdir -p （路径）</p><blockquote><p>&#x2F;&#x2F;可以连续创建多层不存在的目录    </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>man</title>
    <link href="/2020/07/19/Linux/man/"/>
    <url>/2020/07/19/Linux/man/</url>
    
    <content type="html"><![CDATA[<h1 id="关于linux命令帮助"><a href="#关于linux命令帮助" class="headerlink" title="关于linux命令帮助"></a>关于linux命令帮助</h1><span id="more"></span><p>man</p><blockquote><p>作用:manual，手册（包含了linux中全部命令的手册）<br>退出按q键  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>is</title>
    <link href="/2020/07/19/Linux/ls/"/>
    <url>/2020/07/19/Linux/ls/</url>
    
    <content type="html"><![CDATA[<h1 id="ls的应用"><a href="#ls的应用" class="headerlink" title="ls的应用"></a>ls的应用</h1><span id="more"></span> <p>ls （文档路径</p><blockquote><p>&#x2F;&#x2F;查看此目录的文件信息 </p></blockquote><p>ls -l 缩写：ll  </p><blockquote><p>&#x2F;&#x2F;查看更详细的文件信息</p></blockquote><p>ls -a</p><blockquote><p>&#x2F;&#x2F;显示所有文件及目录包括隐藏文件 </p></blockquote><p>ls -lh </p><blockquote><p>&#x2F;&#x2F;查看可读性更高的文档 （显示文件大小） </p></blockquote><h2 id="文件类型："><a href="#文件类型：" class="headerlink" title="文件类型："></a>文件类型：</h2><p>默认色代表普通文件。<br>红色代表tar包文件。<br>蓝色代表目录文件。<br>水红代表图象文件。<br>青色代表链接文件。（此类文件相当于快捷方式）<br>黄色代表设备文件。   </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ifconfig</title>
    <link href="/2020/07/19/Linux/ifconfig/"/>
    <url>/2020/07/19/Linux/ifconfig/</url>
    
    <content type="html"><![CDATA[<h1 id="关于linux-ifconfig-网络的知识"><a href="#关于linux-ifconfig-网络的知识" class="headerlink" title="关于linux(ifconfig)网络的知识"></a>关于linux(ifconfig)网络的知识</h1><span id="more"></span> <p>作用:用于操作网卡相关指令<br>ifconfig </p><blockquote><p>&#x2F;&#x2F;获取网卡信息  </p></blockquote><p>vi &#x2F;etc&#x2F;sysconfig&#x2F;network-scripts&#x2F;ifconfig-XXX</p><blockquote><p>&#x2F;&#x2F;进入XXX网卡配置文件</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs Linux">inet addr <br>//ip地址    <br>netmask                           <br>//子网掩码    <br>ipaddr  <br>//配置文件的ip地址  <br>GATEWAY<br>//网关地址  <br>DNS<br>//DNS服务 <br></code></pre></td></tr></table></figure><h3 id="在网卡配置文件里更改ip操作"><a href="#在网卡配置文件里更改ip操作" class="headerlink" title="在网卡配置文件里更改ip操作"></a>在网卡配置文件里更改ip操作</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs Linux">bootproto=static                                      <br>//变成静态  <br>ONBOOT=yes<br>//在系统启动时，是否启动网卡                                          <br>IPADDR=.....                                               <br>//ip地址  <br>NETMASK=.......                                              <br>//子网掩码  <br>GATEWAY=......                                                   <br>//网关，网络上默认网关:8.8.8.8  <br>DNS1=........                                                  <br>//DNS服务 <br></code></pre></td></tr></table></figure><p>配置完要重启网络服务  </p><blockquote><p>service network restart 或 systemctl restart network<br>&#x2F;&#x2F;reh7或者centos7以上版本可以使用  </p></blockquote><p>启动网络服务:  </p><blockquote><p>service network start  或 systemctl start network<br>&#x2F;&#x2F;(reh7或者centos7以上版本可以使用)</p></blockquote><p>停止网络服务:    </p><blockquote><p>service network stop 或 systemctl stop network<br>&#x2F;&#x2F; (reh7或者centos7以上版本可以使用) </p></blockquote><p>客户端域名解析服务器的配置文件（临时修改dns）:  </p><blockquote><p>&#x2F;etc&#x2F;resolv.conf<br>&#x2F;&#x2F;DNS客户机配置文件（重启会被重置）</p></blockquote><h2 id="reboot指令"><a href="#reboot指令" class="headerlink" title="reboot指令"></a>reboot指令</h2><p>作用:重新启动计算机<br>reboot -w<br>作用:模拟重启，达到只写关机和开机的日志  </p><h2 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h2><p>作用:网络检测命令<br>ping（参数）（主机名或ip地址  </p><blockquote><p>参数:<br>-c<br>&#x2F;&#x2F;数目:在发送指定数目的包后停止<br>-i<br>&#x2F;&#x2F;秒数:设定间隔几秒发送一个网络包给另一台机器，预设值是一秒<br>-s<br>&#x2F;&#x2F;字节数:指定发送的数据字节数，预设值56，加上8字节的ICMP头，一共是64ICMP数据字节<br>-t<br>&#x2F;&#x2F;存活数值:设置存活数值TTL的大小<br>例如:<br>ping -c 3 192.168.1.20</p></blockquote><h2 id="nmcli"><a href="#nmcli" class="headerlink" title="nmcli"></a>nmcli</h2><p>作用:设置网络状态信息<br>nmcli（参数） （命令</p><blockquote><p>参数:<br>connection:连接设备<br>device:设备<br>例如:<br>显示连接:<br>nmcli connection show<br>&#x2F;&#x2F;查看连接状态:<br>nmcli device status<br>&#x2F;&#x2F;启用连接eth0<br>nmcli connection up eth0<br>&#x2F;&#x2F;创建新连接neweth0    </p></blockquote><h2 id="route"><a href="#route" class="headerlink" title="route"></a>route</h2><p>作用:查看路由表信息<br>ROUTE</p><blockquote><p>例如:添加一条默认路由:<br> #rout add default gw 192.168.0.254 </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rm</title>
    <link href="/2020/07/19/Linux/rm/"/>
    <url>/2020/07/19/Linux/rm/</url>
    
    <content type="html"><![CDATA[<h1 id="rm的应用"><a href="#rm的应用" class="headerlink" title="rm的应用"></a>rm的应用</h1><span id="more"></span> <p>rm (文档路径)</p><blockquote><p>&#x2F;&#x2F;删除一个文档</p></blockquote><p>rm -f (文档路径)</p><blockquote><p>&#x2F;&#x2F;可以删除多个文件，无删除提示 </p></blockquote><p> rm -r （文档路径）</p><blockquote><p>&#x2F;&#x2F;可以删除一个文件夹  此命令可以与-f连用  </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Touch</title>
    <link href="/2020/07/19/Linux/touch/"/>
    <url>/2020/07/19/Linux/touch/</url>
    
    <content type="html"><![CDATA[<h1 id="touch的应用"><a href="#touch的应用" class="headerlink" title="touch的应用"></a>touch的应用</h1> <span id="more"></span><p> touch (文件路径)</p><blockquote><p>&#x2F;&#x2F;创建文件</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>shutdown</title>
    <link href="/2020/07/19/Linux/shutdown/"/>
    <url>/2020/07/19/Linux/shutdown/</url>
    
    <content type="html"><![CDATA[<h1 id="关于linux关机的知识"><a href="#关于linux关机的知识" class="headerlink" title="关于linux关机的知识"></a>关于linux关机的知识</h1><span id="more"></span><p>shutdown<br>作用:关机<br>服务器慎用<br>shutdown -h now</p><blockquote><p>&#x2F;&#x2F;立即关机</p></blockquote><p>shutdown -h （时间）</p><blockquote><p>&#x2F;&#x2F;定时关机</p></blockquote><blockquote><p>&#x2F;&#x2F;按ctrl+c退出关机计划<br>如果在centos7.x之前的版本：按ctrl+c退出关机计划<br>如果在centos7.x之后的版本：shutdown -c    </p></blockquote><h2 id="其他关机命令"><a href="#其他关机命令" class="headerlink" title="其他关机命令:"></a>其他关机命令:</h2><p>init 0<br>halt<br>poweroff<br>uptime<br>&#x2F;&#x2F;作用:输出计算机的持续在线时间（从计算机开机以来到现在运行的时间）  </p>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Tail</title>
    <link href="/2020/07/19/Linux/tail%20head/"/>
    <url>/2020/07/19/Linux/tail%20head/</url>
    
    <content type="html"><![CDATA[<h1 id="hand的应用"><a href="#hand的应用" class="headerlink" title="hand的应用"></a>hand的应用</h1> <span id="more"></span> <p>head (文件路径)</p><blockquote><p>&#x2F;&#x2F;(查看一个文件的前N行，如果不指定，默认10行)</p></blockquote><p>head -n</p><blockquote><p>&#x2F;&#x2F;n＝你要看的行数+文件路径  </p></blockquote><h1 id="tail的应用"><a href="#tail的应用" class="headerlink" title="tail的应用"></a>tail的应用</h1><p>tail (文件路径)</p><blockquote><p>&#x2F;&#x2F;（查看一个文件的末n行，如果不指定，默认10行）</p></blockquote><p>tail -n</p><blockquote><p>&#x2F;&#x2F; n＝你要看的行数 +文件路径</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Samba服务</title>
    <link href="/2020/07/19/Linux/samba/"/>
    <url>/2020/07/19/Linux/samba/</url>
    
    <content type="html"><![CDATA[<h1 id="Linux网络服务之一-samba-文件共享-服务"><a href="#Linux网络服务之一-samba-文件共享-服务" class="headerlink" title="Linux网络服务之一    samba(文件共享)服务"></a>Linux网络服务之一    samba(文件共享)服务</h1><h2 id="Samba服务-共享文件"><a href="#Samba服务-共享文件" class="headerlink" title="Samba服务(共享文件)"></a>Samba服务(共享文件)</h2><span id="more"></span><p>rpm -q samba</p><blockquote><p>&#x2F;&#x2F;检查samba服务是否安装</p></blockquote><p>yum install -y samba</p><blockquote><p>&#x2F;&#x2F;安装samba</p></blockquote><p>service smb start</p><blockquote><p>&#x2F;&#x2F;启动samba服务</p></blockquote><p>systemctl stop firewalld</p><blockquote><p>&#x2F;&#x2F;停止防火墙</p></blockquote><p>setenforce 0</p><blockquote><p>&#x2F;&#x2F;设置关闭临时策略(临时)</p></blockquote><p>vi&#x2F;etc&#x2F;selinux&#x2F;config</p><blockquote><p>&#x2F;&#x2F;设置 SELINUX&#x3D;disabled,永久设置安全策略</p></blockquote><p>vi&#x2F;etc&#x2F;samba&#x2F;smb.conf</p><blockquote><p>&#x2F;&#x2F;smb的配置文件</p></blockquote><h3 id="在配置文件中"><a href="#在配置文件中" class="headerlink" title="在配置文件中"></a>在配置文件中</h3><blockquote><p>global<br>&#x2F;&#x2F;(全局配置)  </p></blockquote><blockquote><p>homes<br>&#x2F;&#x2F;(共享文件夹) </p></blockquote><blockquote><p>print$<br>&#x2F;&#x2F;(共享打印机)</p></blockquote><h3 id="例子-配置匿名用户访问"><a href="#例子-配置匿名用户访问" class="headerlink" title="例子:配置匿名用户访问"></a>例子:配置匿名用户访问</h3><h4 id="对应配置"><a href="#对应配置" class="headerlink" title="对应配置:"></a>对应配置:</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs Linux">[xxxx] <br>//共享文件的名字<br>comment=XXX<br>//共享描述<br>path=XXX<br>//共享的文件夹路径<br>browseable=yes<br>//共享目录是否显示，yes为显示，no为不显示<br>map to guest=bad user<br>//和browseable配套使用(此命令在全局配置中输入:允许匿名访问)<br>writable=yes<br>//共享目录是否可写，如果是yes需要同时设置共享的目录的用户权限为可写，可以使用chomd命令来设置  <br>//注意:配置文件中的命令和文件夹的权限是两码事。<br>guest ok=yes<br>//是否允许匿名访问<br></code></pre></td></tr></table></figure><p>service smb restart</p><blockquote><p>&#x2F;&#x2F;重启服务</p></blockquote><p>testparm</p><blockquote><p>&#x2F;&#x2F;检查配置文件错误</p></blockquote><p>注意:工作当中一般匿名用户是没有权限写入的</p><h3 id="例子2-配置普通用户的访问"><a href="#例子2-配置普通用户的访问" class="headerlink" title="例子2:配置普通用户的访问"></a>例子2:配置普通用户的访问</h3><p>useradd XXX</p><blockquote><p>&#x2F;&#x2F;添加用户</p></blockquote><p>smbpasswd -a XXX</p><blockquote><p>&#x2F;&#x2F;给xxx用户设置密码</p></blockquote><p>writable&#x3D;yes</p><blockquote><p>&#x2F;&#x2F;允许写入操作，同时要设置共享文件夹的权限</p></blockquote><p>valid users&#x3D;XXX</p><blockquote><p>&#x2F;&#x2F;可以访问的用户列表，如果多用户用逗号隔开</p></blockquote><p>write list&#x3D;XXX</p><blockquote><p>&#x2F;&#x2F;有写入权限的用户列表，如果多用户用逗号隔开<br>注意:如果有writable，会冲突，可以把writable删除掉</p></blockquote><p>net use * &#x2F;del &#x2F;y</p><blockquote><p>&#x2F;&#x2F;删除用户登录信息（可以达到更换用户Windows的cmd应用）</p></blockquote><h3 id="Win7注意"><a href="#Win7注意" class="headerlink" title="Win7注意:"></a>Win7注意:</h3><h4 id="如果前提配置文件都配置完整后还不能访问samba服务则"><a href="#如果前提配置文件都配置完整后还不能访问samba服务则" class="headerlink" title="如果前提配置文件都配置完整后还不能访问samba服务则:"></a>如果前提配置文件都配置完整后还不能访问samba服务则:</h4><ol><li>Win+r，然后输入secpol.msc  </li><li>点击本地策略  </li><li>点击安全选项  </li><li>在右侧找到:网络安全:LAN管理器身份验证级别并更改为发送LM和HTLM-如果以协商，则使用NTLMv2会话安全即可。<h4 id="如果设置了普通用户访问samba文件夹不能访问"><a href="#如果设置了普通用户访问samba文件夹不能访问" class="headerlink" title="如果设置了普通用户访问samba文件夹不能访问"></a>如果设置了普通用户访问samba文件夹不能访问</h4></li><li>修改 &#x2F;etc&#x2F;samba&#x2F;smb.conf，在Global项下增加:  </li><li>client lanman auth &#x3D; YES      </li><li>lanman auth &#x3D; YES  </li><li>ntlm auth &#x3D; YES</li></ol>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>uname</title>
    <link href="/2020/07/19/Linux/uname/"/>
    <url>/2020/07/19/Linux/uname/</url>
    
    <content type="html"><![CDATA[<h1 id="关于linux操作系统的知识"><a href="#关于linux操作系统的知识" class="headerlink" title="关于linux操作系统的知识"></a>关于linux操作系统的知识</h1><span id="more"></span><p>uname  </p><blockquote><p>作用:获取计算机操作系统相关的信息 </p></blockquote><p>uname -a</p><blockquote><p>&#x2F;&#x2F;表示获取全部的系统信息（包括，类型、全部主机版本、内核版本、发布时间、开源计划）</p></blockquote><p>nestart -tnlp</p><blockquote><p>&#x2F;&#x2F;查看网络的连接状态<br>选项说明:</p><ul><li>-t:表示只列出tcp协议的链接  </li><li>-n:表示列出ip地址，将协议转化成端口号  </li><li>-l:表示过滤出“state（状态）”列中其值为listen（监听）的连接  </li><li>-p:表示显示发起连接的进程的PID和进程的名称</li></ul></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vim</title>
    <link href="/2020/07/19/Linux/vim/"/>
    <url>/2020/07/19/Linux/vim/</url>
    
    <content type="html"><![CDATA[<h1 id="vim编辑器的应用"><a href="#vim编辑器的应用" class="headerlink" title="vim编辑器的应用"></a>vim编辑器的应用</h1><span id="more"></span> <blockquote><p>vim （文本编辑器）</p></blockquote><p>vim(文件路径，文件可有可无)</p><p>编辑文档的时候:<br>shift+:然后输入q 回车</p><blockquote><p>&#x2F;&#x2F;退出打开的文件</p></blockquote><details><summary>更多信息</summary><blockquote><p>i<br>编辑文档，在状态行显示–INSERT<br>w<br>保存已编辑完成的文档<br>q<br>关闭文档并退出<br>q！<br>强制关闭文档并退出<br>&#x2F;(字符串)<br>在文档中查找指定的字符串,使用n查找下一个字符<br>set number<br>文档中显示行号<br>set nonumber<br>文档中不显示行号<br>d<br>删除当前行<br>nd<br>删除第n行<br>n1,n2d<br>删除从n1行到n2行<br>.,$<br>d删除当前行到结尾的所有内容<br>s&#x2F;字符串1 &#x2F;字符串2&#x2F;g<br>将当前行文档中字符串1用字符串2替换<br>%s&#x2F;字符串1 &#x2F;字符串2&#x2F;g<br>将文档中所有字符串1用字符串2替换<br>ESC键<br>退出文档编辑状态，进入非编辑状态<br>Shift+:键<br>在非编辑状态，用来在文档左下角输入子命令的一个提示符<br>u<br>在非编辑状态，撤销上次操作</p></blockquote></details>    ]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Useradd</title>
    <link href="/2020/07/19/Linux/useradd/"/>
    <url>/2020/07/19/Linux/useradd/</url>
    
    <content type="html"><![CDATA[<h1 id="组和用户的详细信息与操作-（重点）"><a href="#组和用户的详细信息与操作-（重点）" class="headerlink" title="组和用户的详细信息与操作  （重点）"></a>组和用户的详细信息与操作  （重点）</h1><span id="more"></span>  <h2 id="用户的配置和修改"><a href="#用户的配置和修改" class="headerlink" title="用户的配置和修改"></a>用户的配置和修改</h2><p>useradd （用户名</p><blockquote><p>&#x2F;&#x2F; 创建一个用户</p></blockquote><p>tail &#x2F;etc&#x2F;passwd</p><blockquote><p>&#x2F;&#x2F; 可以查看用户 </p></blockquote><blockquote><p>例如:gopher:X:13:30:gopher:&#x2F;var&#x2F;gopher&#x2F;:&#x2F;sbin&#x2F;nologin<br>解释:用户名:密码:用户id:用户所在组id:备注:用户家目录:shell命令所在目录。</p></blockquote><blockquote><p>如果想改变uid号和组id号则：<br>usermod -u （新id号） -g （对应组的id号） -c （注释信息） -d （后面加目录） -s（修改的用户的shell） （用户名称  ）</p></blockquote><p>usermod(参数)</p><h3 id="参数"><a href="#参数" class="headerlink" title="参数:"></a>参数:</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs Linux">-u <br>//设置用户ID（UID），用户ID和账号一样必须是唯一的。<br>-g         <br>//指定用户所属的主（私有）组（组必须存在），参数可以是组名称或组ID(GID)。<br>-d        <br>//建立用户目录，参数即所建的用户目录（通常与用户账号相同）。<br>-s       <br>//设置用户环境，即设置用户的shell环境。<br>-e      <br>//设置用户账号的使用期限。<br>-G     <br>//用户组，指定用户所属的附加组。 <br>-c  <br>//修改注释信息 <br></code></pre></td></tr></table></figure><p>usermod -l （你要改的用户名） （原来的用户名）</p><blockquote><p>&#x2F;&#x2F;修改用户名</p></blockquote><p>usermod (要删除的用户名)</p><blockquote><p>&#x2F;&#x2F;删除用户名      </p></blockquote><h3 id="密码文件"><a href="#密码文件" class="headerlink" title="密码文件"></a>密码文件</h3><p>tail &#x2F;etc&#x2F;shadow</p><blockquote><p>&#x2F;&#x2F;查看密码文件。</p></blockquote><p>passwd (用户名)</p><blockquote><p>&#x2F;&#x2F;设置密码。</p></blockquote><p>tail &#x2F;etc&#x2F;shadow</p><blockquote><p>&#x2F;查看组密码信息</p></blockquote><blockquote><p>例如:user1:!!:17464:0:99999:7:::  </p><blockquote><p>含义:用户名：密码（无法破解）：最后一次修改时间：密码还有多少天不能更改：密码到期时间：密码到期前的期限：密码失效期限：账号生命周期：保留字&#x2F;etc&#x2F;passwd（用户信息）</p></blockquote></blockquote><h3 id="组的应用和修改"><a href="#组的应用和修改" class="headerlink" title="组的应用和修改"></a>组的应用和修改</h3><p>userdel -r (用户名）</p><blockquote><p>&#x2F;&#x2F;删除用户和目录。</p></blockquote><p>groupadd （组名称）</p><blockquote><p>&#x2F;&#x2F;创建一个用户组 </p></blockquote><p>tail &#x2F;etc&#x2F;group</p><blockquote><p>&#x2F;&#x2F;查看用户组文件</p></blockquote><blockquote><p>例如:ip:X:7:deamon:ip<br>解释:用户组:用户组口令:UID和该用户组包含的用户  </p></blockquote><p>usermod -g （要修改的组）（用户名称）</p><blockquote><p>&#x2F;&#x2F;修改用户的组 </p></blockquote><p>usermod -d  （主目录）（用户名）</p><blockquote><p>&#x2F;&#x2F;修改用户的主目录为…..</p></blockquote><p>passwd -l （用户名）</p><blockquote><p>&#x2F;&#x2F;锁定用户  </p></blockquote><p>passwd -u （用户名）</p><blockquote><p>&#x2F;&#x2F;解锁用户  </p></blockquote><p>gpasswd -d （用户名） （组名）</p><blockquote><p>&#x2F;&#x2F;从组中删除用户 </p></blockquote><p>groupdel （组名）</p><blockquote><p>&#x2F;&#x2F;删除组  </p></blockquote><p>gpasswd (组名称)</p><blockquote><p>&#x2F;&#x2F;给组设置密码  </p></blockquote><p>gpasswd -d （用户名） （组名）    </p><blockquote><p>&#x2F;&#x2F;从组中删除用户 </p></blockquote><p>gpasswd -a  （用户名）</p><blockquote><p>&#x2F;&#x2F;为组增加用户</p></blockquote><h3 id="id的应用"><a href="#id的应用" class="headerlink" title="id的应用"></a>id的应用</h3><p>id (用户名) </p><blockquote><p>&#x2F;&#x2F;查看用户id信息</p></blockquote><p>id-g （用户名）</p><blockquote><p>&#x2F;&#x2F;显示用户所属群组的ID </p></blockquote><p>id-G （用户名）</p><blockquote><p>&#x2F;&#x2F;显示用户所属附加群组的ID</p></blockquote><p>id-u （用户名）</p><blockquote><p>&#x2F;&#x2F;显示用户ID     </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Wc</title>
    <link href="/2020/07/19/Linux/wc/"/>
    <url>/2020/07/19/Linux/wc/</url>
    
    <content type="html"><![CDATA[<h1 id="wc的应用（扩充）"><a href="#wc的应用（扩充）" class="headerlink" title="wc的应用（扩充）"></a>wc的应用（扩充）</h1><span id="more"></span>  <p>wc   (文件目录)       </p><blockquote><p>&#x2F;&#x2F;（统计文件内容信息（包含行数、单词数、字节数））</p></blockquote><p>wc-l</p><blockquote><p>&#x2F;&#x2F;（行数）</p></blockquote><p>wc-w</p><blockquote><p>&#x2F;&#x2F;（单词数）</p></blockquote><p>wc-c</p><blockquote><p>&#x2F;&#x2F;（字节数）    </p></blockquote>]]></content>
    
    
    <categories>
      
      <category>Linux</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Linux</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
